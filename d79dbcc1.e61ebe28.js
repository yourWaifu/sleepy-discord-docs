(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{272:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return d})),t.d(n,"default",(function(){return l}));var r=t(3),c=t(7),a=(t(0),t(319)),i={title:"sleepy_discord/asio_udp.cpp"},o={unversionedId:"reference/Files/asio__udp_8cpp",id:"reference/Files/asio__udp_8cpp",isDocsHomePage:!1,title:"sleepy_discord/asio_udp.cpp",description:"Namespaces",source:"@site/docs\\reference\\Files\\asio__udp_8cpp.md",slug:"/reference/Files/asio__udp_8cpp",permalink:"/sleepy-discord-docs/docs/reference/Files/asio__udp_8cpp",version:"current",sidebar:"Reference",previous:{title:"include/sleepy_discord/asio_schedule.h",permalink:"/sleepy-discord-docs/docs/reference/Files/asio__schedule_8h"},next:{title:"include/sleepy_discord/asio_udp.h",permalink:"/sleepy-discord-docs/docs/reference/Files/asio__udp_8h"}},d=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function handle_send",id:"function-handle_send",children:[]}]},{value:"Source code",id:"source-code",children:[]}],s={toc:d};function l(e){var n=e.components,t=Object(c.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"namespaces"},"Namespaces"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},"Name"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(a.b)("h2",{id:"functions"},"Functions"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null}),Object(a.b)("th",{parentName:"tr",align:null},"Name"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"void"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Files/asio__udp_8cpp#function-handle_send"},"handle_send")),"(const std::error_code & , std::size_t , GenericUDPClient::SendHandler handler)")))),Object(a.b)("h2",{id:"functions-documentation"},"Functions Documentation"),Object(a.b)("h3",{id:"function-handle_send"},"function handle_send"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"void handle_send(\n    const std::error_code & ,\n    std::size_t ,\n    GenericUDPClient::SendHandler handler\n)\n")),Object(a.b)("h2",{id:"source-code"},"Source code"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},'#include "asio_udp.h"\n#ifndef NONEXISTENT_ASIO\n\n#include "client.h"\n\nnamespace SleepyDiscord {\n    //Note: you need to be using a ASIOBasedScheduleHandler for this to work\n    ASIOUDPClient::ASIOUDPClient(BaseDiscordClient& client) :\n        ASIOUDPClient(static_cast<ASIOBasedScheduleHandler&>(client.getScheduleHandler()).getIOService())\n    {}\n\n    ASIOUDPClient::ASIOUDPClient(asio::io_service& service) :\n        iOService(&service),\n        uDPSocket(*iOService, asio::ip::udp::endpoint(asio::ip::udp::v4(), 0)),\n        resolver (*iOService)\n    {\n\n    }\n\n    bool ASIOUDPClient::connect(const std::string & to, const uint16_t port) {\n        if (iOService == nullptr) return false;\n        endpoint = *resolver.resolve({ asio::ip::udp::v4(), to, std::to_string(port) });\n        return true;\n    }\n\n    void handle_send(\n        const std::error_code& /*error*/,\n        std::size_t /*bytes_transferred*/,\n        GenericUDPClient::SendHandler handler\n    ) {\n        handler();\n    }\n\n    void ASIOUDPClient::send(\n        const uint8_t* _buffer,\n        size_t bufferLength,\n        SendHandler handler\n    ) {\n        if (iOService == nullptr) return;\n        uDPSocket.async_send_to(asio::buffer(_buffer, bufferLength), endpoint,\n            std::bind(&handle_send, std::placeholders::_1, std::placeholders::_2, handler)\n        );\n    }\n\n    void ASIOUDPClient::receive(ReceiveHandler handler) {\n        if (iOService == nullptr) return;\n        uDPSocket.async_receive_from(asio::buffer(buffer, bufferSize), endpoint, 0,\n            std::bind(\n                &ASIOUDPClient::handle_receive, this, std::placeholders::_1,\n                std::placeholders::_2, handler\n            )\n        );\n    }\n\n    void ASIOUDPClient::handle_receive(\n        const std::error_code& /*error*/,\n        std::size_t bytes_transferred,\n        ReceiveHandler handler\n    ) {\n        handler(std::vector<uint8_t>(buffer, buffer + bytes_transferred));\n    }\n};\n\n#endif\n')),Object(a.b)("hr",null),Object(a.b)("p",null,"Updated on  9 February 2021 at 07:04:59 Eastern Standard Time"))}l.isMDXComponent=!0},319:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var r=t(0),c=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,c=function(e,n){if(null==e)return{};var t,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var s=c.a.createContext({}),l=function(e){var n=c.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return c.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return c.a.createElement(c.a.Fragment,{},n)}},b=c.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),p=l(t),b=r,f=p["".concat(i,".").concat(b)]||p[b]||u[b]||a;return t?c.a.createElement(f,o(o({ref:n},s),{},{components:t})):c.a.createElement(f,o({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=b;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<a;s++)i[s]=t[s];return c.a.createElement.apply(null,i)}return c.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);