(window.webpackJsonp=window.webpackJsonp||[]).push([[200],{270:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return i})),r.d(t,"toc",(function(){return p})),r.d(t,"default",(function(){return s}));var n=r(3),c=r(7),a=(r(0),r(311)),o={title:"SleepyDiscord::Cache::iterator"},i={unversionedId:"reference/Classes/class_sleepy_discord_1_1_cache_1_1iterator",id:"reference/Classes/class_sleepy_discord_1_1_cache_1_1iterator",isDocsHomePage:!1,title:"SleepyDiscord::Cache::iterator",description:"Public Types Documentation",source:"@site/docs\\reference\\Classes\\class_sleepy_discord_1_1_cache_1_1iterator.md",slug:"/reference/Classes/class_sleepy_discord_1_1_cache_1_1iterator",permalink:"/sleepy-discord-docs/docs/reference/Classes/class_sleepy_discord_1_1_cache_1_1iterator",editUrl:"https://github.com/yourWaifu/sleepy-discord-docs/edit/master/docs/reference/Classes/class_sleepy_discord_1_1_cache_1_1iterator.md",version:"current",sidebar:"someSidebar",previous:{title:"SleepyDiscord::Cache::const_iterator",permalink:"/sleepy-discord-docs/docs/reference/Classes/class_sleepy_discord_1_1_cache_1_1const__iterator"},next:{title:"SleepyDiscord::CustomSession",permalink:"/sleepy-discord-docs/docs/reference/Classes/class_sleepy_discord_1_1_custom_session"}},p=[{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using Value",id:"using-value",children:[]},{value:"using self_type",id:"using-self_type",children:[]},{value:"using value_type",id:"using-value_type",children:[]},{value:"using reference",id:"using-reference",children:[]},{value:"using pointer",id:"using-pointer",children:[]},{value:"using iterator_category",id:"using-iterator_category",children:[]},{value:"using difference_type",id:"using-difference_type",children:[]}]},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function iterator",id:"function-iterator",children:[]},{value:"function operator++",id:"function-operator",children:[]},{value:"function operator++",id:"function-operator-1",children:[]},{value:"function operator*",id:"function-operator-2",children:[]},{value:"function operator-&gt;",id:"function-operator-",children:[]},{value:"function operator==",id:"function-operator-3",children:[]},{value:"function operator!=",id:"function-operator-4",children:[]},{value:"function operator const_iterator",id:"function-operator-const_iterator",children:[]},{value:"function getParent",id:"function-getparent",children:[]}]}],l={toc:p};function s(e){var t=e.components,r=Object(c.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"public-types-documentation"},"Public Types Documentation"),Object(a.b)("h3",{id:"using-value"},"using Value"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::iterator::Value =  typename Parent::iterator;\n")),Object(a.b)("h3",{id:"using-self_type"},"using self_type"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::iterator::self_type =  iterator;\n")),Object(a.b)("h3",{id:"using-value_type"},"using value_type"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::iterator::value_type =  Type;\n")),Object(a.b)("h3",{id:"using-reference"},"using reference"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::iterator::reference =  Type&;\n")),Object(a.b)("h3",{id:"using-pointer"},"using pointer"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::iterator::pointer =  Type*;\n")),Object(a.b)("h3",{id:"using-iterator_category"},"using iterator_category"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::iterator::iterator_category =  typename Value::iterator_category;\n")),Object(a.b)("h3",{id:"using-difference_type"},"using difference_type"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::iterator::difference_type =  typename Value::difference_type;\n")),Object(a.b)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),Object(a.b)("h3",{id:"function-iterator"},"function iterator"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline iterator(\n    Value iter\n)\n")),Object(a.b)("h3",{id:"function-operator"},"function operator++"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline self_type operator++()\n")),Object(a.b)("h3",{id:"function-operator-1"},"function operator++"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline self_type operator++(\n    int junk\n)\n")),Object(a.b)("h3",{id:"function-operator-2"},"function operator*"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline reference operator*()\n")),Object(a.b)("h3",{id:"function-operator-"},"function operator->"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline pointer operator->()\n")),Object(a.b)("h3",{id:"function-operator-3"},"function operator=="),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline bool operator==(\n    const self_type & right\n)\n")),Object(a.b)("h3",{id:"function-operator-4"},"function operator!="),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline bool operator!=(\n    const self_type & right\n)\n")),Object(a.b)("h3",{id:"function-operator-const_iterator"},"function operator const_iterator"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline operator const_iterator()\n")),Object(a.b)("h3",{id:"function-getparent"},"function getParent"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline Value getParent()\n")),Object(a.b)("hr",null),Object(a.b)("p",null,"Updated on  9 February 2021 at 07:04:54 Eastern Standard Time"))}s.isMDXComponent=!0},311:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return f}));var n=r(0),c=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,c=function(e,t){if(null==e)return{};var r,n,c={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(c[r]=e[r]);return c}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(c[r]=e[r])}return c}var l=c.a.createContext({}),s=function(e){var t=c.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return c.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},b=c.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,o=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=s(r),b=n,f=u["".concat(o,".").concat(b)]||u[b]||d[b]||a;return r?c.a.createElement(f,i(i({ref:t},l),{},{components:r})):c.a.createElement(f,i({ref:t},l))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,o=new Array(a);o[0]=b;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var l=2;l<a;l++)o[l]=r[l];return c.a.createElement.apply(null,o)}return c.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"}}]);