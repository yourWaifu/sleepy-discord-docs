(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{142:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return i}));var r=t(3),a=t(7),s=(t(0),t(319)),o={title:"include/sleepy_discord/common_return_types.h"},c={unversionedId:"reference/Files/common__return__types_8h",id:"reference/Files/common__return__types_8h",isDocsHomePage:!1,title:"include/sleepy_discord/common_return_types.h",description:"Namespaces",source:"@site/docs\\reference\\Files\\common__return__types_8h.md",slug:"/reference/Files/common__return__types_8h",permalink:"/sleepy-discord-docs/docs/reference/Files/common__return__types_8h",version:"current",sidebar:"Reference",previous:{title:"include/sleepy_discord/client.h",permalink:"/sleepy-discord-docs/docs/reference/Files/client_8h"},next:{title:"sleepy_discord/cpr_session.cpp",permalink:"/sleepy-discord-docs/docs/reference/Files/cpr__session_8cpp"}},p=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Classes",id:"classes",children:[]},{value:"Types",id:"types",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Types Documentation",id:"types-documentation",children:[{value:"typedef BoolResponse",id:"typedef-boolresponse",children:[]},{value:"using ArrayResponse",id:"using-arrayresponse",children:[]},{value:"using VoidResponse",id:"using-voidresponse",children:[]}]},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function SuccessCodeFn",id:"function-successcodefn",children:[]},{value:"function EmptyRespFn",id:"function-emptyrespfn",children:[]},{value:"function StandardRespFn",id:"function-standardrespfn",children:[]}]},{value:"Source code",id:"source-code",children:[]}],l={toc:p};function i(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"namespaces"},"Namespaces"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(s.b)("h2",{id:"classes"},"Classes"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null}),Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"struct"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_standard_response"},"SleepyDiscord::StandardResponse")))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"struct"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_boolean_response"},"SleepyDiscord::BooleanResponse")))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"struct"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_object_response"},"SleepyDiscord::ObjectResponse")))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"struct"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_array_response_wrapper"},"SleepyDiscord::ArrayResponseWrapper")))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"struct"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_string_response"},"SleepyDiscord::StringResponse")))))),Object(s.b)("h2",{id:"types"},"Types"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null}),Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"typedef BooleanResponse"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Files/common__return__types_8h#typedef-boolresponse"},"BoolResponse")))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"template <class Type ",">"," ",Object(s.b)("br",null),"using json::ArrayWrapper< Type, ArrayResponseWrapper >"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Files/common__return__types_8h#using-arrayresponse"},"ArrayResponse")))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"using StringResponse"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Files/common__return__types_8h#using-voidresponse"},"VoidResponse")))))),Object(s.b)("h2",{id:"functions"},"Functions"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null}),Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"template <ErrorCode Code",">"," ",Object(s.b)("br",null),"const BooleanResponse::Callback"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Files/common__return__types_8h#function-successcodefn"},"SuccessCodeFn")),"()")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"const BooleanResponse::Callback"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Files/common__return__types_8h#function-emptyrespfn"},"EmptyRespFn")),"()")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"const BooleanResponse::Callback"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Files/common__return__types_8h#function-standardrespfn"},"StandardRespFn")),"()")))),Object(s.b)("h2",{id:"types-documentation"},"Types Documentation"),Object(s.b)("h3",{id:"typedef-boolresponse"},"typedef BoolResponse"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"typedef BooleanResponse SleepyDiscord::BoolResponse;\n")),Object(s.b)("h3",{id:"using-arrayresponse"},"using ArrayResponse"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Type >\nusing SleepyDiscord::ArrayResponse = typedef json::ArrayWrapper<Type, ArrayResponseWrapper>;\n")),Object(s.b)("h3",{id:"using-voidresponse"},"using VoidResponse"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::VoidResponse = typedef StringResponse;\n")),Object(s.b)("h2",{id:"functions-documentation"},"Functions Documentation"),Object(s.b)("h3",{id:"function-successcodefn"},"function SuccessCodeFn"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"template <ErrorCode Code>\ninline const BooleanResponse::Callback SuccessCodeFn()\n")),Object(s.b)("h3",{id:"function-emptyrespfn"},"function EmptyRespFn"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline const BooleanResponse::Callback EmptyRespFn()\n")),Object(s.b)("h3",{id:"function-standardrespfn"},"function StandardRespFn"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},"inline const BooleanResponse::Callback StandardRespFn()\n")),Object(s.b)("h2",{id:"source-code"},"Source code"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <functional>\n#include "http.h"\n#include "json_wrapper.h"\n#include "error.h"\n\nnamespace SleepyDiscord {\n    struct StandardResponse : Response {    //This is here for possiable future use\n        explicit StandardResponse(const Response& response) : Response(response) {}\n    };\n\n    struct BooleanResponse : public StandardResponse {\n    public:\n        using StandardResponse::StandardResponse;\n        using Callback = std::function<bool(const Response& response)>;\n        using Type = bool;\n        BooleanResponse(const Response& response, const Callback callback) :\n            StandardResponse(response), wasSuccessful(callback) { }\n\n        inline operator Type() const {\n            return wasSuccessful(*this) || !error();\n        }\n\n        Type operator*() const {\n            return operator Type();\n        }\n\n        inline Type cast() {\n            return operator Type();\n        }\n\n        //this isn\'t a function so that we can override it during construction.\n        //this isn\'t a virtual function because then we need lots of child classes\n        //this isn\'t used in a template because then the user would have to write the right error handling function\n        const Callback wasSuccessful = [](const Response& /*response*/) { return true; };\n    };\n\n    typedef BooleanResponse BoolResponse;\n    \n    template<ErrorCode Code>\n    inline const BooleanResponse::Callback SuccessCodeFn() {\n        return [](const Response& response) {return response.statusCode == Code; };\n    }\n\n    inline const BooleanResponse::Callback EmptyRespFn() {\n        return SuccessCodeFn<NO_CONTENT>();\n    }\n\n    inline const BooleanResponse::Callback StandardRespFn() {\n        return SuccessCodeFn<OK>();\n    }\n\n\n    template<class _Type>\n    struct ObjectResponse : public StandardResponse {\n        using StandardResponse::StandardResponse;\n        using Type = _Type;\n\n        operator Type() { //to do use references instead of pointers\n            return error() ? Type() : Type(text);\n        }\n\n        Type& operator*() const {\n            return operator Type();\n        }\n\n        inline Type cast() {\n            return operator Type();\n        }\n\n        inline bool cast(Type& value) {\n            if (error())\n                return false;\n            rapidjson::Document doc;\n            rapidjson::ParseResult isOK =\n                doc.Parse(text.c_str(), text.length());\n            if (!isOK)\n                return false;\n            value = Type(doc);\n            return true;\n        }\n    };\n\n\n    struct ArrayResponseWrapper : public StandardResponse {\n        using StandardResponse::StandardResponse;\n        using Type = std::string;\n        inline operator const std::string&() const {\n            return text;\n        }\n        inline rapidjson::Document getDoc() {\n            rapidjson::Document arr; //ARR, I\'m a pirate\n            arr.Parse(text.data(), text.length());\n            return arr;\n        }\n        template<class Callback>\n        inline rapidjson::ParseResult getDoc(Callback& callback) {\n            rapidjson::Document arr;\n            rapidjson::ParseResult isOK =\n                arr.Parse(text.data(), text.length());\n            if (isOK) callback(arr);\n            return isOK;\n        }\n    };\n\n    template <class Type>\n    using ArrayResponse = json::ArrayWrapper<Type, ArrayResponseWrapper>;\n\n    struct StringResponse : public StandardResponse {\n        using StandardResponse::StandardResponse;\n        using Type = std::string;\n        inline operator const Type&() const {\n            return text;\n        }\n    };\n\n    using VoidResponse = StringResponse;\n}\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Updated on  9 February 2021 at 07:04:58 Eastern Standard Time"))}i.isMDXComponent=!0},319:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),i=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},b=function(e){var n=i(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),b=i(t),u=r,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||s;return t?a.a.createElement(m,c(c({ref:n},l),{},{components:t})):a.a.createElement(m,c({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=u;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<s;l++)o[l]=t[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);