(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{255:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),c=(n(0),n(317)),s={title:"include/sleepy_discord/http.h"},l={unversionedId:"reference/Files/http_8h",id:"reference/Files/http_8h",isDocsHomePage:!1,title:"include/sleepy_discord/http.h",description:"Namespaces",source:"@site/docs\\reference\\Files\\http_8h.md",slug:"/reference/Files/http_8h",permalink:"/sleepy-discord-docs/docs/reference/Files/http_8h",version:"current",sidebar:"Reference",previous:{title:"sleepy_discord/http.cpp",permalink:"/sleepy-discord-docs/docs/reference/Files/http_8cpp"},next:{title:"sleepy_discord/invite.cpp",permalink:"/sleepy-discord-docs/docs/reference/Files/invite_8cpp"}},i=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Classes",id:"classes",children:[]},{value:"Types",id:"types",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Types Documentation",id:"types-documentation",children:[{value:"enum RequestMethod",id:"enum-requestmethod",children:[]},{value:"typedef Multipart",id:"typedef-multipart",children:[]}]},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function getMethodName",id:"function-getmethodname",children:[]},{value:"function escapeURL",id:"function-escapeurl",children:[]}]},{value:"Source code",id:"source-code",children:[]}],o={toc:i};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"namespaces"},"Namespaces"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null},"Name"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(c.b)("h2",{id:"classes"},"Classes"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null}),Object(c.b)("th",{parentName:"tr",align:null},"Name"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1case_insensitive_compare"},"SleepyDiscord::caseInsensitiveCompare")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_response"},"SleepyDiscord::Response")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1file_path_part"},"SleepyDiscord::filePathPart")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_part"},"SleepyDiscord::Part")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_header_pair"},"SleepyDiscord::HeaderPair")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"class"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_generic_session"},"SleepyDiscord::GenericSession")))))),Object(c.b)("h2",{id:"types"},"Types"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null}),Object(c.b)("th",{parentName:"tr",align:null},"Name"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"enum"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Files/http_8h#enum-requestmethod"},"RequestMethod"))," { Post = 0, Patch = 1, Delete = 2, Get = 3, Put = 4}")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"typedef std::initializer_list< Part >"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Files/http_8h#typedef-multipart"},"Multipart")))))),Object(c.b)("h2",{id:"functions"},"Functions"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null}),Object(c.b)("th",{parentName:"tr",align:null},"Name"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"const char *"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Files/http_8h#function-getmethodname"},"getMethodName")),"(const RequestMethod & method)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"std::string"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Files/http_8h#function-escapeurl"},"escapeURL")),"(const std::string & string)")))),Object(c.b)("h2",{id:"types-documentation"},"Types Documentation"),Object(c.b)("h3",{id:"enum-requestmethod"},"enum RequestMethod"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null},"Enumerator"),Object(c.b)("th",{parentName:"tr",align:null},"Value"),Object(c.b)("th",{parentName:"tr",align:null},"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"Post"),Object(c.b)("td",{parentName:"tr",align:null},"0"),Object(c.b)("td",{parentName:"tr",align:null})),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"Patch"),Object(c.b)("td",{parentName:"tr",align:null},"1"),Object(c.b)("td",{parentName:"tr",align:null})),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"Delete"),Object(c.b)("td",{parentName:"tr",align:null},"2"),Object(c.b)("td",{parentName:"tr",align:null})),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"Get"),Object(c.b)("td",{parentName:"tr",align:null},"3"),Object(c.b)("td",{parentName:"tr",align:null})),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"Put"),Object(c.b)("td",{parentName:"tr",align:null},"4"),Object(c.b)("td",{parentName:"tr",align:null})))),Object(c.b)("h3",{id:"typedef-multipart"},"typedef Multipart"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"typedef std::initializer_list<Part> SleepyDiscord::Multipart;\n")),Object(c.b)("h2",{id:"functions-documentation"},"Functions Documentation"),Object(c.b)("h3",{id:"function-getmethodname"},"function getMethodName"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"const char * getMethodName(\n    const RequestMethod & method\n)\n")),Object(c.b)("h3",{id:"function-escapeurl"},"function escapeURL"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"std::string escapeURL(\n    const std::string & string\n)\n")),Object(c.b)("h2",{id:"source-code"},"Source code"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <string>\n#include <utility>\n#include <map>\n#include <vector>\n#include <functional>\n#include "error.h"\n\n//important note, all requests on sync mode throw on an http error\n\nnamespace SleepyDiscord {\n    //http variables and functions\n    //request functions\n    enum RequestMethod {\n        Post   = 0,\n        Patch  = 1,\n        Delete = 2,\n        Get    = 3,\n        Put    = 4\n    };\n\n    class BaseDiscordClient;\n\n    //copied from cpr\n    struct caseInsensitiveCompare {\n        bool operator()(const std::string& a, const std::string& b) const noexcept;\n    };\n\n    struct Response {\n        std::string text;\n        int32_t statusCode = 0;\n        std::map<std::string, std::string, caseInsensitiveCompare> header;\n        time_t birth = 0;\n        inline bool error() const {\n            return BAD_REQUEST <= statusCode;\n        }\n        Response() = default;\n        Response(int32_t _statusCode) : statusCode(_statusCode) {}\n    };\n\n    struct filePathPart {\n        const std::string filePath;\n    };\n\n    struct Part {\n        Part(const std::string _name, const std::string _value) :\n            name(_name), value(_value), isFile(false) {}\n        Part(const std::string _name, const filePathPart _file) :\n            name(_name), value(_file.filePath), isFile(true) {}\n        const std::string name;\n        const std::string value;\n        const bool isFile;   //if isFile is true then value is the filepath\n    };\n\n    typedef std::initializer_list<Part> Multipart;\n\n    struct HeaderPair {\n        const char *const name;\n        std::string value = "";\n        HeaderPair(const char* _name) : name(_name) {}\n        HeaderPair(const char* _name, std::string _value) : name(_name), value(_value) {}\n    };\n\n    class GenericSession {\n    public:\n        using ResponseCallback = std::function<void(Response)>;\n        virtual void setUrl(const std::string& url) = 0;\n        virtual void setBody(const std::string* jsonParameters) = 0;\n        virtual void setHeader(const std::vector<HeaderPair>& header) = 0;\n        virtual void setMultipart(const std::vector<Part>& parts) = 0;\n        virtual void setResponseCallback(const ResponseCallback& callback) = 0;\n        virtual Response request(RequestMethod method) = 0;\n    };\n\n    //Use this to convert RequestMethod into a string\n    const char* getMethodName(const RequestMethod& method);\n\n    std::string escapeURL(const std::string& string);\n};\n')),Object(c.b)("hr",null),Object(c.b)("p",null,"Updated on  9 February 2021 at 07:04:58 Eastern Standard Time"))}b.isMDXComponent=!0},317:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),b=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=b(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,s=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),d=b(n),u=a,m=d["".concat(s,".").concat(u)]||d[u]||p[u]||c;return n?r.a.createElement(m,l(l({ref:t},o),{},{components:n})):r.a.createElement(m,l({ref:t},o))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,s=new Array(c);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var o=2;o<c;o++)s[o]=n[o];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);