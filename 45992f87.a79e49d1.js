(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{135:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return d}));var r=t(3),i=t(7),a=(t(0),t(316)),c={title:"include/sleepy_discord/discord_object_interface.h"},o={unversionedId:"reference/Files/discord__object__interface_8h",id:"reference/Files/discord__object__interface_8h",isDocsHomePage:!1,title:"include/sleepy_discord/discord_object_interface.h",description:"Namespaces",source:"@site/docs\\reference\\Files\\discord__object__interface_8h.md",slug:"/reference/Files/discord__object__interface_8h",permalink:"/sleepy-discord-docs/docs/reference/Files/discord__object__interface_8h",version:"current",sidebar:"Reference",previous:{title:"sleepy_discord",permalink:"/sleepy-discord-docs/docs/reference/Files/dir_e8fa4e2dbc3cb0510f69ea6b27e9c04c"},next:{title:"sleepy_discord/embed.cpp",permalink:"/sleepy-discord-docs/docs/reference/Files/embed_8cpp"}},s=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Classes",id:"classes",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Defines",id:"defines",children:[]},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function index",id:"function-index",children:[]},{value:"function JSON_getArray",id:"function-json_getarray",children:[]},{value:"function JSON_getArray",id:"function-json_getarray-1",children:[]},{value:"function JSON_getList",id:"function-json_getlist",children:[]}]},{value:"Macro Documentation",id:"macro-documentation",children:[{value:"define modIfElse",id:"define-modifelse",children:[]},{value:"define setIfElse",id:"define-setifelse",children:[]}]},{value:"Source code",id:"source-code",children:[]}],l={toc:s};function d(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"namespaces"},"Namespaces"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},"Name"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(a.b)("h2",{id:"classes"},"Classes"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null}),Object(a.b)("th",{parentName:"tr",align:null},"Name"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"class"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_discord_object"},"SleepyDiscord::DiscordObject")))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"class"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_identifiable_discord_object"},"SleepyDiscord::IdentifiableDiscordObject")))))),Object(a.b)("h2",{id:"functions"},"Functions"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null}),Object(a.b)("th",{parentName:"tr",align:null},"Name"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"template <template< class... > class Container,typename Type ",">"," ",Object(a.b)("br",null),"constexpr unsigned int"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Files/discord__object__interface_8h#function-index"},"index")),"(Container< Type ",Object(a.b)("em",{parentName:"td"},"const > names, Type ")," name, unsigned int i =0)")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"template <class _DiscordObject ",">"," ",Object(a.b)("br",null),"std::vector< _DiscordObject >"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Files/discord__object__interface_8h#function-json_getarray"},"JSON_getArray")),"(const std::string * _source)")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"template <class _DiscordObject ,class Type ",">"," ",Object(a.b)("br",null),"std::vector< _DiscordObject >"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Files/discord__object__interface_8h#function-json_getarray"},"JSON_getArray")),"(const Type & _source)")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"template <class _DiscordObject ,class Type ",">"," ",Object(a.b)("br",null),"std::list< _DiscordObject >"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Files/discord__object__interface_8h#function-json_getlist"},"JSON_getList")),"(const Type & _source)")))),Object(a.b)("h2",{id:"defines"},"Defines"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null}),Object(a.b)("th",{parentName:"tr",align:null},"Name"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null}),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Files/discord__object__interface_8h#define-modifelse"},"modIfElse")),"(condition, modifier, value, el)")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null}),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Files/discord__object__interface_8h#define-setifelse"},"setIfElse")),"(condition, value, el)")))),Object(a.b)("h2",{id:"functions-documentation"},"Functions Documentation"),Object(a.b)("h3",{id:"function-index"},"function index"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"template <template< class... > class Container,\ntypename Type >\nconstexpr unsigned int index(\n    Container< Type *const > names,\n    Type * name,\n    unsigned int i =0\n)\n")),Object(a.b)("h3",{id:"function-json_getarray"},"function JSON_getArray"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"template <class _DiscordObject >\nstd::vector< _DiscordObject > JSON_getArray(\n    const std::string * _source\n)\n")),Object(a.b)("h3",{id:"function-json_getarray-1"},"function JSON_getArray"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"template <class _DiscordObject ,\nclass Type >\ninline std::vector< _DiscordObject > JSON_getArray(\n    const Type & _source\n)\n")),Object(a.b)("h3",{id:"function-json_getlist"},"function JSON_getList"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"template <class _DiscordObject ,\nclass Type >\ninline std::list< _DiscordObject > JSON_getList(\n    const Type & _source\n)\n")),Object(a.b)("h2",{id:"macro-documentation"},"Macro Documentation"),Object(a.b)("h3",{id:"define-modifelse"},"define modIfElse"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"#define modIfElse(\n    condition,\n    modifier,\n    value,\n    el\n)\n            condition(value) ? modifier(value) : el\n")),Object(a.b)("h3",{id:"define-setifelse"},"define setIfElse"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"#define setIfElse(\n    condition,\n    value,\n    el\n)\n            condition(value) ? value : el\n")),Object(a.b)("h2",{id:"source-code"},"Source code"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <list>\n#include "json_wrapper.h"\n#include "snowflake.h"\n#include "error.h"\n#include "http.h"\n\nnamespace SleepyDiscord {\n    class BaseDiscordClient;\n\n    class DiscordObject {\n//  public:\n//      DiscordObject() {}\n//\n//  protected:\n//      //functions for parsing JSON\n//      inline bool getBool(const json::Value& string) {\n//          return string[0] == \'t\';\n//      }\n//      \n//      //for optional fields\n//      inline bool isSpecified(const json::Value& string) {\n//          return string.length() != 0;\n//      }\n//\n//      //for nullable and opinional fields\n//      inline bool isDefined(const json::Value& string) {\n//          return isSpecified(string) && string != "null";\n//      }\n//\n//      //for nullable fields\n//      inline bool isDefault(const json::Value& string) {\n//          return isSpecified(string) && string == "null";\n//      }\n//      \n//      //pointer to referance convertion, needed or you will get an error\n//      inline bool isSpecified(const json::Value* string) {\n//          return isSpecified(*string);\n//      }\n//\n//      inline bool isDefined(const json::Value* string) {\n//          return isDefined(*string);\n//      }\n//\n//      inline bool isDefault(const json::Value* string) {\n//          return isDefault(*string);\n//      }\n//\n//      //some of those function declarations got so long that\n//      //I gave them muitiple lines\n/*#define \\\n        modIf(condition, variable, modifier, value) \\\n            if (condition(value)) variable = modifier(value)*/\n#define \\\n        modIfElse(condition, modifier, value, el) \\\n            condition(value) ? modifier(value) : el\n//\n//      ////this doesn\'t work, but the above does\n//      //template<typename Type>\n//      //void modIf(\n//      //  bool (*condition)(const std::string&),\n//      //  Type& variable, \n//      //  Type (*function)(const std::string& _source),\n//      //  std::string& value\n//      //) {\n//      //  if (condition(value)) variable = function(value);\n//      //}\n//\n/*#define \\\n        setIf(condition, variable, value) \\\n            if (condition(value)) variable = value*/\n#define \\\n        setIfElse(condition, value, el) \\\n            condition(value) ? value : el\n//\n//      template<typename Number>\n//      inline Number toNumber(\n//          Number (*convertFunction)(const std::string&, size_t*, int),\n//          const json::Value& value\n//          ) {\n//          return isDefined(value) ? convertFunction(value.to_string(), 0, 10) : 0;\n//      }\n//\n//      inline int toInt(const json::Value& value) {\n//          return toNumber(std::stoi, value);\n//      }\n//\n//      inline long long toLongLong(const json::Value& value) {\n//          return toNumber(std::stoll, value);\n//      }\n//\n//      inline unsigned long toUnsignedLong(const json::Value& value) {\n//          return toNumber(std::stoul, value);\n//      }\n    };\n\n    template <class Derived>\n    class IdentifiableDiscordObject : public DiscordObject {\n    public:\n        IdentifiableDiscordObject() = default;\n        IdentifiableDiscordObject(Snowflake<Derived> id) : ID(id) {}\n\n        using Parent = IdentifiableDiscordObject<Derived>;\n\n        Snowflake<Derived> ID;\n        \n        inline operator Snowflake<Derived>&() {\n            return ID;\n        }\n\n        inline bool empty() const {\n            return ID.empty();\n        }\n\n        template<class DiscordObject>\n        inline bool operator==(const Snowflake<DiscordObject>& right) const {\n            return ID == static_cast<Snowflake<DiscordObject>>(right);\n        }\n        \n        template<class DiscordObject>\n        inline bool operator!=(const Snowflake<DiscordObject>& right) const {\n            return ID != static_cast<Snowflake<DiscordObject>>(right);\n        }\n\n        inline bool operator==(const Snowflake<Derived>& right) const {\n            return operator==<Derived>(right);\n        }\n\n        inline bool operator!=(const Snowflake<Derived>& right) const {\n            return operator!=<Derived>(right);\n        }\n\n        inline bool operator==(const IdentifiableDiscordObject<Derived>& right) const {\n            return ID == right.ID;\n        }\n\n        inline bool operator!=(const IdentifiableDiscordObject<Derived>& right) const {\n            return ID != right.ID;\n        }\n\n        inline const Time getTimestamp() {\n            return ID.timestamp();\n        }\n    };\n\n    //constexpr unsigned int index(std::initializer_list<const char *const> names, const char * name, unsigned int i = 0) {\n    //  for (const char *const n : names)\n    //      if (strcmp(n, name) != 0) ++i;\n    //      else break;\n    //  return i;\n    //}//sadly this doesn\'t work on c++11, leaving this here for the future\n\n    template <template<class...> class Container, typename Type> //forces this be done at compile time, I think, and hope it does\n    constexpr unsigned int index(Container<Type*const> names, Type * name, unsigned int i = 0) {\n        return i + names.begin() != names.end() && strcmp(*(i + names.begin()), name) != 0 ? index(names, name, i + 1) : i;\n    }\n\n    template <class _DiscordObject>\n    std::vector<_DiscordObject> JSON_getArray(const std::string* _source) {\n        return json::ArrayWrapper<_DiscordObject>(*_source);\n    }\n\n    //somethings I need it to be a reference\n    template <class _DiscordObject, class Type>\n    inline std::vector<_DiscordObject> JSON_getArray(const Type& _source) {\n        return json::ArrayWrapper<_DiscordObject>(_source);\n    }\n\n    template <class _DiscordObject, class Type>\n    inline std::list<_DiscordObject> JSON_getList(const Type& _source) {\n        return json::ArrayWrapper<_DiscordObject>(_source);\n    }\n}\n')),Object(a.b)("hr",null),Object(a.b)("p",null,"Updated on  9 February 2021 at 07:04:58 Eastern Standard Time"))}d.isMDXComponent=!0},316:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var r=t(0),i=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=i.a.createContext({}),d=function(e){var n=i.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},b=function(e){var n=d(e.components);return i.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},p=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=d(t),p=r,m=b["".concat(c,".").concat(p)]||b[p]||u[p]||a;return t?i.a.createElement(m,o(o({ref:n},l),{},{components:t})):i.a.createElement(m,o({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=p;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,c[1]=o;for(var l=2;l<a;l++)c[l]=t[l];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);