(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{311:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return g}));var s=t(0),i=t.n(s);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,s,i=function(e,n){if(null==e)return{};var t,s,i={},r=Object.keys(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=i.a.createContext({}),m=function(e){var n=i.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=m(e.components);return i.a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},u=i.a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,a=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=m(t),u=s,g=d["".concat(a,".").concat(u)]||d[u]||p[u]||r;return t?i.a.createElement(g,o(o({ref:n},l),{},{components:t})):i.a.createElement(g,o({ref:n},l))}));function g(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,a=new Array(r);a[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:s,a[1]=o;for(var l=2;l<r;l++)a[l]=t[l];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},70:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return m}));var s=t(3),i=t(7),r=(t(0),t(311)),a={title:"sleepy_discord/asignments_client.cpp"},o={unversionedId:"reference/Files/asignments__client_8cpp",id:"reference/Files/asignments__client_8cpp",isDocsHomePage:!1,title:"sleepy_discord/asignments_client.cpp",description:"Namespaces",source:"@site/docs\\reference\\Files\\asignments__client_8cpp.md",slug:"/reference/Files/asignments__client_8cpp",permalink:"/sleepy-discord-docs/docs/reference/Files/asignments__client_8cpp",editUrl:"https://github.com/yourWaifu/sleepy-discord-docs/edit/master/docs/reference/Files/asignments__client_8cpp.md",version:"current",sidebar:"someSidebar",previous:{title:"SleepyDiscord::Webhook",permalink:"/sleepy-discord-docs/docs/reference/Classes/struct_sleepy_discord_1_1_webhook"},next:{title:"include/sleepy_discord/asio_include.h",permalink:"/sleepy-discord-docs/docs/reference/Files/asio__include_8h"}},c=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Source code",id:"source-code",children:[]}],l={toc:c};function m(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(s.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"namespaces"},"Namespaces"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Name"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("strong",{parentName:"td"},Object(r.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(r.b)("h2",{id:"source-code"},"Source code"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-cpp"},'#include "client.h"\n\nnamespace SleepyDiscord {\n    void AssignmentBasedDiscordClient::resumeMainLoop() {\n        //assignments should be ordered based on dueTime\n        for (std::forward_list<Assignment>::iterator\n            assignment = assignments.begin(); assignment != assignments.end(); assignment = assignments.begin())\n            if (assignment->dueTime <= getEpochTimeMillisecond())\n                doAssignment();\n            else\n                break;\n    }\n\n    void AssignmentBasedDiscordClient::doAssignment() {\n        Assignment assignment = assignments.front();\n        assignment.function();\n        assignments.pop_front();\n    }\n\n    Timer AssignmentBasedDiscordClient::schedule(TimedTask code, const time_t milliseconds) {\n        const time_t millisecondsEpochTime = getEpochTimeMillisecond() + milliseconds;\n\n        static unsigned int uniqueNumber = 0;\n        const int newJobID = ++uniqueNumber;\n\n        const Assignment newAssignemt = {\n            newJobID,\n            code,\n            millisecondsEpochTime\n        };\n\n        if (assignments.begin() == assignments.end() || millisecondsEpochTime < assignments.front().dueTime) {\n            assignments.push_front(newAssignemt);\n        } else {\n            std::forward_list<Assignment>::iterator lastAssignment = assignments.begin();\n            for (std::forward_list<Assignment>::iterator\n                assignment = ++(assignments.begin());\n                assignment != assignments.end();\n                ++assignment) {\n                if (millisecondsEpochTime < assignment->dueTime)\n                    break;\n                lastAssignment = assignment;\n            }\n            assignments.insert_after(lastAssignment, newAssignemt);\n        }\n\n        return Timer(\n            std::bind(&AssignmentBasedDiscordClient::unschedule, this, newJobID)\n        );\n    }\n\n    void AssignmentBasedDiscordClient::unschedule(const int jobID) {\n        std::forward_list<Assignment>::iterator\n            lastAssignment = assignments.begin();\n        for (std::forward_list<Assignment>::iterator\n            assignment = assignments.begin(); assignment != assignments.end();\n            ++assignment) {\n            if (assignment->jobID == jobID) {\n                assignments.erase_after(lastAssignment);\n                break;\n            }\n            lastAssignment = assignment;\n        }\n    }\n}\n')),Object(r.b)("hr",null),Object(r.b)("p",null,"Updated on  9 February 2021 at 07:04:59 Eastern Standard Time"))}m.isMDXComponent=!0}}]);