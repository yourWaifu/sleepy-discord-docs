(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{316:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},i=function(e){var t=p(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,s=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),i=p(n),u=a,m=i["".concat(s,".").concat(u)]||i[u]||d[u]||c;return n?r.a.createElement(m,l(l({ref:t},b),{},{components:n})):r.a.createElement(m,l({ref:t},b))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,s=new Array(c);s[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var b=2;b<c;b++)s[b]=n[b];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},94:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),c=(n(0),n(316)),s={title:"SleepyDiscord::json"},l={unversionedId:"reference/Namespaces/namespace_sleepy_discord_1_1json",id:"reference/Namespaces/namespace_sleepy_discord_1_1json",isDocsHomePage:!1,title:"SleepyDiscord::json",description:"Classes",source:"@site/docs\\reference\\Namespaces\\namespace_sleepy_discord_1_1json.md",slug:"/reference/Namespaces/namespace_sleepy_discord_1_1json",permalink:"/sleepy-discord-docs/docs/reference/Namespaces/namespace_sleepy_discord_1_1json",version:"current",sidebar:"Reference",previous:{title:"SleepyDiscord",permalink:"/sleepy-discord-docs/docs/reference/Namespaces/namespace_sleepy_discord"}},o=[{value:"Classes",id:"classes",children:[]},{value:"Types",id:"types",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Types Documentation",id:"types-documentation",children:[{value:"enum FieldType",id:"enum-fieldtype",children:[]},{value:"using Value",id:"using-value",children:[]},{value:"using Array",id:"using-array",children:[]},{value:"using Values",id:"using-values",children:[]},{value:"using JSONConverter",id:"using-jsonconverter",children:[]}]},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function createJSON",id:"function-createjson",children:[]},{value:"function string",id:"function-string",children:[]},{value:"function UInteger",id:"function-uinteger",children:[]},{value:"function optionalUInteger",id:"function-optionaluinteger",children:[]},{value:"function integer",id:"function-integer",children:[]},{value:"function optionalInteger",id:"function-optionalinteger",children:[]},{value:"function boolean",id:"function-boolean",children:[]},{value:"function createJSONArray",id:"function-createjsonarray",children:[]},{value:"function leaveAlone",id:"function-leavealone",children:[]},{value:"function toString",id:"function-tostring",children:[]},{value:"function toStdString",id:"function-tostdstring",children:[]},{value:"function toStdStringView",id:"function-tostdstringview",children:[]},{value:"function toInt",id:"function-toint",children:[]},{value:"function toUint",id:"function-touint",children:[]},{value:"function toInt64",id:"function-toint64",children:[]},{value:"function toUint64",id:"function-touint64",children:[]},{value:"function toDouble",id:"function-todouble",children:[]},{value:"function toFloat",id:"function-tofloat",children:[]},{value:"function toBool",id:"function-tobool",children:[]},{value:"function toArray",id:"function-toarray",children:[]},{value:"function toEnum",id:"function-toenum",children:[]},{value:"function toJSON",id:"function-tojson",children:[]},{value:"function pair",id:"function-pair",children:[]},{value:"function pair",id:"function-pair-1",children:[]},{value:"function pair",id:"function-pair-2",children:[]},{value:"function fromJSON",id:"function-fromjson",children:[]},{value:"function get",id:"function-get",children:[]},{value:"function operator bool",id:"function-operator-bool",children:[]},{value:"function empty",id:"function-empty",children:[]},{value:"function release",id:"function-release",children:[]},{value:"function reset",id:"function-reset",children:[]},{value:"function reset",id:"function-reset-1",children:[]},{value:"function reset",id:"function-reset-2",children:[]},{value:"function reset",id:"function-reset-3",children:[]},{value:"function use_count",id:"function-use_count",children:[]},{value:"function setToUndefined",id:"function-settoundefined",children:[]},{value:"function getSmartPtr",id:"function-getsmartptr",children:[]}]}],b={toc:o};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"classes"},"Classes"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null}),Object(c.b)("th",{parentName:"tr",align:null},"Name"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_string_wrapper"},"SleepyDiscord::json::ArrayStringWrapper")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper"},"SleepyDiscord::json::ArrayWrapper")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper_3_01_value_00_01_base_01_4"},"SleepyDiscord::json::ArrayWrapper< Value, Base >")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_empty_function"},"SleepyDiscord::json::EmptyFunction")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1has_serialize"},"SleepyDiscord::json::hasSerialize")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper"},"SleepyDiscord::json::ClassTypeHelper")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01std_1_1string_01_4"},"SleepyDiscord::json::ClassTypeHelper< std::string >")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01nonstd_1_1string__view_01_4"},"SleepyDiscord::json::ClassTypeHelper< nonstd::string_view >")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_primitive_type_helper"},"SleepyDiscord::json::PrimitiveTypeHelper")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01int_01_4"},"SleepyDiscord::json::ClassTypeHelper< int >")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01uint32__t_01_4"},"SleepyDiscord::json::ClassTypeHelper< uint32_t >")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01int64__t_01_4"},"SleepyDiscord::json::ClassTypeHelper< int64_t >")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01uint64__t_01_4"},"SleepyDiscord::json::ClassTypeHelper< uint64_t >")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01float_01_4"},"SleepyDiscord::json::ClassTypeHelper< float >")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01double_01_4"},"SleepyDiscord::json::ClassTypeHelper< double >")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_class_type_helper_3_01bool_01_4"},"SleepyDiscord::json::ClassTypeHelper< bool >")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_base_enum_type_helper"},"SleepyDiscord::json::BaseEnumTypeHelper")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_enum_type_helper"},"SleepyDiscord::json::EnumTypeHelper")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_from_container_function"},"SleepyDiscord::json::FromContainerFunction")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_container_type_helper"},"SleepyDiscord::json::ContainerTypeHelper")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_std_array_type_helper"},"SleepyDiscord::json::StdArrayTypeHelper")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"struct"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_pair_impl"},"SleepyDiscord::json::PairImpl")))))),Object(c.b)("h2",{id:"types"},"Types"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null}),Object(c.b)("th",{parentName:"tr",align:null},"Name"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"enum"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#enum-fieldtype"},"FieldType"))," { REQUIRIED_FIELD = 0, OPTIONAL_FIELD = 1 << 0, NULLABLE_FIELD = 1 << 1, OPTIONAL_NULLABLE_FIELD = OPTIONAL_FIELD")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"using rapidjson::Value"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#using-value"},"Value")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"using rapidjson::Value::ConstArray"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#using-array"},"Array")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"using Value"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#using-values"},"Values")))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"template <class Return ",">"," ",Object(c.b)("br",null),"using Return(*)(const Value &)"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#using-jsonconverter"},"JSONConverter")))))),Object(c.b)("h2",{id:"functions"},"Functions"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null}),Object(c.b)("th",{parentName:"tr",align:null},"Name"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"const std::string"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-createjson"},"createJSON")),"(std::initializer_list< std::pair< std::string, std::string >> json)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"const std::string"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-string"},"string")),"(const std::string & s)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"const std::string"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-uinteger"},"UInteger")),"(const uint64_t num)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"const std::string"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-optionaluinteger"},"optionalUInteger")),"(const uint64_t num)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"const std::string"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-integer"},"integer")),"(const int64_t num)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"const std::string"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-optionalinteger"},"optionalInteger")),"(const int64_t num)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"const std::string"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-boolean"},"boolean")),"(const bool boolean)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"template <class Type ",">"," ",Object(c.b)("br",null),"const std::string"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-createjsonarray"},"createJSONArray")),"(const std::vector< Type > source)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"const Value &"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-leavealone"},"leaveAlone")),"(const Value & value)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"const char *"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-tostring"},"toString")),"(const Value & value)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"std::string"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-tostdstring"},"toStdString")),"(const Value & value)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"nonstd::string_view"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-tostdstringview"},"toStdStringView")),"(const Value & value)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"int"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-toint"},"toInt")),"(const Value & value)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"unsigned int"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-touint"},"toUint")),"(const Value & value)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"int64_t"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-toint64"},"toInt64")),"(const Value & value)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"uint64_t"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-touint64"},"toUint64")),"(const Value & value)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"double"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-todouble"},"toDouble")),"(const Value & value)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"float"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-tofloat"},"toFloat")),"(const Value & value)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"bool"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-tobool"},"toBool")),"(const Value & value)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"template <class Type ",">"," ",Object(c.b)("br",null),Object(c.b)("a",{parentName:"td",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper"},"ArrayWrapper"),"< Type >"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-toarray"},"toArray")),"(const Value & value)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"template <class Type ",">"," ",Object(c.b)("br",null),"Type"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-toenum"},"toEnum")),"(const Value & value)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"template <class Object ",">"," ",Object(c.b)("br",null),"Value"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-tojson"},"toJSON")),"(const Object & object, Value::AllocatorType & allocator)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"template <int defaultValue,template< class, int > class TypeHelper =PrimitiveTypeHelper,class Class ,class Type ",">"," ",Object(c.b)("br",null),"constexpr ",Object(c.b)("a",{parentName:"td",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_pair_impl"},"PairImpl"),"< Class, Type, TypeHelper< Type, defaultValue > >"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-pair"},"pair")),"(Type Class::",Object(c.b)("em",{parentName:"td"}," member, const char ")," name, FieldType type)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"template <template< class > class TypeHelper =ClassTypeHelper,class Class ,class Type ",">"," ",Object(c.b)("br",null),"constexpr ",Object(c.b)("a",{parentName:"td",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_pair_impl"},"PairImpl"),"< Class, Type, TypeHelper< Type > >"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-pair"},"pair")),"(Type Class::",Object(c.b)("em",{parentName:"td"}," member, const char ")," name, FieldType type)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"template <template< class, template< class... > class > class TypeHelper,template< class... > class TypeHelper2 =ClassTypeHelper,class Class ,class Type ",">"," ",Object(c.b)("br",null),"constexpr ",Object(c.b)("a",{parentName:"td",href:"/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_pair_impl"},"PairImpl"),"< Class, Type, TypeHelper< Type, TypeHelper2 > >"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-pair"},"pair")),"(Type Class::",Object(c.b)("em",{parentName:"td"}," member, const char ")," name, FieldType type)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"template <class ResultingObject ,size_t i =0",">"," ",Object(c.b)("br",null),"std::enable_if< i==std::tuple_size< decltype(ResultingObject::JSONStruct)>::value, void >::type"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-fromjson"},"fromJSON")),"(ResultingObject & , const Value & )")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"ValueType *"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-get"},"get")),"() const")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null}),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-operator-bool"},"operator bool")),"() const")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"bool"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-empty"},"empty")),"() const")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"ValueType *"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-release"},"release")),"()")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"void"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-reset"},"reset")),"()")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"template <class TypeX ",">"," ",Object(c.b)("br",null),"void"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-reset"},"reset")),"(ValueType * ptr)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"template <class TypeX ,class Deleter ",">"," ",Object(c.b)("br",null),"void"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-reset"},"reset")),"(ValueType * ptr, Deleter deleter)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"template <class TypeX ,class Deleter ,class Alloc ",">"," ",Object(c.b)("br",null),"void"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-reset"},"reset")),"(ValueType * ptr, Deleter deleter, Alloc allocator)")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"long"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-use_count"},"use_count")),"() const")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"void"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-settoundefined"},"setToUndefined")),"()")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"Container &"),Object(c.b)("td",{parentName:"tr",align:null},Object(c.b)("strong",{parentName:"td"},Object(c.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord_1_1json#function-getsmartptr"},"getSmartPtr")),"() const")))),Object(c.b)("h2",{id:"types-documentation"},"Types Documentation"),Object(c.b)("h3",{id:"enum-fieldtype"},"enum FieldType"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",{parentName:"tr",align:null},"Enumerator"),Object(c.b)("th",{parentName:"tr",align:null},"Value"),Object(c.b)("th",{parentName:"tr",align:null},"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"REQUIRIED_FIELD"),Object(c.b)("td",{parentName:"tr",align:null},"0"),Object(c.b)("td",{parentName:"tr",align:null})),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"OPTIONAL_FIELD"),Object(c.b)("td",{parentName:"tr",align:null},"1 << 0"),Object(c.b)("td",{parentName:"tr",align:null})),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"NULLABLE_FIELD"),Object(c.b)("td",{parentName:"tr",align:null},"1 << 1"),Object(c.b)("td",{parentName:"tr",align:null})),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",{parentName:"tr",align:null},"OPTIONAL_NULLABLE_FIELD"),Object(c.b)("td",{parentName:"tr",align:null},"OPTIONAL_FIELD"),Object(c.b)("td",{parentName:"tr",align:null},"NULLABLE_FIELD")))),Object(c.b)("h3",{id:"using-value"},"using Value"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::json::Value = typedef rapidjson::Value;\n")),Object(c.b)("h3",{id:"using-array"},"using Array"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::json::Array = typedef rapidjson::Value::ConstArray;\n")),Object(c.b)("h3",{id:"using-values"},"using Values"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::json::Values = typedef Value;\n")),Object(c.b)("h3",{id:"using-jsonconverter"},"using JSONConverter"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Return >\nusing SleepyDiscord::json::JSONConverter = typedef Return(*)(const Value&);\n")),Object(c.b)("h2",{id:"functions-documentation"},"Functions Documentation"),Object(c.b)("h3",{id:"function-createjson"},"function createJSON"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"const std::string createJSON(\n    std::initializer_list< std::pair< std::string, std::string >> json\n)\n")),Object(c.b)("h3",{id:"function-string"},"function string"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"const std::string string(\n    const std::string & s\n)\n")),Object(c.b)("h3",{id:"function-uinteger"},"function UInteger"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"const std::string UInteger(\n    const uint64_t num\n)\n")),Object(c.b)("h3",{id:"function-optionaluinteger"},"function optionalUInteger"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"const std::string optionalUInteger(\n    const uint64_t num\n)\n")),Object(c.b)("h3",{id:"function-integer"},"function integer"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"const std::string integer(\n    const int64_t num\n)\n")),Object(c.b)("h3",{id:"function-optionalinteger"},"function optionalInteger"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"const std::string optionalInteger(\n    const int64_t num\n)\n")),Object(c.b)("h3",{id:"function-boolean"},"function boolean"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"const std::string boolean(\n    const bool boolean\n)\n")),Object(c.b)("h3",{id:"function-createjsonarray"},"function createJSONArray"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Type >\nconst std::string createJSONArray(\n    const std::vector< Type > source\n)\n")),Object(c.b)("h3",{id:"function-leavealone"},"function leaveAlone"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline const Value & leaveAlone(\n    const Value & value\n)\n")),Object(c.b)("h3",{id:"function-tostring"},"function toString"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline const char * toString(\n    const Value & value\n)\n")),Object(c.b)("h3",{id:"function-tostdstring"},"function toStdString"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline std::string toStdString(\n    const Value & value\n)\n")),Object(c.b)("h3",{id:"function-tostdstringview"},"function toStdStringView"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline nonstd::string_view toStdStringView(\n    const Value & value\n)\n")),Object(c.b)("h3",{id:"function-toint"},"function toInt"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline int toInt(\n    const Value & value\n)\n")),Object(c.b)("h3",{id:"function-touint"},"function toUint"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline unsigned int toUint(\n    const Value & value\n)\n")),Object(c.b)("h3",{id:"function-toint64"},"function toInt64"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline int64_t toInt64(\n    const Value & value\n)\n")),Object(c.b)("h3",{id:"function-touint64"},"function toUint64"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline uint64_t toUint64(\n    const Value & value\n)\n")),Object(c.b)("h3",{id:"function-todouble"},"function toDouble"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline double toDouble(\n    const Value & value\n)\n")),Object(c.b)("h3",{id:"function-tofloat"},"function toFloat"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline float toFloat(\n    const Value & value\n)\n")),Object(c.b)("h3",{id:"function-tobool"},"function toBool"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"inline bool toBool(\n    const Value & value\n)\n")),Object(c.b)("h3",{id:"function-toarray"},"function toArray"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Type >\ninline ArrayWrapper< Type > toArray(\n    const Value & value\n)\n")),Object(c.b)("h3",{id:"function-toenum"},"function toEnum"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Type >\ninline Type toEnum(\n    const Value & value\n)\n")),Object(c.b)("h3",{id:"function-tojson"},"function toJSON"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class Object >\ninline Value toJSON(\n    const Object & object,\n    Value::AllocatorType & allocator\n)\n")),Object(c.b)("h3",{id:"function-pair"},"function pair"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <int defaultValue,\ntemplate< class, int > class TypeHelper =PrimitiveTypeHelper,\nclass Class ,\nclass Type >\nconstexpr PairImpl< Class, Type, TypeHelper< Type, defaultValue > > pair(\n    Type Class::* member,\n    const char * name,\n    FieldType type\n)\n")),Object(c.b)("h3",{id:"function-pair-1"},"function pair"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <template< class > class TypeHelper =ClassTypeHelper,\nclass Class ,\nclass Type >\nconstexpr PairImpl< Class, Type, TypeHelper< Type > > pair(\n    Type Class::* member,\n    const char * name,\n    FieldType type\n)\n")),Object(c.b)("h3",{id:"function-pair-2"},"function pair"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <template< class, template< class... > class > class TypeHelper,\ntemplate< class... > class TypeHelper2 =ClassTypeHelper,\nclass Class ,\nclass Type >\nconstexpr PairImpl< Class, Type, TypeHelper< Type, TypeHelper2 > > pair(\n    Type Class::* member,\n    const char * name,\n    FieldType type\n)\n")),Object(c.b)("h3",{id:"function-fromjson"},"function fromJSON"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class ResultingObject ,\nsize_t i =0>\ninline std::enable_if< i==std::tuple_size< decltype(ResultingObject::JSONStruct)>::value, void >::type fromJSON(\n    ResultingObject & ,\n    const Value & \n)\n")),Object(c.b)("h3",{id:"function-get"},"function get"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"ValueType * get() const\n")),Object(c.b)("h3",{id:"function-operator-bool"},"function operator bool"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"explicit operator bool() const\n")),Object(c.b)("h3",{id:"function-empty"},"function empty"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"bool empty() const\n")),Object(c.b)("h3",{id:"function-release"},"function release"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"ValueType * release()\n")),Object(c.b)("h3",{id:"function-reset"},"function reset"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"void reset()\n")),Object(c.b)("h3",{id:"function-reset-1"},"function reset"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class TypeX >\nvoid reset(\n    ValueType * ptr\n)\n")),Object(c.b)("h3",{id:"function-reset-2"},"function reset"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class TypeX ,\nclass Deleter >\nvoid reset(\n    ValueType * ptr,\n    Deleter deleter\n)\n")),Object(c.b)("h3",{id:"function-reset-3"},"function reset"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"template <class TypeX ,\nclass Deleter ,\nclass Alloc >\nvoid reset(\n    ValueType * ptr,\n    Deleter deleter,\n    Alloc allocator\n)\n")),Object(c.b)("h3",{id:"function-use_count"},"function use_count"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"long use_count() const\n")),Object(c.b)("h3",{id:"function-settoundefined"},"function setToUndefined"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"void setToUndefined()\n")),Object(c.b)("h3",{id:"function-getsmartptr"},"function getSmartPtr"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-cpp"},"Container & getSmartPtr() const\n")),Object(c.b)("hr",null),Object(c.b)("p",null,"Updated on  9 February 2021 at 07:04:57 Eastern Standard Time"))}p.isMDXComponent=!0}}]);