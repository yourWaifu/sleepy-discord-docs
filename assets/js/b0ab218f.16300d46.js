"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[7463],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return f}});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(r),f=s,b=d["".concat(c,".").concat(f)]||d[f]||u[f]||o;return r?n.createElement(b,a(a({ref:t},p),{},{components:r})):n.createElement(b,a({ref:t},p))}));function f(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=r.length,a=new Array(o);a[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var l=2;l<o;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7540:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var n=r(3117),s=r(102),o=(r(7294),r(3905)),a=["components"],i={title:"SleepyDiscord::Response"},c=void 0,l={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_response",id:"reference/Classes/struct_sleepy_discord_1_1_response",title:"SleepyDiscord::Response",description:"Inherited by SleepyDiscord::StandardResponse",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_response.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_response",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_response",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::Response"},sidebar:"Reference",previous:{title:"SleepyDiscord::Ready",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_ready"},next:{title:"SleepyDiscord::Role",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_role"}},p=[{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function error",id:"function-error",children:[],level:3},{value:"function Response",id:"function-response",children:[],level:3},{value:"function Response",id:"function-response-1",children:[],level:3}],level:2},{value:"Public Attributes Documentation",id:"public-attributes-documentation",children:[{value:"variable text",id:"variable-text",children:[],level:3},{value:"variable statusCode",id:"variable-statuscode",children:[],level:3},{value:"variable header",id:"variable-header",children:[],level:3},{value:"variable birth",id:"variable-birth",children:[],level:3}],level:2}],u={toc:p};function d(e){var t=e.components,r=(0,s.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Inherited by ",(0,o.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_standard_response"},"SleepyDiscord::StandardResponse")),(0,o.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,o.kt)("h3",{id:"function-error"},"function error"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline bool error() const\n")),(0,o.kt)("h3",{id:"function-response"},"function Response"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Response() =default\n")),(0,o.kt)("h3",{id:"function-response-1"},"function Response"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Response(\n    int32_t _statusCode\n)\n")),(0,o.kt)("h2",{id:"public-attributes-documentation"},"Public Attributes Documentation"),(0,o.kt)("h3",{id:"variable-text"},"variable text"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string text;\n")),(0,o.kt)("h3",{id:"variable-statuscode"},"variable statusCode"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"int32_t statusCode = 0;\n")),(0,o.kt)("h3",{id:"variable-header"},"variable header"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"std::map< std::string, std::string, caseInsensitiveCompare > header;\n")),(0,o.kt)("h3",{id:"variable-birth"},"variable birth"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"time_t birth = 0;\n")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}d.isMDXComponent=!0}}]);