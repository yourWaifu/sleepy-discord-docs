"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[3853],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return _}});var r=t(7294);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,c=function(e,n){if(null==e)return{};var t,r,c={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var o=r.createContext({}),a=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=a(e.components);return r.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,c=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=a(t),_=c,f=u["".concat(o,".").concat(_)]||u[_]||p[_]||i;return t?r.createElement(f,l(l({ref:n},d),{},{components:t})):r.createElement(f,l({ref:n},d))}));function _(e,n){var t=arguments,c=n&&n.mdxType;if("string"==typeof e||c){var i=t.length,l=new Array(i);l[0]=u;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:c,l[1]=s;for(var a=2;a<i;a++)l[a]=t[a];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6087:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return o},metadata:function(){return a},toc:function(){return d},default:function(){return u}});var r=t(3117),c=t(102),i=(t(7294),t(3905)),l=["components"],s={title:"SleepyDiscord::ASIOUDPClient"},o=void 0,a={unversionedId:"reference/Classes/class_sleepy_discord_1_1_a_s_i_o_u_d_p_client",id:"reference/Classes/class_sleepy_discord_1_1_a_s_i_o_u_d_p_client",title:"SleepyDiscord::ASIOUDPClient",description:"Inherits from SleepyDiscord::GenericUDPClient",source:"@site/docs/reference/Classes/class_sleepy_discord_1_1_a_s_i_o_u_d_p_client.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/class_sleepy_discord_1_1_a_s_i_o_u_d_p_client",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_a_s_i_o_u_d_p_client",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::ASIOUDPClient"},sidebar:"Reference",previous:{title:"SleepyDiscord::ASIOScheduleHandler",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_a_s_i_o_schedule_handler"},next:{title:"SleepyDiscord::BaseDiscordClient",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_base_discord_client"}},d=[{value:"inherited members",id:"inherited-members",children:[],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function ASIOUDPClient",id:"function-asioudpclient",children:[],level:3},{value:"function ASIOUDPClient",id:"function-asioudpclient-1",children:[],level:3},{value:"function connect",id:"function-connect",children:[],level:3},{value:"function send",id:"function-send",children:[],level:3},{value:"function receive",id:"function-receive",children:[],level:3}],level:2}],p={toc:d};function u(e){var n=e.components,t=(0,c.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Inherits from ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_u_d_p_client"},"SleepyDiscord::GenericUDPClient")),(0,i.kt)("h2",{id:"inherited-members"},"inherited members"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Public Types inherited from ",(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_u_d_p_client"},"SleepyDiscord::GenericUDPClient"))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"typedef std::function< void()>"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_u_d_p_client#typedef-sendhandler"},"SendHandler")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"typedef std::function< void(const std::vector< uint8_t > &)>"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_u_d_p_client#typedef-receivehandler"},"ReceiveHandler")))))),(0,i.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,i.kt)("h3",{id:"function-asioudpclient"},"function ASIOUDPClient"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ASIOUDPClient(\n    BaseDiscordClient & client\n)\n")),(0,i.kt)("h3",{id:"function-asioudpclient-1"},"function ASIOUDPClient"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ASIOUDPClient(\n    asio::io_service & service\n)\n")),(0,i.kt)("h3",{id:"function-connect"},"function connect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual bool connect(\n    const std::string & to,\n    const uint16_t port\n) override\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_u_d_p_client#function-connect"},"SleepyDiscord::GenericUDPClient::connect")),(0,i.kt)("h3",{id:"function-send"},"function send"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void send(\n    const uint8_t * buffer,\n    size_t bufferLength,\n    SendHandler handler =[]() {}\n) override\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_u_d_p_client#function-send"},"SleepyDiscord::GenericUDPClient::send")),(0,i.kt)("h3",{id:"function-receive"},"function receive"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void receive(\n    ReceiveHandler handler\n) override\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_u_d_p_client#function-receive"},"SleepyDiscord::GenericUDPClient::receive")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);