"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[4221],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function u(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){u(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,u=function(e,n){if(null==e)return{};var t,r,u={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(u[t]=e[t]);return u}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(u[t]=e[t])}return u}var l=r.createContext({}),o=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=o(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,u=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=o(t),f=u,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||i;return t?r.createElement(m,a(a({ref:n},s),{},{components:t})):r.createElement(m,a({ref:n},s))}));function f(e,n){var t=arguments,u=n&&n.mdxType;if("string"==typeof e||u){var i=t.length,a=new Array(i);a[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:u,a[1]=c;for(var o=2;o<i;o++)a[o]=t[o];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7520:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return o},toc:function(){return s},default:function(){return d}});var r=t(3117),u=t(102),i=(t(7294),t(3905)),a=["components"],c={title:"SleepyDiscord::OutputQueue"},l=void 0,o={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_output_queue",id:"reference/Classes/struct_sleepy_discord_1_1_output_queue",title:"SleepyDiscord::OutputQueue",description:"Public Types Documentation",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_output_queue.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_output_queue",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_output_queue",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::OutputQueue"},sidebar:"Reference",previous:{title:"SleepyDiscord::ObjectResponse",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_object_response"},next:{title:"SleepyDiscord::Overwrite",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_overwrite"}},s=[{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using Data",id:"using-data",children:[],level:3},{value:"using Buffer",id:"using-buffer",children:[],level:3},{value:"using Queue",id:"using-queue",children:[],level:3},{value:"using Iterator",id:"using-iterator",children:[],level:3},{value:"using ConstIterator",id:"using-constiterator",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function ~OutputQueue",id:"function-outputqueue",children:[],level:3},{value:"function empty",id:"function-empty",children:[],level:3},{value:"function emplace_back",id:"function-emplace_back",children:[],level:3},{value:"function front",id:"function-front",children:[],level:3},{value:"function back",id:"function-back",children:[],level:3},{value:"function begin",id:"function-begin",children:[],level:3},{value:"function end",id:"function-end",children:[],level:3},{value:"function begin",id:"function-begin-1",children:[],level:3},{value:"function end",id:"function-end-1",children:[],level:3},{value:"function size",id:"function-size",children:[],level:3},{value:"function resize",id:"function-resize",children:[],level:3}],level:2},{value:"Public Attributes Documentation",id:"public-attributes-documentation",children:[{value:"variable chunkSize",id:"variable-chunksize",children:[],level:3},{value:"variable queue",id:"variable-queue",children:[],level:3},{value:"variable _back",id:"variable-_back",children:[],level:3},{value:"variable _size",id:"variable-_size",children:[],level:3}],level:2}],p={toc:s};function d(e){var n=e.components,t=(0,u.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,i.kt)("h3",{id:"using-data"},"using Data"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::OutputQueue::Data =  std::array<char, chunkSize>;\n")),(0,i.kt)("h3",{id:"using-buffer"},"using Buffer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::OutputQueue::Buffer =  std::pair<Data, std::size_t>;\n")),(0,i.kt)("h3",{id:"using-queue"},"using Queue"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::OutputQueue::Queue =  std::forward_list<Buffer>;\n")),(0,i.kt)("h3",{id:"using-iterator"},"using Iterator"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::OutputQueue::Iterator =  std::forward_list<Buffer>::iterator;\n")),(0,i.kt)("h3",{id:"using-constiterator"},"using ConstIterator"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::OutputQueue::ConstIterator =  std::forward_list<Buffer>::const_iterator;\n")),(0,i.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,i.kt)("h3",{id:"function-outputqueue"},"function ~OutputQueue"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"~OutputQueue() =default\n")),(0,i.kt)("h3",{id:"function-empty"},"function empty"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline bool empty() const\n")),(0,i.kt)("h3",{id:"function-emplace_back"},"function emplace_back"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class... Args>\ninline Iterator emplace_back(\n    Args &&... args\n)\n")),(0,i.kt)("h3",{id:"function-front"},"function front"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Buffer & front()\n")),(0,i.kt)("h3",{id:"function-back"},"function back"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Buffer & back()\n")),(0,i.kt)("h3",{id:"function-begin"},"function begin"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Iterator begin()\n")),(0,i.kt)("h3",{id:"function-end"},"function end"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Iterator end()\n")),(0,i.kt)("h3",{id:"function-begin-1"},"function begin"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline ConstIterator begin() const\n")),(0,i.kt)("h3",{id:"function-end-1"},"function end"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline ConstIterator end() const\n")),(0,i.kt)("h3",{id:"function-size"},"function size"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Queue::size_type size() const\n")),(0,i.kt)("h3",{id:"function-resize"},"function resize"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline void resize(\n    Queue::size_type count\n)\n")),(0,i.kt)("h2",{id:"public-attributes-documentation"},"Public Attributes Documentation"),(0,i.kt)("h3",{id:"variable-chunksize"},"variable chunkSize"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"static constexpr static size_t chunkSize = 16 * 1024;\n")),(0,i.kt)("h3",{id:"variable-queue"},"variable queue"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"Queue queue;\n")),(0,i.kt)("h3",{id:"variable-_back"},"variable _back"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"Iterator _back = queue.before_begin();\n")),(0,i.kt)("h3",{id:"variable-_size"},"variable _size"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"Queue::size_type _size = 0;\n")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}d.isMDXComponent=!0}}]);