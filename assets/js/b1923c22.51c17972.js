"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[3],{3905:function(e,n,r){r.d(n,{Zo:function(){return d},kt:function(){return v}});var o=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,o,t=function(e,n){if(null==e)return{};var r,o,t={},s=Object.keys(e);for(o=0;o<s.length;o++)r=s[o],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)r=s[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var l=o.createContext({}),c=function(e){var n=o.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},d=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var r=e.components,t=e.mdxType,s=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=c(r),v=t,f=u["".concat(l,".").concat(v)]||u[v]||p[v]||s;return r?o.createElement(f,i(i({ref:n},d),{},{components:r})):o.createElement(f,i({ref:n},d))}));function v(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var s=r.length,i=new Array(s);i[0]=u;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:t,i[1]=a;for(var c=2;c<s;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},494:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var o=r(3117),t=r(102),s=(r(7294),r(3905)),i=["components"],a={title:"sleepy_discord/default_functions.cpp"},l=void 0,c={unversionedId:"reference/Files/default__functions_8cpp",id:"reference/Files/default__functions_8cpp",title:"sleepy_discord/default_functions.cpp",description:"Namespaces",source:"@site/docs/reference/Files/default__functions_8cpp.md",sourceDirName:"reference/Files",slug:"/reference/Files/default__functions_8cpp",permalink:"/sleepy-discord/docs/reference/Files/default__functions_8cpp",tags:[],version:"current",frontMatter:{title:"sleepy_discord/default_functions.cpp"},sidebar:"Reference",previous:{title:"include/sleepy_discord/custom_udp_client.h",permalink:"/sleepy-discord/docs/reference/Files/custom__udp__client_8h"},next:{title:"include/sleepy_discord",permalink:"/sleepy-discord/docs/reference/Files/dir_7d6133b6519f2d9a153b125eeff6409d"}},d=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],p={toc:d};function u(e){var n=e.components,r=(0,t.Z)(e,i);return(0,s.kt)("wrapper",(0,o.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"namespaces"},"Namespaces"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,s.kt)("h2",{id:"source-code"},"Source code"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "client.h"\n\n#if _MSC_VER && !__INTEL_COMPILER\n#pragma warning( disable: 4100 ) //warns about unused parameters with names\n#pragma warning( disable: 4458 ) //warns about variables that hide class members\n#endif\n\nnamespace SleepyDiscord {\n    void BaseDiscordClient::onReady(Ready readyData) {\n\n    }\n\n    void BaseDiscordClient::onResumed() {\n\n    }\n\n    void BaseDiscordClient::onDeleteServer(UnavailableServer server) {\n\n    }\n\n    void BaseDiscordClient::onEditServer(Server server) {\n\n    }\n\n    void BaseDiscordClient::onBan(Snowflake<Server> serverID, User user) {\n\n    }\n\n    void BaseDiscordClient::onUnban(Snowflake<Server> serverID, User user) {\n\n    }\n\n    void BaseDiscordClient::onMember(Snowflake<Server> serverID, ServerMember member) {\n\n    }\n\n    void BaseDiscordClient::onRemoveMember(Snowflake<Server> serverID, User user) {\n\n    }\n\n\n    void BaseDiscordClient::onEditMember(Snowflake<Server> serverID, User user, std::vector<Snowflake<Role>> roles, std::string nick) {\n\n    }\n\n    void BaseDiscordClient::onRole(Snowflake<Server> serverID, Role role) {\n\n    }\n\n    void BaseDiscordClient::onDeleteRole(Snowflake<Server> serverID, Snowflake<Role> roleID) {\n\n    }\n\n    void BaseDiscordClient::onEditRole(Snowflake<Server> serverID, Role role) {\n\n    }\n\n    void BaseDiscordClient::onEditEmojis(Snowflake<Server> serverID, std::vector<Emoji> emojis) {\n\n    }\n\n    void BaseDiscordClient::onMemberChunk(ServerMembersChunk memberChunk) {\n\n    }\n\n    void BaseDiscordClient::onDeleteChannel(Channel channel) {\n\n    }\n\n    void BaseDiscordClient::onEditChannel(Channel channel) {\n\n    }\n\n    void BaseDiscordClient::onPinMessage(Snowflake<Channel> channelID, std::string lastPinTimestamp) {\n\n    }\n\n    void BaseDiscordClient::onPresenceUpdate(PresenceUpdate presenseUpdate) {\n\n    }\n\n    void BaseDiscordClient::onEditUser(User user) {\n\n    }\n\n\n    void BaseDiscordClient::onEditUserSettings(const json::Value& jsonMessage) {\n\n    }\n\n    void BaseDiscordClient::onEditVoiceState(VoiceState& state) {\n\n    }\n\n    void BaseDiscordClient::onTyping(Snowflake<Channel> channelID, Snowflake<User> userID, time_t timestamp) {\n\n    }\n\n    void BaseDiscordClient::onDeleteMessages(Snowflake<Channel> channelID, std::vector<Snowflake<Message>> messages) {\n\n    }\n\n    void BaseDiscordClient::onEditMessage(MessageRevisions revisioins) {\n\n    }\n\n    void BaseDiscordClient::onEditVoiceServer(VoiceServerUpdate& voiceServerUpdate) {\n\n    }\n\n    void BaseDiscordClient::onReaction(Snowflake<User> userID, Snowflake<Channel> channelID, Snowflake<Message> messageID, Emoji emoji) {\n\n    }\n\n    void BaseDiscordClient::onDeleteReaction(Snowflake<User> userID, Snowflake<Channel> channelID, Snowflake<Message> messageID, Emoji emoji) {\n\n    }\n\n    void BaseDiscordClient::onDeleteAllReaction(Snowflake<Server> serverID, Snowflake<Channel> channelID, Snowflake<Message> messageID) {\n\n    }\n\n    void BaseDiscordClient::onMessage(Message message) {\n        \n    }\n\n    void BaseDiscordClient::onHeartbeat() {\n\n    }\n\n    void BaseDiscordClient::onHeartbeatAck() {\n\n    }\n\n    void BaseDiscordClient::onServer(Server jsonMessage) {\n    \n    }\n\n    void BaseDiscordClient::onChannel(Channel channel) {\n\n    }\n\n    void BaseDiscordClient::onUnknownEvent(std::string name, const json::Value& data) {\n\n    }\n\n    void BaseDiscordClient::onInvaldSession() {\n\n    }\n\n    void BaseDiscordClient::onDisconnect() {\n\n    }\n\n    void BaseDiscordClient::onResume() {\n\n    }\n\n    void BaseDiscordClient::runAsync() {\n\n    }\n\n    void BaseDiscordClient::run() {\n\n    }\n\n    void BaseDiscordClient::onQuit() {\n\n    }\n\n    void SleepyDiscord::BaseDiscordClient::onResponse(Response response) {\n    }\n\n    void BaseDiscordClient::sleep(const unsigned int milliseconds) {\n    \n    }\n    \n    void BaseDiscordClient::fileRead(const char* path, std::string*const file) {\n\n    }\n\n    void BaseDiscordClient::tick(float deltaTime) {\n    \n    }\n    \n    void BaseDiscordClient::onError(ErrorCode errorCode, std::string errorMessage) {\n        \n    }\n\n    Timer BaseDiscordClient::schedule(TimedTask code, const time_t millisecondsTilDueTime) {\n        return Timer([]() {});\n    }\n}\n')),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);