"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[8434],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(n),f=a,m=u["".concat(i,".").concat(f)]||u[f]||p[f]||o;return n?r.createElement(m,s(s({ref:t},d),{},{components:n})):r.createElement(m,s({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6540:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),s=["components"],c={title:"include/sleepy_discord/snowflake.h"},i=void 0,l={unversionedId:"reference/Files/snowflake_8h",id:"reference/Files/snowflake_8h",title:"include/sleepy_discord/snowflake.h",description:"Namespaces",source:"@site/docs/reference/Files/snowflake_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/snowflake_8h",permalink:"/sleepy-discord/docs/reference/Files/snowflake_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/snowflake.h"},sidebar:"Reference",previous:{title:"include/sleepy_discord/sleepy_discord.h",permalink:"/sleepy-discord/docs/reference/Files/sleepy__discord_8h"},next:{title:"sleepy_discord/stage_instance.cpp",permalink:"/sleepy-discord/docs/reference/Files/stage__instance_8cpp"}},d=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Types",id:"types",children:[],level:2},{value:"Functions",id:"functions",children:[],level:2},{value:"Types Documentation",id:"types-documentation",children:[{value:"using Time",id:"using-time",children:[],level:3}],level:2},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function operator+",id:"function-operator",children:[],level:3},{value:"function operator==",id:"function-operator-1",children:[],level:3},{value:"function operator!=",id:"function-operator-2",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],p={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"namespaces"},"Namespaces"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespacestd"},"std")))))),(0,o.kt)("h2",{id:"classes"},"Classes"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"struct"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_snowflake"},"SleepyDiscord::Snowflake")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"struct"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_snowflake_1_1_has_a_find_function"},"SleepyDiscord::Snowflake::HasAFindFunction")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"struct"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_snowflake_1_1_has_a_find_function_1_1_magic"},"SleepyDiscord::Snowflake::HasAFindFunction::Magic")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"struct"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/structstd_1_1hash_3_01_sleepy_discord_1_1_snowflake_3_01_discord_object_01_4_01_4"},"std::hash< SleepyDiscord::Snowflake< DiscordObject > >")))))),(0,o.kt)("h2",{id:"types"},"Types"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"using int64_t"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/snowflake_8h#using-time"},"Time")))))),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"template <typename DiscordOject ",">"," ",(0,o.kt)("br",null),"std::string"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/snowflake_8h#function-operator+"},"operator+")),"(const char * left, Snowflake< DiscordOject > & right)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"template <typename DiscordOject ",">"," ",(0,o.kt)("br",null),"bool"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/snowflake_8h#function-operator=="},"operator==")),"(const char * left, Snowflake< DiscordOject > & right)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"template <typename DiscordOject ",">"," ",(0,o.kt)("br",null),"bool"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/snowflake_8h#function-operator!="},"operator!=")),"(const char * left, Snowflake< DiscordOject > & right)")))),(0,o.kt)("h2",{id:"types-documentation"},"Types Documentation"),(0,o.kt)("h3",{id:"using-time"},"using Time"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Time = typedef int64_t;\n")),(0,o.kt)("h2",{id:"functions-documentation"},"Functions Documentation"),(0,o.kt)("h3",{id:"function-operator"},"function operator+"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename DiscordOject >\ninline std::string operator+(\n    const char * left,\n    Snowflake< DiscordOject > & right\n)\n")),(0,o.kt)("h3",{id:"function-operator-1"},"function operator=="),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename DiscordOject >\ninline bool operator==(\n    const char * left,\n    Snowflake< DiscordOject > & right\n)\n")),(0,o.kt)("h3",{id:"function-operator-2"},"function operator!="),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename DiscordOject >\ninline bool operator!=(\n    const char * left,\n    Snowflake< DiscordOject > & right\n)\n")),(0,o.kt)("h2",{id:"source-code"},"Source code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <string>\n#include <chrono>\n#include <algorithm>\n#if defined(__cpp_exceptions) || defined(__EXCEPTIONS)\n#include <stdexcept>\n#endif\n#include "nonstd/string_view.hpp"\n#include "json_wrapper.h"\n\nnamespace SleepyDiscord {\n    using Time = int64_t;\n\n    //Stops you from mixing up different types of ids, like using a message_id as a user_id\n    template <typename DiscordObject>\n    struct Snowflake {\n        using RawType = std::string;\n        \n        Snowflake(                                  ) = default;\n        Snowflake(const std::string         & snow  ) : raw( snow                         ) {}\n        Snowflake(const std::string         * snow  ) : raw(*snow                         ) {}\n        Snowflake(const char                * snow  ) : raw( snow                         ) {}\n        Snowflake(const nonstd::string_view & snow  ) : raw(snow.data(), snow.length()    ) {}\n        Snowflake(const Snowflake           & flake ) : Snowflake(flake.string(          )) {}\n        Snowflake(const DiscordObject       & object) : Snowflake(object. ID              ) {}\n        Snowflake(const DiscordObject       * object) : Snowflake(object->ID              ) {}\n        Snowflake(const int64_t               number) : Snowflake(std::to_string(number  )) {}\n        Snowflake(const json::Value         & value ) :\n            Snowflake(value.IsString() ? json::toStdString(value) : std::string()) {}\n        ~Snowflake() = default;\n\n        inline bool operator==(const Snowflake& right) const {\n            return raw == right.raw;\n        }\n\n        inline bool operator!=(const Snowflake& right) const {\n            return raw != right.raw;\n        }\n\n        inline bool operator==(const char* right) const {\n            return raw == right;\n        }\n\n        inline bool operator!=(const char* right) const {\n            return raw != right;\n        }\n\n        inline operator const std::string&() const { return raw; }\n\n        inline const std::string& string() const { return operator const std::string&(); }\n        inline const int64_t number() const { return std::stoll(raw); }\n\n        std::chrono::time_point<std::chrono::steady_clock> timestamp() const {\n#if defined(__cpp_exceptions) || defined(__EXCEPTIONS)\n            if (raw == "") throw std::invalid_argument("invalid snow in Snowflake");\n#endif\n            return std::chrono::time_point<std::chrono::steady_clock>(std::chrono::milliseconds((std::stoll(raw) >> 22) + discordEpoch));\n        }\n\n        inline const bool empty() const { return raw.empty(); }\n\n        inline json::Value serialize(typename json::Value::AllocatorType& alloc) const {\n            return json::ClassTypeHelper<RawType>::fromType(raw, alloc);\n        }\n\n        static inline const bool isType(const typename json::Value& value) {\n            return value.IsString();\n        }\n\n        template<class iterator>\n        inline iterator findObject(iterator begin, iterator end) const {\n            return std::find_if(begin, end, [&](const DiscordObject& object) {\n                return operator==(static_cast<DiscordObject>(object));\n            });\n        }\n\n        //Magical code from stackflow\n        //https://stackoverflow.com/a/87846\n        template<class Container>\n        struct HasAFindFunction {\n            using SuccessType = char;\n            using FailureType = int;\n            template<class _Container, size_t (_Container::*)() const> struct Magic {};\n            template<class _Container> static SuccessType Test(Magic<_Container, &_Container::find>*);\n            template<class _Container> static FailureType Test(...);\n            static const bool Value = sizeof(Test<Container>(0)) == sizeof(SuccessType);\n        };\n\n        template<class Container>\n        auto findObject(Container& objects, std::true_type) const -> decltype(objects.begin()) {\n            return objects.find(operator const std::string&());\n        }\n\n        template<class Container>\n        auto findObject(Container& objects, std::false_type) const -> decltype(objects.begin()) {\n            return findObject(objects.begin(), objects.end());\n        }\n\n        template<class Container>\n        auto findObject(Container& objects) const -> decltype(objects.begin()) {\n            return findObject(objects, std::integral_constant<bool, HasAFindFunction<Container>::Value>());\n        }\n\n    private:\n        RawType raw = {};\n        static const Time discordEpoch = 1420070400000; //the first second of 2015 since epoch\n    };\n\n    template <typename DiscordOject>\n    inline std::string operator+(const char * left, Snowflake<DiscordOject>& right) {\n        return left + right.operator const std::string&();\n    }\n\n    template <typename DiscordOject>\n    inline bool operator==(const char * left, Snowflake<DiscordOject>& right) {\n        return left == right.operator const std::string&().c_str();\n    }\n\n    template <typename DiscordOject>\n    inline bool operator!=(const char * left, Snowflake<DiscordOject>& right) {\n        return left != right.operator const std::string&().c_str();\n    }\n}\n\nnamespace std {\n    template<typename DiscordObject>\n    struct hash<SleepyDiscord::Snowflake<DiscordObject>> {\n        inline size_t operator()(const SleepyDiscord::Snowflake<DiscordObject>& snowflake) const {\n            return std::hash<string>{}(static_cast<const string&>(snowflake));\n        }\n    };\n}\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);