"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[7157],{3905:function(e,n,r){r.d(n,{Zo:function(){return d},kt:function(){return m}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function l(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?l(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=t.createContext({}),o=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},d=function(e){var n=o(e.components);return t.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=o(r),m=a,f=p["".concat(i,".").concat(m)]||p[m]||u[m]||l;return r?t.createElement(f,c(c({ref:n},d),{},{components:r})):t.createElement(f,c({ref:n},d))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=r.length,c=new Array(l);c[0]=p;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var o=2;o<l;o++)c[o]=r[o];return t.createElement.apply(null,c)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8228:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return o},toc:function(){return d},default:function(){return p}});var t=r(3117),a=r(102),l=(r(7294),r(3905)),c=["components"],s={title:"include/sleepy_discord/asio_schedule.h"},i=void 0,o={unversionedId:"reference/Files/asio__schedule_8h",id:"reference/Files/asio__schedule_8h",title:"include/sleepy_discord/asio_schedule.h",description:"Namespaces",source:"@site/docs/reference/Files/asio__schedule_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/asio__schedule_8h",permalink:"/sleepy-discord/docs/reference/Files/asio__schedule_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/asio_schedule.h"},sidebar:"Reference",previous:{title:"include/sleepy_discord/asio_include.h",permalink:"/sleepy-discord/docs/reference/Files/asio__include_8h"},next:{title:"sleepy_discord/asio_udp.cpp",permalink:"/sleepy-discord/docs/reference/Files/asio__udp_8cpp"}},d=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],u={toc:d};function p(e){var n=e.components,r=(0,a.Z)(e,c);return(0,l.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"namespaces"},"Namespaces"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,l.kt)("h2",{id:"classes"},"Classes"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"class"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_schedule_handler"},"SleepyDiscord::GenericScheduleHandler")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"class"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_a_s_i_o_based_schedule_handler"},"SleepyDiscord::ASIOBasedScheduleHandler")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"class"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_a_s_i_o_schedule_handler"},"SleepyDiscord::ASIOScheduleHandler")))))),(0,l.kt)("h2",{id:"source-code"},"Source code"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include "asio_include.h"\n#include "timer.h"\n\nnamespace SleepyDiscord {\n    class GenericScheduleHandler {\n    public:\n        virtual ~GenericScheduleHandler() = default;\n        virtual Timer schedule(TimedTask code, const time_t milliseconds) = 0;\n    };\n\n#ifndef NONEXISTENT_ASIO \n\n    class ASIOBasedScheduleHandler : public GenericScheduleHandler {\n    public:\n        virtual ~ASIOBasedScheduleHandler() = default;\n        virtual asio::io_service& getIOService() = 0;\n    };\n\n    class ASIOScheduleHandler : public ASIOBasedScheduleHandler {\n    public:\n        ASIOScheduleHandler() {}\n        virtual ~ASIOScheduleHandler() = default;\n\n        inline asio::io_service& getIOService() override {\n            return io;\n        }\n\n        static void handleTimer(const asio::error_code &ec, std::function<void()>& code) {\n            if (ec != asio::error::operation_aborted) {\n                code();\n            }\n        }\n\n        inline Timer schedule(TimedTask code, const time_t milliseconds) override {\n            auto timer = std::make_shared<asio::steady_timer>(io, asio::chrono::milliseconds(milliseconds));\n            timer->async_wait(std::bind(&handleTimer, std::placeholders::_1, code));\n            return Timer([timer]() {\n                timer->cancel();\n            });\n        }\n\n        inline void run() {\n            io.run();\n        }\n\n    private:\n        asio::io_service io;\n    };\n#endif\n}\n')),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}p.isMDXComponent=!0}}]);