"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[866],{6403:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"unicode","title":"Unicode and Emojis","description":"C++ code is usually in ASCII but many times you will want to send messages with Unicode and Emojis.","source":"@site/docs/unicode.md","sourceDirName":".","slug":"/unicode","permalink":"/sleepy-discord/docs/unicode","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1758418732000,"frontMatter":{"title":"Unicode and Emojis","sidebar_label":"Unicode and Emojis"},"sidebar":"Docs","previous":{"title":"Voice","permalink":"/sleepy-discord/docs/voice"},"next":{"title":"Snowflakes and IDs","permalink":"/sleepy-discord/docs/snowflake"}}');var r=n(4848),o=n(8453);const i={title:"Unicode and Emojis",sidebar_label:"Unicode and Emojis"},a=void 0,d={},c=[{value:"Standard Unicode Emojis and Characters",id:"standard-unicode-emojis-and-characters",level:2},{value:"C++20 and std::u8string",id:"c20-and-stdu8string",level:2},{value:"Custom Emojis",id:"custom-emojis",level:2}];function l(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.p,{children:"C++ code is usually in ASCII but many times you will want to send messages with Unicode and Emojis."}),"\n",(0,r.jsx)(s.h2,{id:"standard-unicode-emojis-and-characters",children:"Standard Unicode Emojis and Characters"}),"\n",(0,r.jsx)(s.p,{children:"Sleepy Discord should store text content using UTF-8. As such, to use Unicode, you can use C++'s u8 string literals."}),"\n",(0,r.jsx)(s.p,{children:"String Literal"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:'auto foo = u8"\u8a9e";\r\nsendMessage(channelID, u8"\u8a9e");\n'})}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsxs)(s.p,{children:["The u8 string types are different in different C++ standards so auto is used and the above code may not work. ",(0,r.jsx)(s.a,{href:"#c20-and-stdu8string",children:"More info here."})]})}),"\n",(0,r.jsxs)(s.p,{children:["If you want to use ASCII in your source files, C++'s escape sequences also work. You'll want to look up the Unicode number for each character on a Unicode Character table. For example, \ud83d\udd34 has the Unicode number ",(0,r.jsx)(s.code,{children:"U+1F534"}),", so it's escape sequence is ",(0,r.jsx)(s.code,{children:"\\U0001F534"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"Unicode code points"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:'auto foo = u8"\\u8A9E"; //use little u for 4 digits\r\nauto bar = u8"\\u00B5"; //use zeros to fill up to 4 digits\r\nauto fuu = u8"\\U0001F534"; //use big U for 8 digits\n'})}),"\n",(0,r.jsx)(s.p,{children:"Numeric Hex escapes"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:'std::string foo = "\\xE8\\xAA\\x9E"; //one \\x for every byte in utf-8\n'})}),"\n",(0,r.jsx)(s.h2,{id:"c20-and-stdu8string",children:"C++20 and std::u8string"}),"\n",(0,r.jsx)(s.p,{children:"In C++20, some of the above code will not work as the library currenty expects the std::string type instead of std::u8string."}),"\n",(0,r.jsxs)(s.p,{children:["Taking a look at the paper ",(0,r.jsx)(s.a,{href:"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1423r2.html",children:"char8_t backward compatibility remediation (P1423)"}),", there are many ways to cast a u8 char array to a char array that has the same behavior of eariler C++ standards."]}),"\n",(0,r.jsx)(s.p,{children:"Here's an example of explicit conversions from the paper."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-cpp",children:"std::string from_u8string(const std::string &s) {\r\n  return s;\r\n}\r\nstd::string from_u8string(std::string &&s) {\r\n  return std::move(s);\r\n}\r\n#if defined(__cpp_lib_char8_t)\r\nstd::string from_u8string(const std::u8string &s) {\r\n  return std::string(s.begin(), s.end());\r\n}\r\n#endif\r\n\r\nstd::filesystem::path p = ...;\r\nstd::string s = from_u8string(p.u8string());  // C++17 or C++20\n"})}),"\n",(0,r.jsx)(s.h2,{id:"custom-emojis",children:"Custom Emojis"}),"\n",(0,r.jsxs)(s.p,{children:["If you want to insert Discord custom emojis into your text content, please prefer to ",(0,r.jsx)(s.a,{href:"https://discord.com/developers/docs/reference#message-formatting",children:"the Discord API Message formatting reference"}),"."]})]})}function u(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>a});var t=n(6540);const r={},o=t.createContext(r);function i(e){const s=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);