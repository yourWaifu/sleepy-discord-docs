"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[716],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var r=a.createContext({}),c=function(e){var n=a.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(r.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=s,g=u["".concat(r,".").concat(m)]||u[m]||d[m]||i;return t?a.createElement(g,o(o({ref:n},p),{},{components:t})):a.createElement(g,o({ref:n},p))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var r in n)hasOwnProperty.call(n,r)&&(l[r]=n[r]);l.originalType=e,l.mdxType="string"==typeof e?e:s,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3613:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return r},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var a=t(3117),s=t(102),i=(t(7294),t(3905)),o=["components"],l={title:"SleepyDiscord::BaseDiscordClient"},r=void 0,c={unversionedId:"reference/Classes/class_sleepy_discord_1_1_base_discord_client",id:"reference/Classes/class_sleepy_discord_1_1_base_discord_client",title:"SleepyDiscord::BaseDiscordClient",description:"Inherits from SleepyDiscord::GenericMessageReceiver",source:"@site/docs/reference/Classes/class_sleepy_discord_1_1_base_discord_client.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/class_sleepy_discord_1_1_base_discord_client",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_base_discord_client",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::BaseDiscordClient"},sidebar:"Reference",previous:{title:"SleepyDiscord::ASIOUDPClient",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_a_s_i_o_u_d_p_client"},next:{title:"SleepyDiscord::BaseVoiceEventHandler",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_base_voice_event_handler"}},p=[{value:"inherited members",id:"inherited-members",children:[],level:2},{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"enum GetMessagesKey",id:"enum-getmessageskey",children:[],level:3},{value:"enum AssignmentType",id:"enum-assignmenttype",children:[],level:3},{value:"using RequestCallback",id:"using-requestcallback",children:[],level:3},{value:"typedef PostableTask",id:"typedef-postabletask",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function BaseDiscordClient",id:"function-basediscordclient",children:[],level:3},{value:"function BaseDiscordClient",id:"function-basediscordclient-1",children:[],level:3},{value:"function ~BaseDiscordClient",id:"function-basediscordclient-2",children:[],level:3},{value:"function request",id:"function-request",children:[],level:3},{value:"function requestAsync",id:"function-requestasync",children:[],level:3},{value:"function requestSync",id:"function-requestsync",children:[],level:3},{value:"function path",id:"function-path",children:[],level:3},{value:"function request",id:"function-request-1",children:[],level:3},{value:"function request",id:"function-request-2",children:[],level:3},{value:"function testFunction",id:"function-testfunction",children:[],level:3},{value:"function getGateway",id:"function-getgateway",children:[],level:3},{value:"function getChannel",id:"function-getchannel",children:[],level:3},{value:"function editChannel",id:"function-editchannel",children:[],level:3},{value:"function editChannelName",id:"function-editchannelname",children:[],level:3},{value:"function editChannelTopic",id:"function-editchanneltopic",children:[],level:3},{value:"function deleteChannel",id:"function-deletechannel",children:[],level:3},{value:"function getMessages",id:"function-getmessages",children:[],level:3},{value:"function getMessage",id:"function-getmessage",children:[],level:3},{value:"function createInvalidEmbed",id:"function-createinvalidembed",children:[],level:3},{value:"function sendMessage",id:"function-sendmessage",children:[],level:3},{value:"function sendMessage",id:"function-sendmessage-1",children:[],level:3},{value:"function sendMessage",id:"function-sendmessage-2",children:[],level:3},{value:"function uploadFile",id:"function-uploadfile",children:[],level:3},{value:"function uploadFile",id:"function-uploadfile-1",children:[],level:3},{value:"function addReaction",id:"function-addreaction",children:[],level:3},{value:"function removeReaction",id:"function-removereaction",children:[],level:3},{value:"function getReactions",id:"function-getreactions",children:[],level:3},{value:"function removeAllReactions",id:"function-removeallreactions",children:[],level:3},{value:"function editMessage",id:"function-editmessage",children:[],level:3},{value:"function editMessage",id:"function-editmessage-1",children:[],level:3},{value:"function deleteMessage",id:"function-deletemessage",children:[],level:3},{value:"function bulkDeleteMessages",id:"function-bulkdeletemessages",children:[],level:3},{value:"function editChannelPermissions",id:"function-editchannelpermissions",children:[],level:3},{value:"function getChannelInvites",id:"function-getchannelinvites",children:[],level:3},{value:"function createChannelInvite",id:"function-createchannelinvite",children:[],level:3},{value:"function removeChannelPermission",id:"function-removechannelpermission",children:[],level:3},{value:"function sendTyping",id:"function-sendtyping",children:[],level:3},{value:"function getPinnedMessages",id:"function-getpinnedmessages",children:[],level:3},{value:"function pinMessage",id:"function-pinmessage",children:[],level:3},{value:"function unpinMessage",id:"function-unpinmessage",children:[],level:3},{value:"function addRecipient",id:"function-addrecipient",children:[],level:3},{value:"function removeRecipient",id:"function-removerecipient",children:[],level:3},{value:"function startThreadMessage",id:"function-startthreadmessage",children:[],level:3},{value:"function joinThread",id:"function-jointhread",children:[],level:3},{value:"function addThreadMember",id:"function-addthreadmember",children:[],level:3},{value:"function leaveThread",id:"function-leavethread",children:[],level:3},{value:"function removeThreadMember",id:"function-removethreadmember",children:[],level:3},{value:"function getThreadMember",id:"function-getthreadmember",children:[],level:3},{value:"function deleteReaction",id:"function-deletereaction",children:[],level:3},{value:"function deleteAllReactions",id:"function-deleteallreactions",children:[],level:3},{value:"function deleteChannelPermission",id:"function-deletechannelpermission",children:[],level:3},{value:"function deleteRecipient",id:"function-deleterecipient",children:[],level:3},{value:"function editMessage",id:"function-editmessage-2",children:[],level:3},{value:"function sendMessage",id:"function-sendmessage-3",children:[],level:3},{value:"function sendMessage",id:"function-sendmessage-4",children:[],level:3},{value:"function getServer",id:"function-getserver",children:[],level:3},{value:"function deleteServer",id:"function-deleteserver",children:[],level:3},{value:"function getServerChannels",id:"function-getserverchannels",children:[],level:3},{value:"function createTextChannel",id:"function-createtextchannel",children:[],level:3},{value:"function createChannel",id:"function-createchannel",children:[],level:3},{value:"function editChannelPositions",id:"function-editchannelpositions",children:[],level:3},{value:"function getMember",id:"function-getmember",children:[],level:3},{value:"function listMembers",id:"function-listmembers",children:[],level:3},{value:"function addMember",id:"function-addmember",children:[],level:3},{value:"function editMember",id:"function-editmember",children:[],level:3},{value:"function muteServerMember",id:"function-muteservermember",children:[],level:3},{value:"function editNickname",id:"function-editnickname",children:[],level:3},{value:"function addRole",id:"function-addrole",children:[],level:3},{value:"function removeRole",id:"function-removerole",children:[],level:3},{value:"function kickMember",id:"function-kickmember",children:[],level:3},{value:"function getBans",id:"function-getbans",children:[],level:3},{value:"function banMember",id:"function-banmember",children:[],level:3},{value:"function unbanMember",id:"function-unbanmember",children:[],level:3},{value:"function getRoles",id:"function-getroles",children:[],level:3},{value:"function createRole",id:"function-createrole",children:[],level:3},{value:"function editRolePosition",id:"function-editroleposition",children:[],level:3},{value:"function editRole",id:"function-editrole",children:[],level:3},{value:"function deleteRole",id:"function-deleterole",children:[],level:3},{value:"function pruneMembers",id:"function-prunemembers",children:[],level:3},{value:"function getVoiceRegions",id:"function-getvoiceregions",children:[],level:3},{value:"function getServerInvites",id:"function-getserverinvites",children:[],level:3},{value:"function getIntegrations",id:"function-getintegrations",children:[],level:3},{value:"function createIntegration",id:"function-createintegration",children:[],level:3},{value:"function editIntergration",id:"function-editintergration",children:[],level:3},{value:"function deleteIntegration",id:"function-deleteintegration",children:[],level:3},{value:"function syncIntegration",id:"function-syncintegration",children:[],level:3},{value:"function getServerWidget",id:"function-getserverwidget",children:[],level:3},{value:"function inviteEndpoint",id:"function-inviteendpoint",children:[],level:3},{value:"function getInvite",id:"function-getinvite",children:[],level:3},{value:"function deleteInvite",id:"function-deleteinvite",children:[],level:3},{value:"function acceptInvite",id:"function-acceptinvite",children:[],level:3},{value:"function getCurrentUser",id:"function-getcurrentuser",children:[],level:3},{value:"function getUser",id:"function-getuser",children:[],level:3},{value:"function getServers",id:"function-getservers",children:[],level:3},{value:"function leaveServer",id:"function-leaveserver",children:[],level:3},{value:"function getDirectMessageChannels",id:"function-getdirectmessagechannels",children:[],level:3},{value:"function createDirectMessageChannel",id:"function-createdirectmessagechannel",children:[],level:3},{value:"function getUserConnections",id:"function-getuserconnections",children:[],level:3},{value:"function createWebhook",id:"function-createwebhook",children:[],level:3},{value:"function getChannelWebhooks",id:"function-getchannelwebhooks",children:[],level:3},{value:"function getServerWebhooks",id:"function-getserverwebhooks",children:[],level:3},{value:"function getWebhook",id:"function-getwebhook",children:[],level:3},{value:"function editWebhook",id:"function-editwebhook",children:[],level:3},{value:"function deleteWebhook",id:"function-deletewebhook",children:[],level:3},{value:"function requestExecuteWebhook",id:"function-requestexecutewebhook",children:[],level:3},{value:"function executeWebhook",id:"function-executewebhook",children:[],level:3},{value:"function executeWebhook",id:"function-executewebhook-1",children:[],level:3},{value:"function executeWebhook",id:"function-executewebhook-2",children:[],level:3},{value:"function createGlobalAppCommand",id:"function-createglobalappcommand",children:[],level:3},{value:"function editGlobalAppCommand",id:"function-editglobalappcommand",children:[],level:3},{value:"function getGlobalAppCommands",id:"function-getglobalappcommands",children:[],level:3},{value:"function getGlobalAppCommand",id:"function-getglobalappcommand",children:[],level:3},{value:"function deleteGlobalAppCommand",id:"function-deleteglobalappcommand",children:[],level:3},{value:"function createServerAppCommand",id:"function-createserverappcommand",children:[],level:3},{value:"function editServerAppCommand",id:"function-editserverappcommand",children:[],level:3},{value:"function getServerAppCommands",id:"function-getserverappcommands",children:[],level:3},{value:"function getServerAppCommand",id:"function-getserverappcommand",children:[],level:3},{value:"function deleteServerAppCommand",id:"function-deleteserverappcommand",children:[],level:3},{value:"function createInteractionResponse",id:"function-createinteractionresponse",children:[],level:3},{value:"function editOriginalInteractionResponse",id:"function-editoriginalinteractionresponse",children:[],level:3},{value:"function deleteOriginalInteractionResponse",id:"function-deleteoriginalinteractionresponse",children:[],level:3},{value:"function createFollowupMessage",id:"function-createfollowupmessage",children:[],level:3},{value:"function editFollowupMessage",id:"function-editfollowupmessage",children:[],level:3},{value:"function deleteFollowupMessage",id:"function-deletefollowupmessage",children:[],level:3},{value:"function batchEditAppCommandPermissions",id:"function-batcheditappcommandpermissions",children:[],level:3},{value:"function editServerAppCommandPermission",id:"function-editserverappcommandpermission",children:[],level:3},{value:"function getServerAppCommandPermissions",id:"function-getserverappcommandpermissions",children:[],level:3},{value:"function getAppCommandPermissions",id:"function-getappcommandpermissions",children:[],level:3},{value:"function createAppCommand",id:"function-createappcommand",children:[],level:3},{value:"function editAppCommand",id:"function-editappcommand",children:[],level:3},{value:"function getAppCommands",id:"function-getappcommands",children:[],level:3},{value:"function getAppCommand",id:"function-getappcommand",children:[],level:3},{value:"function deleteAppCommand",id:"function-deleteappcommand",children:[],level:3},{value:"function bulkOverwriteServerAppCommands",id:"function-bulkoverwriteserverappcommands",children:[],level:3},{value:"function bulkOverwriteGlobalAppCommands",id:"function-bulkoverwriteglobalappcommands",children:[],level:3},{value:"function createStageInstance",id:"function-createstageinstance",children:[],level:3},{value:"function getStageInstance",id:"function-getstageinstance",children:[],level:3},{value:"function editStageInstance",id:"function-editstageinstance",children:[],level:3},{value:"function deleteStageInstance",id:"function-deletestageinstance",children:[],level:3},{value:"function updateStatus",id:"function-updatestatus",children:[],level:3},{value:"function requestServerMembers",id:"function-requestservermembers",children:[],level:3},{value:"function getServerBanner",id:"function-getserverbanner",children:[],level:3},{value:"function getServerBanner",id:"function-getserverbanner-1",children:[],level:3},{value:"function waitTilReady",id:"function-waittilready",children:[],level:3},{value:"function isReady",id:"function-isready",children:[],level:3},{value:"function isQuiting",id:"function-isquiting",children:[],level:3},{value:"function isBot",id:"function-isbot",children:[],level:3},{value:"function getID",id:"function-getid",children:[],level:3},{value:"function setShardID",id:"function-setshardid",children:[],level:3},{value:"function getShardID",id:"function-getshardid",children:[],level:3},{value:"function getShardCount",id:"function-getshardcount",children:[],level:3},{value:"function hasIntents",id:"function-hasintents",children:[],level:3},{value:"function getIntents",id:"function-getintents",children:[],level:3},{value:"function setIntents",id:"function-setintents",children:[],level:3},{value:"function quit",id:"function-quit",children:[],level:3},{value:"function run",id:"function-run",children:[],level:3},{value:"function setIntents",id:"function-setintents-1",children:[],level:3},{value:"function setIntents",id:"function-setintents-2",children:[],level:3},{value:"function useCompression",id:"function-usecompression",children:[],level:3},{value:"function useCompression",id:"function-usecompression-1",children:[],level:3},{value:"function setScheduleHandler",id:"function-setschedulehandler",children:[],level:3},{value:"function getScheduleHandler",id:"function-getschedulehandler",children:[],level:3},{value:"function schedule",id:"function-schedule",children:[],level:3},{value:"function schedule",id:"function-schedule-1",children:[],level:3},{value:"function schedule",id:"function-schedule-2",children:[],level:3},{value:"function unschedule",id:"function-unschedule",children:[],level:3},{value:"function postTask",id:"function-posttask",children:[],level:3},{value:"function createServerCache",id:"function-createservercache",children:[],level:3},{value:"function setServerCache",id:"function-setservercache",children:[],level:3},{value:"function getServerCache",id:"function-getservercache",children:[],level:3},{value:"function getCDN_URL",id:"function-getcdn_url",children:[],level:3}],level:2},{value:"Protected Functions Documentation",id:"protected-functions-documentation",children:[{value:"function onDepletedRequestSupply",id:"function-ondepletedrequestsupply",children:[],level:3},{value:"function onExceededRateLimit",id:"function-onexceededratelimit",children:[],level:3},{value:"function onReady",id:"function-onready",children:[],level:3},{value:"function onResumed",id:"function-onresumed",children:[],level:3},{value:"function onDeleteServer",id:"function-ondeleteserver",children:[],level:3},{value:"function onEditServer",id:"function-oneditserver",children:[],level:3},{value:"function onBan",id:"function-onban",children:[],level:3},{value:"function onUnban",id:"function-onunban",children:[],level:3},{value:"function onMember",id:"function-onmember",children:[],level:3},{value:"function onRemoveMember",id:"function-onremovemember",children:[],level:3},{value:"function onEditMember",id:"function-oneditmember",children:[],level:3},{value:"function onRole",id:"function-onrole",children:[],level:3},{value:"function onDeleteRole",id:"function-ondeleterole",children:[],level:3},{value:"function onEditRole",id:"function-oneditrole",children:[],level:3},{value:"function onEditEmojis",id:"function-oneditemojis",children:[],level:3},{value:"function onMemberChunk",id:"function-onmemberchunk",children:[],level:3},{value:"function onDeleteChannel",id:"function-ondeletechannel",children:[],level:3},{value:"function onEditChannel",id:"function-oneditchannel",children:[],level:3},{value:"function onPinMessage",id:"function-onpinmessage",children:[],level:3},{value:"function onThread",id:"function-onthread",children:[],level:3},{value:"function onThreadUpdate",id:"function-onthreadupdate",children:[],level:3},{value:"function onDeleteThread",id:"function-ondeletethread",children:[],level:3},{value:"function onThreadListSync",id:"function-onthreadlistsync",children:[],level:3},{value:"function onEditThreadMember",id:"function-oneditthreadmember",children:[],level:3},{value:"function onEditThreadMembers",id:"function-oneditthreadmembers",children:[],level:3},{value:"function onPresenceUpdate",id:"function-onpresenceupdate",children:[],level:3},{value:"function onEditUser",id:"function-onedituser",children:[],level:3},{value:"function onEditUserSettings",id:"function-oneditusersettings",children:[],level:3},{value:"function onEditVoiceState",id:"function-oneditvoicestate",children:[],level:3},{value:"function onTyping",id:"function-ontyping",children:[],level:3},{value:"function onDeleteMessages",id:"function-ondeletemessages",children:[],level:3},{value:"function onEditMessage",id:"function-oneditmessage",children:[],level:3},{value:"function onEditVoiceServer",id:"function-oneditvoiceserver",children:[],level:3},{value:"function onReaction",id:"function-onreaction",children:[],level:3},{value:"function onDeleteReaction",id:"function-ondeletereaction",children:[],level:3},{value:"function onDeleteAllReaction",id:"function-ondeleteallreaction",children:[],level:3},{value:"function onMessage",id:"function-onmessage",children:[],level:3},{value:"function onServer",id:"function-onserver",children:[],level:3},{value:"function onChannel",id:"function-onchannel",children:[],level:3},{value:"function onInteraction",id:"function-oninteraction",children:[],level:3},{value:"function onAppCommand",id:"function-onappcommand",children:[],level:3},{value:"function onEditAppCommand",id:"function-oneditappcommand",children:[],level:3},{value:"function onDeleteAppCommand",id:"function-ondeleteappcommand",children:[],level:3},{value:"function onStageInstance",id:"function-onstageinstance",children:[],level:3},{value:"function onDeleteStageInstance",id:"function-ondeletestageinstance",children:[],level:3},{value:"function onEditStageInstance",id:"function-oneditstageinstance",children:[],level:3},{value:"function onUnknownEvent",id:"function-onunknownevent",children:[],level:3},{value:"function onDispatch",id:"function-ondispatch",children:[],level:3},{value:"function onHeartbeat",id:"function-onheartbeat",children:[],level:3},{value:"function onHeartbeatAck",id:"function-onheartbeatack",children:[],level:3},{value:"function onInvaldSession",id:"function-oninvaldsession",children:[],level:3},{value:"function onDisconnect",id:"function-ondisconnect",children:[],level:3},{value:"function onResume",id:"function-onresume",children:[],level:3},{value:"function onQuit",id:"function-onquit",children:[],level:3},{value:"function onRestart",id:"function-onrestart",children:[],level:3},{value:"function onResponse",id:"function-onresponse",children:[],level:3},{value:"function sleep",id:"function-sleep",children:[],level:3},{value:"function fileRead",id:"function-fileread",children:[],level:3},{value:"function tick",id:"function-tick",children:[],level:3},{value:"function onError",id:"function-onerror",children:[],level:3},{value:"function processMessage",id:"function-processmessage",children:[],level:3},{value:"function processMessage",id:"function-processmessage-1",children:[],level:3},{value:"function processCloseCode",id:"function-processclosecode",children:[],level:3},{value:"function heartbeat",id:"function-heartbeat",children:[],level:3},{value:"function sendHeartbeat",id:"function-sendheartbeat",children:[],level:3},{value:"function resetHeartbeatValues",id:"function-resetheartbeatvalues",children:[],level:3},{value:"function getToken",id:"function-gettoken",children:[],level:3},{value:"function setToken",id:"function-settoken",children:[],level:3},{value:"function start",id:"function-start",children:[],level:3},{value:"function connect",id:"function-connect",children:[],level:3},{value:"function connect",id:"function-connect-1",children:[],level:3},{value:"function handleFailToConnect",id:"function-handlefailtoconnect",children:[],level:3},{value:"function send",id:"function-send",children:[],level:3},{value:"function disconnect",id:"function-disconnect",children:[],level:3},{value:"function reconnect",id:"function-reconnect",children:[],level:3},{value:"function stopClient",id:"function-stopclient",children:[],level:3},{value:"function initialize",id:"function-initialize",children:[],level:3},{value:"function processMessage",id:"function-processmessage-2",children:[],level:3},{value:"function processCloseCode",id:"function-processclosecode-1",children:[],level:3},{value:"function runAsync",id:"function-runasync",children:[],level:3},{value:"function getEpochTimeMillisecond",id:"function-getepochtimemillisecond",children:[],level:3},{value:"function getEpochTimeSecond",id:"function-getepochtimesecond",children:[],level:3}],level:2}],d={toc:p};function u(e){var n=e.components,t=(0,s.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Inherits from ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver"},"SleepyDiscord::GenericMessageReceiver")),(0,i.kt)("p",null,"Inherited by ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_u_web_sockets_discord_client"},"SleepyDiscord::UWebSocketsDiscordClient"),", ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client"},"SleepyDiscord::WebsocketppDiscordClient")),(0,i.kt)("h2",{id:"inherited-members"},"inherited members"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Public Functions inherited from ",(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver"},"SleepyDiscord::GenericMessageReceiver"))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"virtual"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#function-~genericmessagereceiver"},"~GenericMessageReceiver")),"() =default")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Protected Functions inherited from ",(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver"},"SleepyDiscord::GenericMessageReceiver"))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"const time_t"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#function-getretrydelay"},"getRetryDelay")),"()")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Public Attributes inherited from ",(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver"},"SleepyDiscord::GenericMessageReceiver"))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"WebsocketConnection"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#variable-connection"},"connection")))))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Protected Attributes inherited from ",(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver"},"SleepyDiscord::GenericMessageReceiver"))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"int"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#variable-consecutivereconnectscount"},"consecutiveReconnectsCount")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_timer"},"Timer")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#variable-reconnecttimer"},"reconnectTimer")))))),(0,i.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,i.kt)("h3",{id:"enum-getmessageskey"},"enum GetMessagesKey"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Enumerator"),(0,i.kt)("th",{parentName:"tr",align:null},"Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"na"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"around"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"before"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"after"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"limit"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("h3",{id:"enum-assignmenttype"},"enum AssignmentType"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Enumerator"),(0,i.kt)("th",{parentName:"tr",align:null},"Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TilDueTime"),(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EpochTime"),(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("h3",{id:"using-requestcallback"},"using RequestCallback"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::BaseDiscordClient::RequestCallback =  std::function<void(Response)>;\n")),(0,i.kt)("h3",{id:"typedef-postabletask"},"typedef PostableTask"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef TimedTask SleepyDiscord::BaseDiscordClient::PostableTask;\n")),(0,i.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,i.kt)("h3",{id:"function-basediscordclient"},"function BaseDiscordClient"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BaseDiscordClient() =default\n")),(0,i.kt)("h3",{id:"function-basediscordclient-1"},"function BaseDiscordClient"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline BaseDiscordClient(\n    const std::string _token\n)\n")),(0,i.kt)("h3",{id:"function-basediscordclient-2"},"function ~BaseDiscordClient"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"~BaseDiscordClient()\n")),(0,i.kt)("h3",{id:"function-request"},"function request"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'Response request(\n    const RequestMethod method,\n    Route path,\n    const std::string jsonParameters ="",\n    const std::vector< Part > & multipartParameters ={},\n    RequestCallback callback =nullptr,\n    const RequestMode mode =Sync_AsyncQueue\n)\n')),(0,i.kt)("h3",{id:"function-requestasync"},"function requestAsync"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'template <class ParmType >\ninline void requestAsync(\n    const RequestMethod method,\n    Route path,\n    std::function< void(ParmType)> callback,\n    const std::string jsonParameters ="",\n    const std::vector< Part > & multipartParameters ={},\n    const RequestMode mode =Async\n)\n')),(0,i.kt)("h3",{id:"function-requestsync"},"function requestSync"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'template <class ParmType >\ninline Response requestSync(\n    const RequestMethod method,\n    Route path,\n    std::function< void(ParmType)> callback,\n    const std::string jsonParameters ="",\n    const std::vector< Part > & multipartParameters ={},\n    const RequestMode mode =Sync\n)\n')),(0,i.kt)("h3",{id:"function-path"},"function path"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"const Route path(\n    const char * source,\n    std::initializer_list< std::string > values ={}\n)\n")),(0,i.kt)("h3",{id:"function-request-1"},"function request"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'template <class RequestSettingsClass >\ninline Response request(\n    const RequestMethod method,\n    Route path,\n    RequestSettingsClass & settings,\n    const std::string jsonParameters ="",\n    const std::initializer_list< Part > & multipartParameters ={}\n)\n')),(0,i.kt)("h3",{id:"function-request-2"},"function request"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'template <RequestMode mode,\nclass ParmType  =void,\nclass Callback  =RequestCallback>\ninline RequestModeType< mode >::ReturnType request(\n    const RequestMethod method,\n    Route path,\n    Callback callback,\n    const std::string jsonParameters ="",\n    const std::initializer_list< Part > & multipartParameters ={}\n)\n')),(0,i.kt)("h3",{id:"function-testfunction"},"function testFunction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void testFunction(\n    std::string teststring\n)\n")),(0,i.kt)("h3",{id:"function-getgateway"},"function getGateway"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Gateway > getGateway(\n    RequestSettings< ObjectResponse< Gateway >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getchannel"},"function getChannel"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > getChannel(\n    Snowflake< Channel > channelID,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editchannel"},"function editChannel"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Channel > editChannel(\n    Snowflake< Channel > channelID,\n    std::string name ="",\n    std::string topic ="",\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n')),(0,i.kt)("h3",{id:"function-editchannelname"},"function editChannelName"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > editChannelName(\n    Snowflake< Channel > channelID,\n    std::string name,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editchanneltopic"},"function editChannelTopic"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > editChannelTopic(\n    Snowflake< Channel > channelID,\n    std::string topic,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-deletechannel"},"function deleteChannel"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > deleteChannel(\n    Snowflake< Channel > channelID,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getmessages"},"function getMessages"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Message > getMessages(\n    Snowflake< Channel > channelID,\n    GetMessagesKey when,\n    Snowflake< Message > messageID,\n    uint8_t limit =0,\n    RequestSettings< ArrayResponse< Message >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getmessage"},"function getMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > getMessage(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-createinvalidembed"},"function createInvalidEmbed"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const Embed createInvalidEmbed()\n")),(0,i.kt)("h3",{id:"function-sendmessage"},"function sendMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > sendMessage(\n    Snowflake< Channel > channelID,\n    std::string message,\n    std::vector< Embed > embeds,\n    MessageReference replyingTo ={},\n    TTS tts =TTS::Default,\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-sendmessage-1"},"function sendMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > sendMessage(\n    Snowflake< Channel > channelID,\n    std::string message,\n    Embed embeds,\n    MessageReference replyingTo ={},\n    TTS tts =TTS::Default,\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-sendmessage-2"},"function sendMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > sendMessage(\n    SendMessageParams params,\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-uploadfile"},"function uploadFile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > uploadFile(\n    Snowflake< Channel > channelID,\n    std::string fileLocation,\n    std::string message,\n    std::vector< Embed > embeds ={},\n    MessageReference replyingTo ={},\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-uploadfile-1"},"function uploadFile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > uploadFile(\n    SendMessageParams params,\n    std::string fileLocation,\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-addreaction"},"function addReaction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse addReaction(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    std::string emoji,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-removereaction"},"function removeReaction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'BoolResponse removeReaction(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    std::string emoji,\n    Snowflake< User > userID ="@me"\n)\n')),(0,i.kt)("h3",{id:"function-getreactions"},"function getReactions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< User > getReactions(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    std::string emoji,\n    RequestSettings< ArrayResponse< Reaction >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-removeallreactions"},"function removeAllReactions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"StandardResponse removeAllReactions(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    RequestSettings< StandardResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editmessage"},"function editMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > editMessage(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    std::string newMessage,\n    std::vector< Embed > embeds ={},\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editmessage-1"},"function editMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > editMessage(\n    EditMessageParams params,\n    RequestSettings< ObjectResponse< Message >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-deletemessage"},"function deleteMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteMessage(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-bulkdeletemessages"},"function bulkDeleteMessages"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse bulkDeleteMessages(\n    Snowflake< Channel > channelID,\n    std::vector< Snowflake< Message >> messageIDs,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editchannelpermissions"},"function editChannelPermissions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse editChannelPermissions(\n    Snowflake< Channel > channelID,\n    Snowflake< Overwrite > overwriteID,\n    int allow,\n    int deny,\n    std::string type\n)\n")),(0,i.kt)("h3",{id:"function-getchannelinvites"},"function getChannelInvites"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Invite > getChannelInvites(\n    Snowflake< Channel > channelID,\n    RequestSettings< ArrayResponse< Invite >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-createchannelinvite"},"function createChannelInvite"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Invite > createChannelInvite(\n    Snowflake< Channel > channelID,\n    const uint64_t maxAge =0,\n    const uint64_t maxUses =0,\n    const bool temporary =false,\n    const bool unique =false\n)\n")),(0,i.kt)("h3",{id:"function-removechannelpermission"},"function removeChannelPermission"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse removeChannelPermission(\n    Snowflake< Channel > channelID,\n    std::string ID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-sendtyping"},"function sendTyping"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse sendTyping(\n    Snowflake< Channel > channelID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getpinnedmessages"},"function getPinnedMessages"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Message > getPinnedMessages(\n    Snowflake< Channel > channelID,\n    RequestSettings< ArrayResponse< Message >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-pinmessage"},"function pinMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse pinMessage(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-unpinmessage"},"function unpinMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse unpinMessage(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-addrecipient"},"function addRecipient"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"StandardResponse addRecipient(\n    Snowflake< Channel > channelID,\n    Snowflake< User > userID,\n    RequestSettings< StandardResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-removerecipient"},"function removeRecipient"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"StandardResponse removeRecipient(\n    Snowflake< Channel > channelID,\n    Snowflake< User > userID,\n    RequestSettings< StandardResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-startthreadmessage"},"function startThreadMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > startThreadMessage(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    std::string name,\n    int autoArchiveDuration =0,\n    int rateLimitPerUser =-1,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-jointhread"},"function joinThread"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse joinThread(\n    Snowflake< Channel > channelID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-addthreadmember"},"function addThreadMember"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse addThreadMember(\n    Snowflake< Channel > channelID,\n    Snowflake< User > userID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-leavethread"},"function leaveThread"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse leaveThread(\n    Snowflake< Channel > channelID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-removethreadmember"},"function removeThreadMember"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse removeThreadMember(\n    Snowflake< Channel > channelID,\n    Snowflake< User > userID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getthreadmember"},"function getThreadMember"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< ThreadMember > getThreadMember(\n    Snowflake< Channel > channelID,\n    Snowflake< User > userID,\n    bool withMember =false,\n    RequestSettings< ObjectResponse< ThreadMember >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-deletereaction"},"function deleteReaction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline BoolResponse deleteReaction(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    std::string emoji\n)\n")),(0,i.kt)("h3",{id:"function-deleteallreactions"},"function deleteAllReactions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline StandardResponse deleteAllReactions(\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID\n)\n")),(0,i.kt)("h3",{id:"function-deletechannelpermission"},"function deleteChannelPermission"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline BoolResponse deleteChannelPermission(\n    Snowflake< Channel > channelID,\n    std::string ID\n)\n")),(0,i.kt)("h3",{id:"function-deleterecipient"},"function deleteRecipient"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline StandardResponse deleteRecipient(\n    Snowflake< Channel > channelID,\n    Snowflake< User > _userID\n)\n")),(0,i.kt)("h3",{id:"function-editmessage-2"},"function editMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline ObjectResponse< Message > editMessage(\n    Message message,\n    std::string newMessage,\n    std::vector< Embed > embeds ={}\n)\n")),(0,i.kt)("h3",{id:"function-sendmessage-3"},"function sendMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline ObjectResponse< Message > sendMessage(\n    Snowflake< Channel > channelID,\n    std::string message,\n    RequestSettings< ObjectResponse< Message >> settings\n)\n")),(0,i.kt)("h3",{id:"function-sendmessage-4"},"function sendMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline ObjectResponse< Message > sendMessage(\n    Snowflake< Channel > channelID,\n    std::string message\n)\n")),(0,i.kt)("h3",{id:"function-getserver"},"function getServer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Server > getServer(\n    Snowflake< Server > serverID,\n    RequestSettings< ObjectResponse< Server >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-deleteserver"},"function deleteServer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Server > deleteServer(\n    Snowflake< Server > serverID,\n    RequestSettings< ObjectResponse< Server >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getserverchannels"},"function getServerChannels"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Channel > getServerChannels(\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< Channel >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-createtextchannel"},"function createTextChannel"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > createTextChannel(\n    Snowflake< Server > serverID,\n    std::string name,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-createchannel"},"function createChannel"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > createChannel(\n    Snowflake< Server > serverID,\n    std::string name,\n    Channel::ChannelType Type,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editchannelpositions"},"function editChannelPositions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Channel > editChannelPositions(\n    Snowflake< Server > serverID,\n    std::vector< std::pair< std::string, uint64_t >> positions,\n    RequestSettings< ArrayResponse< Channel >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getmember"},"function getMember"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< ServerMember > getMember(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    RequestSettings< ObjectResponse< ServerMember >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-listmembers"},"function listMembers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'ArrayResponse< ServerMember > listMembers(\n    Snowflake< Server > serverID,\n    uint16_t limit =0,\n    std::string after ="",\n    RequestSettings< ArrayResponse< ServerMember >> settings ={}\n)\n')),(0,i.kt)("h3",{id:"function-addmember"},"function addMember"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< ServerMember > addMember(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    std::string accesToken,\n    std::string nick ="",\n    std::vector< Role > roles ={},\n    bool mute =false,\n    bool deaf =false\n)\n')),(0,i.kt)("h3",{id:"function-editmember"},"function editMember"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'BoolResponse editMember(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    std::string nickname ="",\n    std::vector< Snowflake< Role >> roles ={},\n    int8_t mute =-1,\n    int8_t deaf =-1,\n    Snowflake< Channel > channelID ={}\n)\n')),(0,i.kt)("h3",{id:"function-muteservermember"},"function muteServerMember"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse muteServerMember(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    bool mute =true,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editnickname"},"function editNickname"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse editNickname(\n    Snowflake< Server > serverID,\n    std::string newNickname,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-addrole"},"function addRole"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse addRole(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    Snowflake< Role > roleID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-removerole"},"function removeRole"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse removeRole(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    Snowflake< Role > roleID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-kickmember"},"function kickMember"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse kickMember(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getbans"},"function getBans"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< User > getBans(\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< User >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-banmember"},"function banMember"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'BoolResponse banMember(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    int deleteMessageDays =-1,\n    std::string reason ="",\n    RequestSettings< BoolResponse > settings ={}\n)\n')),(0,i.kt)("h3",{id:"function-unbanmember"},"function unbanMember"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse unbanMember(\n    Snowflake< Server > serverID,\n    Snowflake< User > userID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getroles"},"function getRoles"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Role > getRoles(\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< Role >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-createrole"},"function createRole"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Role > createRole(\n    Snowflake< Server > serverID,\n    std::string name ="",\n    Permission permissions =Permission::NONE,\n    unsigned int color =0,\n    bool hoist =false,\n    bool mentionable =false\n)\n')),(0,i.kt)("h3",{id:"function-editroleposition"},"function editRolePosition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Role > editRolePosition(\n    Snowflake< Server > serverID,\n    std::vector< std::pair< std::string, uint64_t >> positions,\n    RequestSettings< ArrayResponse< Role >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editrole"},"function editRole"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'StringResponse editRole(\n    Snowflake< Server > serverID,\n    Snowflake< Role > roleID,\n    std::string name ="",\n    Permission permissions =Permission::NONE,\n    uint32_t color =1<< 24,\n    int8_t hoist =-1,\n    int8_t mentionable =-1\n)\n')),(0,i.kt)("h3",{id:"function-deleterole"},"function deleteRole"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteRole(\n    Snowflake< Server > serverID,\n    Snowflake< Role > roleID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-prunemembers"},"function pruneMembers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"StandardResponse pruneMembers(\n    Snowflake< Server > serverID,\n    const unsigned int numOfDays,\n    RequestSettings< StandardResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getvoiceregions"},"function getVoiceRegions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< VoiceRegion > getVoiceRegions(\n    RequestSettings< ArrayResponse< VoiceRegion >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getserverinvites"},"function getServerInvites"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Invite > getServerInvites(\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< Invite >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getintegrations"},"function getIntegrations"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"StringResponse getIntegrations(\n    Snowflake< Server > serverID,\n    RequestSettings< StringResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-createintegration"},"function createIntegration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse createIntegration(\n    Snowflake< Server > serverID,\n    std::string type,\n    std::string integrationID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editintergration"},"function editIntergration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse editIntergration(\n    Snowflake< Server > serverID,\n    std::string integrationID,\n    int expireBegavior,\n    int expireGracePeriod,\n    bool enbleEmoticons\n)\n")),(0,i.kt)("h3",{id:"function-deleteintegration"},"function deleteIntegration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteIntegration(\n    Snowflake< Server > serverID,\n    std::string integrationID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-syncintegration"},"function syncIntegration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse syncIntegration(\n    Snowflake< Server > serverID,\n    std::string integrationID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getserverwidget"},"function getServerWidget"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< ServerWidget > getServerWidget(\n    Snowflake< Server > serverID,\n    RequestSettings< ObjectResponse< ServerWidget >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-inviteendpoint"},"function inviteEndpoint"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Invite > inviteEndpoint(\n    RequestMethod method,\n    std::string inviteCode,\n    RequestSettings< ObjectResponse< Invite >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getinvite"},"function getInvite"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Invite > getInvite(\n    std::string inviteCode,\n    RequestSettings< ObjectResponse< Invite >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-deleteinvite"},"function deleteInvite"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Invite > deleteInvite(\n    std::string inviteCode,\n    RequestSettings< ObjectResponse< Invite >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-acceptinvite"},"function acceptInvite"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Invite > acceptInvite(\n    std::string inviteCode,\n    RequestSettings< ObjectResponse< Invite >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getcurrentuser"},"function getCurrentUser"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< User > getCurrentUser(\n    RequestSettings< ObjectResponse< User >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getuser"},"function getUser"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< User > getUser(\n    Snowflake< User > userID,\n    RequestSettings< ObjectResponse< User >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getservers"},"function getServers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Server > getServers(\n    RequestSettings< ArrayResponse< Server >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-leaveserver"},"function leaveServer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse leaveServer(\n    Snowflake< Server > serverID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getdirectmessagechannels"},"function getDirectMessageChannels"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Channel > getDirectMessageChannels(\n    RequestSettings< ArrayResponse< Channel >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-createdirectmessagechannel"},"function createDirectMessageChannel"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Channel > createDirectMessageChannel(\n    std::string recipientID,\n    RequestSettings< ObjectResponse< Channel >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getuserconnections"},"function getUserConnections"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Connection > getUserConnections(\n    RequestSettings< ArrayResponse< Connection >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-createwebhook"},"function createWebhook"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Webhook > createWebhook(\n    Snowflake< Channel > channelID,\n    std::string name,\n    std::string avatar ="",\n    RequestSettings< ObjectResponse< Webhook >> settings ={}\n)\n')),(0,i.kt)("h3",{id:"function-getchannelwebhooks"},"function getChannelWebhooks"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Webhook > getChannelWebhooks(\n    Snowflake< Channel > channelID,\n    RequestSettings< ArrayResponse< Webhook >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getserverwebhooks"},"function getServerWebhooks"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< Webhook > getServerWebhooks(\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< Webhook >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getwebhook"},"function getWebhook"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Webhook > getWebhook(\n    Snowflake< Webhook > webhookID,\n    std::string webhookToken ="",\n    RequestSettings< ObjectResponse< Webhook >> settings ={}\n)\n')),(0,i.kt)("h3",{id:"function-editwebhook"},"function editWebhook"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Webhook > editWebhook(\n    Snowflake< Webhook > webhookID,\n    std::string webhookToken ="",\n    std::string name ="",\n    std::string avatar =""\n)\n')),(0,i.kt)("h3",{id:"function-deletewebhook"},"function deleteWebhook"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'BoolResponse deleteWebhook(\n    Snowflake< Webhook > webhookID,\n    std::string webhookToken ="",\n    RequestSettings< BoolResponse > settings ={}\n)\n')),(0,i.kt)("h3",{id:"function-requestexecutewebhook"},"function requestExecuteWebhook"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Webhook > requestExecuteWebhook(\n    Snowflake< Webhook > webhookID,\n    std::string webhookToken,\n    std::pair< std::string, std::string > pair,\n    bool wait,\n    std::string username,\n    std::string avatar_url,\n    bool tts\n)\n")),(0,i.kt)("h3",{id:"function-executewebhook"},"function executeWebhook"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Webhook > executeWebhook(\n    Snowflake< Webhook > webhookID,\n    std::string webhookToken,\n    std::string content,\n    bool wait =false,\n    std::string username ="",\n    std::string avatar_url ="",\n    bool tts =false\n)\n')),(0,i.kt)("h3",{id:"function-executewebhook-1"},"function executeWebhook"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Webhook > executeWebhook(\n    Snowflake< Webhook > webhookID,\n    std::string webhookToken,\n    std::vector< Embed > embeds,\n    bool wait =false,\n    std::string username ="",\n    std::string avatar_url ="",\n    bool tts =false\n)\n')),(0,i.kt)("h3",{id:"function-executewebhook-2"},"function executeWebhook"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'ObjectResponse< Webhook > executeWebhook(\n    Snowflake< Webhook > webhookID,\n    std::string webhookToken,\n    filePathPart file,\n    bool wait =false,\n    std::string username ="",\n    std::string avatar_url ="",\n    bool tts =false\n)\n')),(0,i.kt)("h3",{id:"function-createglobalappcommand"},"function createGlobalAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename Options  =const AppCommand::EmptyOptions>\ninline ObjectResponse< AppCommand > createGlobalAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    std::string name,\n    std::string description,\n    Options options =(std::nullptr_t) nullptr,\n    bool defaultPermission =true,\n    AppCommand::Type type =AppCommand::Type::NONE,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editglobalappcommand"},"function editGlobalAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename Options  =const AppCommand::EmptyOptions>\ninline ObjectResponse< AppCommand > editGlobalAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< AppCommand > commandID,\n    std::string name,\n    std::string description,\n    Options options =(std::nullptr_t) nullptr,\n    bool defaultPermission =true,\n    AppCommand::Type type =AppCommand::Type::NONE,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getglobalappcommands"},"function getGlobalAppCommands"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< AppCommand > getGlobalAppCommands(\n    Snowflake< DiscordObject >::RawType applicationID,\n    RequestSettings< ArrayResponse< AppCommand >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getglobalappcommand"},"function getGlobalAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< AppCommand > getGlobalAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< AppCommand > commandID,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-deleteglobalappcommand"},"function deleteGlobalAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteGlobalAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< AppCommand > commandID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-createserverappcommand"},"function createServerAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename Options  =const AppCommand::EmptyOptions>\ninline ObjectResponse< AppCommand > createServerAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    std::string name,\n    std::string description,\n    Options options =(std::nullptr_t) nullptr,\n    bool defaultPermission =true,\n    AppCommand::Type type =AppCommand::Type::NONE,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editserverappcommand"},"function editServerAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename Options  =const AppCommand::EmptyOptions>\ninline ObjectResponse< AppCommand > editServerAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    std::string name,\n    std::string description,\n    Options options =(std::nullptr_t) nullptr,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getserverappcommands"},"function getServerAppCommands"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< AppCommand > getServerAppCommands(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< AppCommand >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getserverappcommand"},"function getServerAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< AppCommand > getServerAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-deleteserverappcommand"},"function deleteServerAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteServerAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-createinteractionresponse"},"function createInteractionResponse"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename Type >\ninline BoolResponse createInteractionResponse(\n    Snowflake< Interaction > interactionID,\n    std::string token,\n    Type response,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editoriginalinteractionresponse"},"function editOriginalInteractionResponse"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > editOriginalInteractionResponse(\n    Snowflake< DiscordObject >::RawType applicationID,\n    std::string interactionToken,\n    EditWebhookParams params,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-deleteoriginalinteractionresponse"},"function deleteOriginalInteractionResponse"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteOriginalInteractionResponse(\n    Snowflake< DiscordObject >::RawType applicationID,\n    std::string interactionToken,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-createfollowupmessage"},"function createFollowupMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > createFollowupMessage(\n    Snowflake< DiscordObject >::RawType applicationID,\n    std::string interactionToken,\n    FollowupMessage params,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editfollowupmessage"},"function editFollowupMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< Message > editFollowupMessage(\n    Snowflake< DiscordObject >::RawType applicationID,\n    std::string interactionToken,\n    Snowflake< Message > messageID,\n    EditWebhookParams params,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-deletefollowupmessage"},"function deleteFollowupMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteFollowupMessage(\n    Snowflake< DiscordObject >::RawType applicationID,\n    std::string interactionToken,\n    Snowflake< Message > messageID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-batcheditappcommandpermissions"},"function batchEditAppCommandPermissions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse batchEditAppCommandPermissions(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    std::vector< ServerAppCommandPermissions > permissions,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("p",null,"Batch edits permissions for all commands in a guild. Takes an array of partial objects including id and permissions. ",(0,i.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/interactions/slash-commands#batch-edit-application-command-permissions"},"https://discord.com/developers/docs/interactions/slash-commands#batch-edit-application-command-permissions")),(0,i.kt)("h3",{id:"function-editserverappcommandpermission"},"function editServerAppCommandPermission"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse editServerAppCommandPermission(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    std::vector< AppCommand::Permissions > permissions,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("p",null,"Edits command permissions for a specific command for your application in a guild. ",(0,i.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/interactions/slash-commands#edit-application-command-permissions"},"https://discord.com/developers/docs/interactions/slash-commands#edit-application-command-permissions")),(0,i.kt)("h3",{id:"function-getserverappcommandpermissions"},"function getServerAppCommandPermissions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< ServerAppCommandPermissions > getServerAppCommandPermissions(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< ServerAppCommandPermissions >> settings ={}\n)\n")),(0,i.kt)("p",null,"Fetches command permissions for all commands for your application in a guild. ",(0,i.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/interactions/slash-commands#get-guild-application-command-permissions"},"https://discord.com/developers/docs/interactions/slash-commands#get-guild-application-command-permissions")),(0,i.kt)("h3",{id:"function-getappcommandpermissions"},"function getAppCommandPermissions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< ServerAppCommandPermissions > getAppCommandPermissions(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    RequestSettings< ObjectResponse< ServerAppCommandPermissions >> settings ={}\n)\n")),(0,i.kt)("p",null,"Fetches command permissions for a specific command for your application in a guild. ",(0,i.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/interactions/slash-commands#get-application-command-permissions"},"https://discord.com/developers/docs/interactions/slash-commands#get-application-command-permissions")),(0,i.kt)("h3",{id:"function-createappcommand"},"function createAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename Options  =const AppCommand::EmptyOptions>\ninline ObjectResponse< AppCommand > createAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    std::string name,\n    std::string description,\n    Options options =(std::nullptr_t) nullptr,\n    bool defaultPermission =true,\n    AppCommand::Type type =AppCommand::Type::NONE,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editappcommand"},"function editAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename Options  =const AppCommand::EmptyOptions>\ninline ObjectResponse< AppCommand > editAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    std::string name,\n    std::string description,\n    Options options =(std::nullptr_t) nullptr,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getappcommands"},"function getAppCommands"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ArrayResponse< AppCommand > getAppCommands(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    RequestSettings< ArrayResponse< AppCommand >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getappcommand"},"function getAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< AppCommand > getAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    RequestSettings< ObjectResponse< AppCommand >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-deleteappcommand"},"function deleteAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteAppCommand(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    Snowflake< AppCommand > commandID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-bulkoverwriteserverappcommands"},"function bulkOverwriteServerAppCommands"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse bulkOverwriteServerAppCommands(\n    Snowflake< DiscordObject >::RawType applicationID,\n    Snowflake< Server > serverID,\n    std::vector< AppCommand > commands,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-bulkoverwriteglobalappcommands"},"function bulkOverwriteGlobalAppCommands"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse bulkOverwriteGlobalAppCommands(\n    Snowflake< DiscordObject >::RawType applicationID,\n    std::vector< AppCommand > commands,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-createstageinstance"},"function createStageInstance"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< User > createStageInstance(\n    Snowflake< Channel > channelID,\n    std::string topic,\n    StageInstance::PrivacyLevel privacyLevel =StageInstance::PrivacyLevel::NotSet,\n    RequestSettings< ObjectResponse< User >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-getstageinstance"},"function getStageInstance"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ObjectResponse< StageInstance > getStageInstance(\n    Snowflake< Channel > channelID,\n    RequestSettings< ObjectResponse< StageInstance >> settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-editstageinstance"},"function editStageInstance"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse editStageInstance(\n    Snowflake< Channel > channelID,\n    std::string topic,\n    StageInstance::PrivacyLevel privacyLevel =StageInstance::PrivacyLevel::NotSet,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-deletestageinstance"},"function deleteStageInstance"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BoolResponse deleteStageInstance(\n    Snowflake< Channel > channelID,\n    RequestSettings< BoolResponse > settings ={}\n)\n")),(0,i.kt)("h3",{id:"function-updatestatus"},"function updateStatus"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'void updateStatus(\n    std::string gameName ="",\n    uint64_t idleSince =0,\n    Status status =online,\n    bool afk =false\n)\n')),(0,i.kt)("h3",{id:"function-requestservermembers"},"function requestServerMembers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void requestServerMembers(\n    ServerMembersRequest request\n)\n")),(0,i.kt)("h3",{id:"function-getserverbanner"},"function getServerBanner"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void getServerBanner(\n    Snowflake< Server > serverID,\n    std::string serverBanner,\n    std::string format,\n    std::function< void(StandardResponse &)> callback\n)\n")),(0,i.kt)("h3",{id:"function-getserverbanner-1"},"function getServerBanner"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline void getServerBanner(\n    Server & server,\n    std::string format\n)\n")),(0,i.kt)("h3",{id:"function-waittilready"},"function waitTilReady"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void waitTilReady()\n")),(0,i.kt)("h3",{id:"function-isready"},"function isReady"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const bool isReady()\n")),(0,i.kt)("h3",{id:"function-isquiting"},"function isQuiting"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const bool isQuiting()\n")),(0,i.kt)("h3",{id:"function-isbot"},"function isBot"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const bool isBot()\n")),(0,i.kt)("h3",{id:"function-getid"},"function getID"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const Snowflake< User > getID()\n")),(0,i.kt)("h3",{id:"function-setshardid"},"function setShardID"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void setShardID(\n    int _shardID,\n    int _shardCount\n)\n")),(0,i.kt)("h3",{id:"function-getshardid"},"function getShardID"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const int getShardID()\n")),(0,i.kt)("h3",{id:"function-getshardcount"},"function getShardCount"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const int getShardCount()\n")),(0,i.kt)("h3",{id:"function-hasintents"},"function hasIntents"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const bool hasIntents()\n")),(0,i.kt)("h3",{id:"function-getintents"},"function getIntents"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const IntentsRaw getIntents()\n")),(0,i.kt)("h3",{id:"function-setintents"},"function setIntents"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline void setIntents(\n    IntentsRaw newIntents\n)\n")),(0,i.kt)("h3",{id:"function-quit"},"function quit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline void quit()\n")),(0,i.kt)("h3",{id:"function-run"},"function run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void run()\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplemented by"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_u_web_sockets_discord_client#function-run"},"SleepyDiscord::UWebSocketsDiscordClient::run"),", ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-run"},"SleepyDiscord::WebsocketppDiscordClient::run")),(0,i.kt)("h3",{id:"function-setintents-1"},"function setIntents"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Container ,\ntypename T  =typename Container::value_type>\ninline void setIntents(\n    const Container & listOfIntents\n)\n")),(0,i.kt)("h3",{id:"function-setintents-2"},"function setIntents"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename... Types>\ninline void setIntents(\n    Intent first,\n    Intent second,\n    Types... others\n)\n")),(0,i.kt)("h3",{id:"function-usecompression"},"function useCompression"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Handler ,\nclass... Types>\ninline void useCompression(\n    Types &&... arguments\n)\n")),(0,i.kt)("h3",{id:"function-usecompression-1"},"function useCompression"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline void useCompression(\n    bool value =true\n)\n")),(0,i.kt)("h3",{id:"function-setschedulehandler"},"function setScheduleHandler"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Handler ,\nclass... Types>\ninline void setScheduleHandler(\n    Types &&... arguments\n)\n")),(0,i.kt)("h3",{id:"function-getschedulehandler"},"function getScheduleHandler"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline GenericScheduleHandler & getScheduleHandler()\n")),(0,i.kt)("h3",{id:"function-schedule"},"function schedule"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual Timer schedule(\n    TimedTask code,\n    const time_t millisecondsTilDueTime\n)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplemented by"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_u_web_sockets_discord_client#function-schedule"},"SleepyDiscord::UWebSocketsDiscordClient::schedule"),", ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-schedule"},"SleepyDiscord::WebsocketppDiscordClient::schedule")),(0,i.kt)("h3",{id:"function-schedule-1"},"function schedule"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Timer schedule(\n    TimedTask code,\n    const time_t milliseconds,\n    AssignmentType mode\n)\n")),(0,i.kt)("h3",{id:"function-schedule-2"},"function schedule"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Timer schedule(\n    void(BaseDiscordClient::*)() code,\n    const time_t milliseconds,\n    AssignmentType mode =TilDueTime\n)\n")),(0,i.kt)("h3",{id:"function-unschedule"},"function unschedule"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline void unschedule(\n    Timer & timer\n)\n")),(0,i.kt)("h3",{id:"function-posttask"},"function postTask"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void postTask(\n    PostableTask code\n)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplemented by"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-posttask"},"SleepyDiscord::WebsocketppDiscordClient::postTask")),(0,i.kt)("h3",{id:"function-createservercache"},"function createServerCache"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"std::shared_ptr< ServerCache > createServerCache()\n")),(0,i.kt)("h3",{id:"function-setservercache"},"function setServerCache"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void setServerCache(\n    std::shared_ptr< ServerCache > cache\n)\n")),(0,i.kt)("h3",{id:"function-getservercache"},"function getServerCache"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline std::shared_ptr< ServerCache > & getServerCache()\n")),(0,i.kt)("h3",{id:"function-getcdn_url"},"function getCDN_URL"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"static inline constexpr nonstd::string_view getCDN_URL()\n")),(0,i.kt)("h2",{id:"protected-functions-documentation"},"Protected Functions Documentation"),(0,i.kt)("h3",{id:"function-ondepletedrequestsupply"},"function onDepletedRequestSupply"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDepletedRequestSupply(\n    const Route::Bucket & bucket,\n    double timeTilReset\n)\n")),(0,i.kt)("h3",{id:"function-onexceededratelimit"},"function onExceededRateLimit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onExceededRateLimit(\n    bool global,\n    double timeTilRetry,\n    Request request,\n    bool & continueRequest\n)\n")),(0,i.kt)("h3",{id:"function-onready"},"function onReady"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onReady(\n    Ready readyData\n)\n")),(0,i.kt)("h3",{id:"function-onresumed"},"function onResumed"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onResumed()\n")),(0,i.kt)("h3",{id:"function-ondeleteserver"},"function onDeleteServer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDeleteServer(\n    UnavailableServer server\n)\n")),(0,i.kt)("h3",{id:"function-oneditserver"},"function onEditServer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditServer(\n    Server server\n)\n")),(0,i.kt)("h3",{id:"function-onban"},"function onBan"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onBan(\n    Snowflake< Server > serverID,\n    User user\n)\n")),(0,i.kt)("h3",{id:"function-onunban"},"function onUnban"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onUnban(\n    Snowflake< Server > serverID,\n    User user\n)\n")),(0,i.kt)("h3",{id:"function-onmember"},"function onMember"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onMember(\n    Snowflake< Server > serverID,\n    ServerMember member\n)\n")),(0,i.kt)("h3",{id:"function-onremovemember"},"function onRemoveMember"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onRemoveMember(\n    Snowflake< Server > serverID,\n    User user\n)\n")),(0,i.kt)("h3",{id:"function-oneditmember"},"function onEditMember"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditMember(\n    Snowflake< Server > serverID,\n    User user,\n    std::vector< Snowflake< Role >> roles,\n    std::string nick\n)\n")),(0,i.kt)("h3",{id:"function-onrole"},"function onRole"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onRole(\n    Snowflake< Server > serverID,\n    Role role\n)\n")),(0,i.kt)("h3",{id:"function-ondeleterole"},"function onDeleteRole"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDeleteRole(\n    Snowflake< Server > serverID,\n    Snowflake< Role > roleID\n)\n")),(0,i.kt)("h3",{id:"function-oneditrole"},"function onEditRole"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditRole(\n    Snowflake< Server > serverID,\n    Role role\n)\n")),(0,i.kt)("h3",{id:"function-oneditemojis"},"function onEditEmojis"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditEmojis(\n    Snowflake< Server > serverID,\n    std::vector< Emoji > emojis\n)\n")),(0,i.kt)("h3",{id:"function-onmemberchunk"},"function onMemberChunk"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onMemberChunk(\n    ServerMembersChunk memberChunk\n)\n")),(0,i.kt)("h3",{id:"function-ondeletechannel"},"function onDeleteChannel"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDeleteChannel(\n    Channel channel\n)\n")),(0,i.kt)("h3",{id:"function-oneditchannel"},"function onEditChannel"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditChannel(\n    Channel channel\n)\n")),(0,i.kt)("h3",{id:"function-onpinmessage"},"function onPinMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onPinMessage(\n    Snowflake< Channel > channelID,\n    std::string lastPinTimestamp\n)\n")),(0,i.kt)("h3",{id:"function-onthread"},"function onThread"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onThread(\n    Channel channel\n)\n")),(0,i.kt)("h3",{id:"function-onthreadupdate"},"function onThreadUpdate"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onThreadUpdate(\n    Channel channel\n)\n")),(0,i.kt)("h3",{id:"function-ondeletethread"},"function onDeleteThread"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onDeleteThread(\n    Channel channel\n)\n")),(0,i.kt)("h3",{id:"function-onthreadlistsync"},"function onThreadListSync"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onThreadListSync(\n    ThreadListSync sync\n)\n")),(0,i.kt)("h3",{id:"function-oneditthreadmember"},"function onEditThreadMember"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onEditThreadMember(\n    ThreadMember member,\n    Snowflake< Server > serverID\n)\n")),(0,i.kt)("h3",{id:"function-oneditthreadmembers"},"function onEditThreadMembers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onEditThreadMembers(\n    ThreadMembersUpdate update\n)\n")),(0,i.kt)("h3",{id:"function-onpresenceupdate"},"function onPresenceUpdate"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onPresenceUpdate(\n    PresenceUpdate presenseUpdate\n)\n")),(0,i.kt)("h3",{id:"function-onedituser"},"function onEditUser"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditUser(\n    User user\n)\n")),(0,i.kt)("h3",{id:"function-oneditusersettings"},"function onEditUserSettings"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditUserSettings(\n    const json::Value & jsonMessage\n)\n")),(0,i.kt)("h3",{id:"function-oneditvoicestate"},"function onEditVoiceState"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditVoiceState(\n    VoiceState & state\n)\n")),(0,i.kt)("h3",{id:"function-ontyping"},"function onTyping"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onTyping(\n    Snowflake< Channel > channelID,\n    Snowflake< User > userID,\n    time_t timestamp\n)\n")),(0,i.kt)("h3",{id:"function-ondeletemessages"},"function onDeleteMessages"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDeleteMessages(\n    Snowflake< Channel > channelID,\n    std::vector< Snowflake< Message >> messages\n)\n")),(0,i.kt)("h3",{id:"function-oneditmessage"},"function onEditMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditMessage(\n    MessageRevisions revisioins\n)\n")),(0,i.kt)("h3",{id:"function-oneditvoiceserver"},"function onEditVoiceServer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onEditVoiceServer(\n    VoiceServerUpdate & update\n)\n")),(0,i.kt)("h3",{id:"function-onreaction"},"function onReaction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onReaction(\n    Snowflake< User > userID,\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    Emoji emoji\n)\n")),(0,i.kt)("h3",{id:"function-ondeletereaction"},"function onDeleteReaction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDeleteReaction(\n    Snowflake< User > userID,\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID,\n    Emoji emoji\n)\n")),(0,i.kt)("h3",{id:"function-ondeleteallreaction"},"function onDeleteAllReaction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDeleteAllReaction(\n    Snowflake< Server > serverID,\n    Snowflake< Channel > channelID,\n    Snowflake< Message > messageID\n)\n")),(0,i.kt)("h3",{id:"function-onmessage"},"function onMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onMessage(\n    Message message\n)\n")),(0,i.kt)("h3",{id:"function-onserver"},"function onServer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onServer(\n    Server server\n)\n")),(0,i.kt)("h3",{id:"function-onchannel"},"function onChannel"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onChannel(\n    Channel channel\n)\n")),(0,i.kt)("h3",{id:"function-oninteraction"},"function onInteraction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onInteraction(\n    Interaction interaction\n)\n")),(0,i.kt)("h3",{id:"function-onappcommand"},"function onAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onAppCommand(\n    AppCommand appCommand\n)\n")),(0,i.kt)("h3",{id:"function-oneditappcommand"},"function onEditAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onEditAppCommand(\n    AppCommand appCommand\n)\n")),(0,i.kt)("h3",{id:"function-ondeleteappcommand"},"function onDeleteAppCommand"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onDeleteAppCommand(\n    AppCommand appCommand\n)\n")),(0,i.kt)("h3",{id:"function-onstageinstance"},"function onStageInstance"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onStageInstance(\n    StageInstance instance\n)\n")),(0,i.kt)("h3",{id:"function-ondeletestageinstance"},"function onDeleteStageInstance"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onDeleteStageInstance(\n    StageInstance instance\n)\n")),(0,i.kt)("h3",{id:"function-oneditstageinstance"},"function onEditStageInstance"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onEditStageInstance(\n    StageInstance instance\n)\n")),(0,i.kt)("h3",{id:"function-onunknownevent"},"function onUnknownEvent"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onUnknownEvent(\n    std::string name,\n    const json::Value & data\n)\n")),(0,i.kt)("h3",{id:"function-ondispatch"},"function onDispatch"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onDispatch(\n    const json::Value & t,\n    json::Value & d\n)\n")),(0,i.kt)("h3",{id:"function-onheartbeat"},"function onHeartbeat"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onHeartbeat()\n")),(0,i.kt)("h3",{id:"function-onheartbeatack"},"function onHeartbeatAck"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onHeartbeatAck()\n")),(0,i.kt)("h3",{id:"function-oninvaldsession"},"function onInvaldSession"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onInvaldSession()\n")),(0,i.kt)("h3",{id:"function-ondisconnect"},"function onDisconnect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onDisconnect()\n")),(0,i.kt)("h3",{id:"function-onresume"},"function onResume"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onResume()\n")),(0,i.kt)("h3",{id:"function-onquit"},"function onQuit"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onQuit()\n")),(0,i.kt)("h3",{id:"function-onrestart"},"function onRestart"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void onRestart()\n")),(0,i.kt)("h3",{id:"function-onresponse"},"function onResponse"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onResponse(\n    Response response\n)\n")),(0,i.kt)("h3",{id:"function-sleep"},"function sleep"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void sleep(\n    const unsigned int milliseconds\n)\n")),(0,i.kt)("h3",{id:"function-fileread"},"function fileRead"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void fileRead(\n    const char * path,\n    std::string *const file\n)\n")),(0,i.kt)("h3",{id:"function-tick"},"function tick"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void tick(\n    float deltaTime\n)\n")),(0,i.kt)("h3",{id:"function-onerror"},"function onError"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void onError(\n    ErrorCode errorCode,\n    const std::string errorMessage\n)\n")),(0,i.kt)("h3",{id:"function-processmessage"},"function processMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void processMessage(\n    const std::string & message\n) override\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#function-processmessage"},"SleepyDiscord::GenericMessageReceiver::processMessage")),(0,i.kt)("h3",{id:"function-processmessage-1"},"function processMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void processMessage(\n    const WebSocketMessage message\n) override\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#function-processmessage"},"SleepyDiscord::GenericMessageReceiver::processMessage")),(0,i.kt)("h3",{id:"function-processclosecode"},"function processCloseCode"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void processCloseCode(\n    const int16_t code\n) override\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#function-processclosecode"},"SleepyDiscord::GenericMessageReceiver::processCloseCode")),(0,i.kt)("h3",{id:"function-heartbeat"},"function heartbeat"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void heartbeat()\n")),(0,i.kt)("h3",{id:"function-sendheartbeat"},"function sendHeartbeat"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline void sendHeartbeat()\n")),(0,i.kt)("h3",{id:"function-resetheartbeatvalues"},"function resetHeartbeatValues"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void resetHeartbeatValues()\n")),(0,i.kt)("h3",{id:"function-gettoken"},"function getToken"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline std::string getToken()\n")),(0,i.kt)("h3",{id:"function-settoken"},"function setToken"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline void setToken(\n    const std::string & value\n)\n")),(0,i.kt)("h3",{id:"function-start"},"function start"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void start(\n    const std::string _token,\n    const char maxNumOfThreads =DEFAULT_THREADS,\n    int _shardID =0,\n    int _shardCount =0\n)\n")),(0,i.kt)("h3",{id:"function-connect"},"function connect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline void connect()\n")),(0,i.kt)("h3",{id:"function-connect-1"},"function connect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual bool connect(\n    const std::string & ,\n    GenericMessageReceiver * ,\n    WebsocketConnection & \n)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplemented by"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-connect"},"SleepyDiscord::WebsocketppDiscordClient::connect")),(0,i.kt)("h3",{id:"function-handlefailtoconnect"},"function handleFailToConnect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void handleFailToConnect() override\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver#function-handlefailtoconnect"},"SleepyDiscord::GenericMessageReceiver::handleFailToConnect")),(0,i.kt)("h3",{id:"function-send"},"function send"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void send(\n    std::string ,\n    WebsocketConnection & \n)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplemented by"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-send"},"SleepyDiscord::WebsocketppDiscordClient::send")),(0,i.kt)("h3",{id:"function-disconnect"},"function disconnect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void disconnect(\n    unsigned int ,\n    const std::string ,\n    WebsocketConnection & \n)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplemented by"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-disconnect"},"SleepyDiscord::WebsocketppDiscordClient::disconnect")),(0,i.kt)("h3",{id:"function-reconnect"},"function reconnect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void reconnect(\n    const unsigned int status =4900\n)\n")),(0,i.kt)("h3",{id:"function-stopclient"},"function stopClient"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void stopClient()\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplemented by"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-stopclient"},"SleepyDiscord::WebsocketppDiscordClient::stopClient")),(0,i.kt)("h3",{id:"function-initialize"},"function initialize"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline void initialize(\n    GenericMessageReceiver *& messageProcessor\n) const\n")),(0,i.kt)("h3",{id:"function-processmessage-2"},"function processMessage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline void processMessage(\n    GenericMessageReceiver *& messageProcessor,\n    const std::string & message\n) const\n")),(0,i.kt)("h3",{id:"function-processclosecode-1"},"function processCloseCode"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline void processCloseCode(\n    GenericMessageReceiver *& messageProcessor,\n    const int16_t & code\n) const\n")),(0,i.kt)("h3",{id:"function-runasync"},"function runAsync"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void runAsync()\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplemented by"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_u_web_sockets_discord_client#function-runasync"},"SleepyDiscord::UWebSocketsDiscordClient::runAsync"),", ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client#function-runasync"},"SleepyDiscord::WebsocketppDiscordClient::runAsync")),(0,i.kt)("h3",{id:"function-getepochtimemillisecond"},"function getEpochTimeMillisecond"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual const time_t getEpochTimeMillisecond()\n")),(0,i.kt)("h3",{id:"function-getepochtimesecond"},"function getEpochTimeSecond"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual const double getEpochTimeSecond()\n")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);