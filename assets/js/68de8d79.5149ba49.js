"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[7405],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,k=u["".concat(i,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(k,s(s({ref:t},d),{},{components:n})):r.createElement(k,s({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8959:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),s=["components"],c={title:"include/sleepy_discord/uwebsockets_websocket.h"},i=void 0,l={unversionedId:"reference/Files/uwebsockets__websocket_8h",id:"reference/Files/uwebsockets__websocket_8h",title:"include/sleepy_discord/uwebsockets_websocket.h",description:"Namespaces",source:"@site/docs/reference/Files/uwebsockets__websocket_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/uwebsockets__websocket_8h",permalink:"/sleepy-discord/docs/reference/Files/uwebsockets__websocket_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/uwebsockets_websocket.h"},sidebar:"Reference",previous:{title:"sleepy_discord/uwebsockets_websocket.cpp",permalink:"/sleepy-discord/docs/reference/Files/uwebsockets__websocket_8cpp"},next:{title:"sleepy_discord/version.cpp",permalink:"/sleepy-discord/docs/reference/Files/version_8cpp"}},d=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Types",id:"types",children:[],level:2},{value:"Defines",id:"defines",children:[],level:2},{value:"Types Documentation",id:"types-documentation",children:[{value:"typedef DiscordClient",id:"typedef-discordclient",children:[],level:3}],level:2},{value:"Macro Documentation",id:"macro-documentation",children:[{value:"define SLEEPY_UWEBSOCKETS",id:"define-sleepy_uwebsockets",children:[],level:3},{value:"define SLEEPY_LOCK_EXISTENT_TO",id:"define-sleepy_lock_existent_to",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],p={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"namespaces"},"Namespaces"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,o.kt)("h2",{id:"classes"},"Classes"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"class"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_u_web_sockets_discord_client"},"SleepyDiscord::UWebSocketsDiscordClient")))))),(0,o.kt)("h2",{id:"types"},"Types"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"typedef UWebSocketsDiscordClient"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/uwebsockets__websocket_8h#typedef-discordclient"},"DiscordClient")))))),(0,o.kt)("h2",{id:"defines"},"Defines"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/uwebsockets__websocket_8h#define-sleepy_uwebsockets"},"SLEEPY_UWEBSOCKETS")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/uwebsockets__websocket_8h#define-sleepy_lock_existent_to"},"SLEEPY_LOCK_EXISTENT_TO")))))),(0,o.kt)("h2",{id:"types-documentation"},"Types Documentation"),(0,o.kt)("h3",{id:"typedef-discordclient"},"typedef DiscordClient"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef WebsocketppDiscordClient SleepyDiscord::DiscordClient;\n")),(0,o.kt)("h2",{id:"macro-documentation"},"Macro Documentation"),(0,o.kt)("h3",{id:"define-sleepy_uwebsockets"},"define SLEEPY_UWEBSOCKETS"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#define SLEEPY_UWEBSOCKETS 563146\n")),(0,o.kt)("h3",{id:"define-sleepy_lock_existent_to"},"define SLEEPY_LOCK_EXISTENT_TO"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#define SLEEPY_LOCK_EXISTENT_TO SLEEPY_UWEBSOCKETS\n")),(0,o.kt)("h2",{id:"source-code"},"Source code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#if !defined(NONEXISTENT_UWEBSOCKETS) | defined(EXISTENT_UWEBSOCKETS)\n#include <uWS/uWS.h>\n#endif\n#ifndef NONEXISTENT_UWEBSOCKETS\n#include <thread>\n#define SLEEPY_UWEBSOCKETS 563146 //random number that\'s only used once in the code\n#define SLEEPY_LOCK_EXISTENT_TO SLEEPY_UWEBSOCKETS //stops the compiler from defining things from other libraries\n#include "client.h"\n\nnamespace SleepyDiscord {\n    class UWebSocketsDiscordClient : public BaseDiscordClient {\n    public:\n        UWebSocketsDiscordClient() : maxNumOfThreads(0) {}\n        UWebSocketsDiscordClient(const std::string token, const char numOfThreads = 3);\n        ~UWebSocketsDiscordClient();\n        void run();\n        Timer schedule(std::function<void()> code, const time_t milliseconds);\n    protected:\n#include "standard_config_header.h"\n    private:\n        uWS::Hub hub;\n        bool connect(const std::string & uri, GenericMessageReceiver* messageProcessor, WebsocketConnection* connection);\n        void disconnect(unsigned int code, const std::string reason, WebsocketConnection* connection);\n        void send(std::string message, WebsocketConnection* connection);\n        void runAsync();\n        std::thread thread;\n        const char maxNumOfThreads;\n        bool isConnectionBad = false;\n        SLEEPY_LOCK_CLIENT_FUNCTIONS\n    };\n\n    typedef UWebSocketsDiscordClient DiscordClient;\n}\n#undef SLEEPY_UWEBSOCKETS\n#undef SLEEPY_LOCK_TO_UWEBSOCKETS\n#endif\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);