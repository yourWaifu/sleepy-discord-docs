"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[7480],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,c=function(e,t){if(null==e)return{};var n,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,c=e.mdxType,a=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(n),m=c,h=u["".concat(i,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(h,s(s({ref:t},p),{},{components:n})):r.createElement(h,s({ref:t},p))}));function m(e,t){var n=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var a=n.length,s=new Array(a);s[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:c,s[1]=o;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5799:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var r=n(3117),c=n(102),a=(n(7294),n(3905)),s=["components"],o={title:"sleepy_discord/http.cpp"},i=void 0,l={unversionedId:"reference/Files/http_8cpp",id:"reference/Files/http_8cpp",title:"sleepy_discord/http.cpp",description:"Namespaces",source:"@site/docs/reference/Files/http_8cpp.md",sourceDirName:"reference/Files",slug:"/reference/Files/http_8cpp",permalink:"/sleepy-discord/docs/reference/Files/http_8cpp",tags:[],version:"current",frontMatter:{title:"sleepy_discord/http.cpp"},sidebar:"Reference",previous:{title:"include/sleepy_discord/generic_compression.h",permalink:"/sleepy-discord/docs/reference/Files/generic__compression_8h"},next:{title:"include/sleepy_discord/http.h",permalink:"/sleepy-discord/docs/reference/Files/http_8h"}},p=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Functions",id:"functions",children:[],level:2},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function getMethodName",id:"function-getmethodname",children:[],level:3},{value:"function escapeURL",id:"function-escapeurl",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,c.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"namespaces"},"Namespaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"const char *"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/http_8cpp#function-getmethodname"},"getMethodName")),"(const RequestMethod & method)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"std::string"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/http_8cpp#function-escapeurl"},"escapeURL")),"(const std::string & string)")))),(0,a.kt)("h2",{id:"functions-documentation"},"Functions Documentation"),(0,a.kt)("h3",{id:"function-getmethodname"},"function getMethodName"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"const char * getMethodName(\n    const RequestMethod & method\n)\n")),(0,a.kt)("h3",{id:"function-escapeurl"},"function escapeURL"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string escapeURL(\n    const std::string & string\n)\n")),(0,a.kt)("h2",{id:"source-code"},"Source code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <cctype>\n#include <array>\n#include \"http.h\"\n\nnamespace SleepyDiscord {\n    //copied from cpr\n    bool caseInsensitiveCompare::operator()(const std::string& a, const std::string& b) const noexcept {\n        return std::lexicographical_compare(\n            a.begin(), a.end(), b.begin(), b.end(),\n            [](unsigned char ac, unsigned char bc) { return std::tolower(ac) < std::tolower(bc); });\n    }\n\n    const char * getMethodName(const RequestMethod & method) {\n        static constexpr char const * methodNames[] = { \"POST\", \"PATCH\", \"DELETE\", \"GET\", \"PUT\" };\n        return methodNames[method];\n    }\n\n    std::string escapeURL(const std::string& string) {\n        if (string.empty())\n            return string;\n        std::string target;\n        target.reserve(string.length());\n\n        static const auto isUrlUnresered = [](unsigned char character) {\n            //copied from libcurl\n            switch(character) {\n            case '0': case '1': case '2': case '3': case '4':\n            case '5': case '6': case '7': case '8': case '9':\n            case 'a': case 'b': case 'c': case 'd': case 'e':\n            case 'f': case 'g': case 'h': case 'i': case 'j':\n            case 'k': case 'l': case 'm': case 'n': case 'o':\n            case 'p': case 'q': case 'r': case 's': case 't':\n            case 'u': case 'v': case 'w': case 'x': case 'y': case 'z':\n            case 'A': case 'B': case 'C': case 'D': case 'E':\n            case 'F': case 'G': case 'H': case 'I': case 'J':\n            case 'K': case 'L': case 'M': case 'N': case 'O':\n            case 'P': case 'Q': case 'R': case 'S': case 'T':\n            case 'U': case 'V': case 'W': case 'X': case 'Y': case 'Z':\n            case '-': case '.': case '_': case '~':\n                return true;\n            default:\n                return false;\n            }\n        };\n\n        for (const auto sym : string) {\n            const unsigned char character = \n                static_cast<const unsigned char>(sym);\n            if (isUrlUnresered(character)) {\n                target += character;\n            } else {\n                //encode\n                static const std::array<char, 0xF + 1> hexConvert = {{\n                    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n                    'A', 'B', 'C', 'D', 'E', 'F'\n                }};\n                const std::array<char, 4> encoded {{\n                    '%',\n                    hexConvert[((0xF << 4) & sym) >> 4],\n                    hexConvert[0xF & sym],\n                    0\n                }};\n                target.append(encoded.data());\n            }\n        }\n        return target;\n    }\n}\n")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);