"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[7205],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var o=t(7294);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,c=function(e,n){if(null==e)return{};var t,o,c={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var l=o.createContext({}),a=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=a(e.components);return o.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,c=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=a(t),u=c,_=m["".concat(l,".").concat(u)]||m[u]||d[u]||r;return t?o.createElement(_,s(s({ref:n},p),{},{components:t})):o.createElement(_,s({ref:n},p))}));function u(e,n){var t=arguments,c=n&&n.mdxType;if("string"==typeof e||c){var r=t.length,s=new Array(r);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:c,s[1]=i;for(var a=2;a<r;a++)s[a]=t[a];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4332:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return a},toc:function(){return p},default:function(){return m}});var o=t(3117),c=t(102),r=(t(7294),t(3905)),s=["components"],i={title:"sleepy_discord/websocketpp_websocket.cpp"},l=void 0,a={unversionedId:"reference/Files/websocketpp__websocket_8cpp",id:"reference/Files/websocketpp__websocket_8cpp",title:"sleepy_discord/websocketpp_websocket.cpp",description:"Namespaces",source:"@site/docs/reference/Files/websocketpp__websocket_8cpp.md",sourceDirName:"reference/Files",slug:"/reference/Files/websocketpp__websocket_8cpp",permalink:"/sleepy-discord/docs/reference/Files/websocketpp__websocket_8cpp",tags:[],version:"current",frontMatter:{title:"sleepy_discord/websocketpp_websocket.cpp"},sidebar:"Reference",previous:{title:"include/sleepy_discord/websocketpp_connection.h",permalink:"/sleepy-discord/docs/reference/Files/websocketpp__connection_8h"},next:{title:"include/sleepy_discord/websocketpp_websocket.h",permalink:"/sleepy-discord/docs/reference/Files/websocketpp__websocket_8h"}},p=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Functions",id:"functions",children:[],level:2},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function handleTimer",id:"function-handletimer",children:[],level:3},{value:"function handleTimers",id:"function-handletimers",children:[],level:3},{value:"function rerunTimer",id:"function-reruntimer",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:p};function m(e){var n=e.components,t=(0,c.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"namespaces"},"Namespaces"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"void"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/websocketpp__websocket_8cpp#function-handletimer"},"handleTimer")),"(const websocketpp::lib::error_code & ec, std::function< void()> & code)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"void"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/websocketpp__websocket_8cpp#function-handletimers"},"handleTimers")),"(const websocketpp::lib::error_code & ec, std::function< void()> & code, _client::timer_ptr timer)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"template <class Client ",">"," ",(0,r.kt)("br",null),"void"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/websocketpp__websocket_8cpp#function-reruntimer"},"rerunTimer")),"(_client::timer_ptr timer, TimedTask code, Client & c)")))),(0,r.kt)("h2",{id:"functions-documentation"},"Functions Documentation"),(0,r.kt)("h3",{id:"function-handletimer"},"function handleTimer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void handleTimer(\n    const websocketpp::lib::error_code & ec,\n    std::function< void()> & code\n)\n")),(0,r.kt)("h3",{id:"function-handletimers"},"function handleTimers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void handleTimers(\n    const websocketpp::lib::error_code & ec,\n    std::function< void()> & code,\n    _client::timer_ptr timer\n)\n")),(0,r.kt)("h3",{id:"function-reruntimer"},"function rerunTimer"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Client >\nvoid rerunTimer(\n    _client::timer_ptr timer,\n    TimedTask code,\n    Client & c\n)\n")),(0,r.kt)("h2",{id:"source-code"},"Source code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "websocketpp_websocket.h"\n#ifndef NONEXISTENT_WEBSOCKETPP\n#include <future>\n\nnamespace SleepyDiscord {\n    void handleTimer(const websocketpp::lib::error_code &ec, std::function<void()>& code) {\n        if (ec != websocketpp::transport::error::operation_aborted) {\n            code();\n        }\n    }\n\n    Timer WebsocketppScheduleHandler::schedule(TimedTask code, const time_t milliseconds) {\n        auto timer = client.set_timer(\n            static_cast<long>(milliseconds),\n            websocketpp::lib::bind(&handleTimer, websocketpp::lib::placeholders::_1, code)\n        );\n        return Timer([timer]() {\n            timer->cancel();\n        });\n    }\n\n    WebsocketppDiscordClient::WebsocketppDiscordClient(const std::string token, const char numOfThreads) :\n        _thread(nullptr)\n    {\n        init();\n        setScheduleHandler<WebsocketppScheduleHandler>(this_client);\n        start(token, numOfThreads);\n    }\n\n    WebsocketppDiscordClient::~WebsocketppDiscordClient() {\n        if (_thread != nullptr && _thread->joinable()) _thread->join();\n        else _thread.reset();\n    }\n\n    void WebsocketppDiscordClient::init() {\n        // set up access channels to only log interesting things\n        this_client.clear_access_channels(websocketpp::log::alevel::all);\n        this_client.set_access_channels(websocketpp::log::alevel::connect);\n        this_client.set_access_channels(websocketpp::log::alevel::disconnect);\n        this_client.set_access_channels(websocketpp::log::alevel::app);\n\n        this_client.set_tls_init_handler([](websocketpp::connection_hdl) {\n            return websocketpp::lib::make_shared<asio::ssl::context>(asio::ssl::context::tls);\n        });\n\n        // Initialize the Asio transport policy\n        this_client.init_asio();\n        this_client.start_perpetual();\n    }\n\n    bool WebsocketppDiscordClient::connect(const std::string & uri,\n        GenericMessageReceiver* messageProcessor,\n        WebsocketConnection& _connection\n    ) {\n        // Create a new connection to the given URI\n        websocketpp::lib::error_code ec;\n        // Note: there\'s might be a memory leak caused by get_connection\n        _client::connection_ptr con = this_client.get_connection(uri, ec);\n\n        if (ec) {\n            onError(GENERAL_ERROR, "Connect initialization: " + ec.message());\n            return false;\n        }\n\n        con->set_open_handler(std::bind(&WebsocketppDiscordClient::onOpen, this,\n            websocketpp::lib::placeholders::_1, messageProcessor\n        ));\n\n        con->set_close_handler(std::bind(&WebsocketppDiscordClient::onClose, this,\n            websocketpp::lib::placeholders::_1, messageProcessor\n        ));\n\n        con->set_message_handler(std::bind(&WebsocketppDiscordClient::onMessage, this,\n            websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2,\n            messageProcessor\n        ));\n\n        con->set_fail_handler(std::bind(&WebsocketppDiscordClient::onFail, this,\n            websocketpp::lib::placeholders::_1, messageProcessor\n        ));\n\n#ifdef SLEEPY_WEBSCOKETPP_PRINTALL\n        this_client.set_access_channels(websocketpp::log::alevel::all);\n        this_client.set_error_channels(websocketpp::log::alevel::all);\n#endif\n\n        if (_connection.expired() == false)\n            _connection.reset();\n\n        _connection = con->get_handle();\n        // Queue the connection. No DNS queries or network connections will be\n        // made until the io_service event loop is run.\n        this_client.connect(con);\n        return true;\n    }\n\n    void WebsocketppDiscordClient::run() {\n        BaseDiscordClient::connect();\n        this_client.run();\n    }\n\n    void handleTimers(const websocketpp::lib::error_code &ec, std::function<void()>& code, _client::timer_ptr timer) {\n        if (ec != websocketpp::transport::error::operation_aborted) {\n            code();\n        }\n    }\n\n    template<class Client>\n    void rerunTimer(_client::timer_ptr timer, TimedTask code, Client& c) {\n        timer->async_wait(\n            std::bind(\n                &_client::type::handle_timer,\n                c.this_client,\n                timer,\n                std::bind(\n                    &handleTimers, websocketpp::lib::placeholders::_1, code, timer),\n                websocketpp::lib::placeholders::_1\n            )\n        );\n    }\n\n    Timer WebsocketppDiscordClient::schedule(TimedTask code, const time_t milliseconds) {\n        _client::timer_ptr timer;\n        auto callback = std::bind(\n            &handleTimers, websocketpp::lib::placeholders::_1, code, timer);\n        timer = this_client.set_timer(\n            static_cast<long>(milliseconds),\n            callback\n        );\n\n        return Timer(\n            [timer]() {\n                timer->cancel();\n            }\n        );\n    }\n\n    void WebsocketppDiscordClient::runAsync() {\n        if (!_thread) _thread.reset(new websocketpp::lib::thread(&WebsocketppDiscordClient::run, this));\n    }\n\n    void WebsocketppDiscordClient::onFail(websocketpp::connection_hdl _handle, GenericMessageReceiver* messageProcessor) {\n        messageProcessor->handleFailToConnect();\n    }\n\n    void WebsocketppDiscordClient::send(std::string message, WebsocketConnection& _connection) {\n        websocketpp::lib::error_code error;\n        this_client.send(_connection, message, websocketpp::frame::opcode::text, error);\n        //temp solution: ingnore all errors\n        //Besides the library can detect bad connections by itself anyway\n    }\n\n    void WebsocketppDiscordClient::onOpen(websocketpp::connection_hdl hdl,\n        GenericMessageReceiver* messageProcessor) {\n        initialize(messageProcessor);\n    }\n\n    void WebsocketppDiscordClient::onMessage(\n        websocketpp::connection_hdl hdl,\n        websocketpp::config::asio_client::message_type::ptr msg,\n        GenericMessageReceiver* messageProcessor) {\n        messageProcessor->processMessage(WebSocketMessage{\n            static_cast<WebSocketMessage::OPCodeType>(msg->get_opcode()),\n            msg->get_payload(),\n            msg\n        });\n    }\n\n    //UDPClient WebsocketppDiscordClient::createUDPClient() {\n    //  return UDPClient(this_client.get_io_service());\n    //}\n    \n    void WebsocketppDiscordClient::disconnect(\n        unsigned int code,\n        const std::string reason,\n        WebsocketConnection& _connection\n    ) {\n        if (!_connection.expired()) {\n            websocketpp::lib::error_code error;\n            this_client.close(_connection, static_cast<websocketpp::close::status::value>(code), reason, error);\n            //temp fix ignore errors\n        }\n        std::cout << "disconnect\\n";\n    }\n\n    void WebsocketppDiscordClient::onClose(websocketpp::connection_hdl _handle,\n        GenericMessageReceiver* messageProcessor) {\n        _client::connection_ptr con = this_client.get_con_from_hdl(_handle);\n        const int16_t closeCode = con->get_remote_close_code();\n        std::cout << "Close " << closeCode << \' \' << con->get_remote_close_reason() << \'\\n\';\n        messageProcessor->processCloseCode(closeCode);\n    }\n\n#include "standard_config.h"\n}\n#endif\n')),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}m.isMDXComponent=!0}}]);