"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[7798],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=p(r),f=o,y=d["".concat(l,".").concat(f)]||d[f]||s[f]||a;return r?n.createElement(y,i(i({ref:t},u),{},{components:r})):n.createElement(y,i({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9697:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var n=r(3117),o=r(102),a=(r(7294),r(3905)),i=["components"],c={title:"SleepyDiscord::Cache::iterator"},l=void 0,p={unversionedId:"reference/Classes/class_sleepy_discord_1_1_cache_1_1iterator",id:"reference/Classes/class_sleepy_discord_1_1_cache_1_1iterator",title:"SleepyDiscord::Cache::iterator",description:"Public Types Documentation",source:"@site/docs/reference/Classes/class_sleepy_discord_1_1_cache_1_1iterator.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/class_sleepy_discord_1_1_cache_1_1iterator",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_cache_1_1iterator",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::Cache::iterator"},sidebar:"Reference",previous:{title:"SleepyDiscord::Cache::const_iterator",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_cache_1_1const__iterator"},next:{title:"SleepyDiscord::CustomSession",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_custom_session"}},u=[{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using Value",id:"using-value",children:[],level:3},{value:"using self_type",id:"using-self_type",children:[],level:3},{value:"using value_type",id:"using-value_type",children:[],level:3},{value:"using reference",id:"using-reference",children:[],level:3},{value:"using pointer",id:"using-pointer",children:[],level:3},{value:"using iterator_category",id:"using-iterator_category",children:[],level:3},{value:"using difference_type",id:"using-difference_type",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function iterator",id:"function-iterator",children:[],level:3},{value:"function operator++",id:"function-operator",children:[],level:3},{value:"function operator++",id:"function-operator-1",children:[],level:3},{value:"function operator*",id:"function-operator-2",children:[],level:3},{value:"function operator-&gt;",id:"function-operator-",children:[],level:3},{value:"function operator==",id:"function-operator-3",children:[],level:3},{value:"function operator!=",id:"function-operator-4",children:[],level:3},{value:"function operator const_iterator",id:"function-operator-const_iterator",children:[],level:3},{value:"function getParent",id:"function-getparent",children:[],level:3}],level:2}],s={toc:u};function d(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,a.kt)("h3",{id:"using-value"},"using Value"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::iterator::Value =  typename Parent::iterator;\n")),(0,a.kt)("h3",{id:"using-self_type"},"using self_type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::iterator::self_type =  iterator;\n")),(0,a.kt)("h3",{id:"using-value_type"},"using value_type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::iterator::value_type =  Type;\n")),(0,a.kt)("h3",{id:"using-reference"},"using reference"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::iterator::reference =  Type&;\n")),(0,a.kt)("h3",{id:"using-pointer"},"using pointer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::iterator::pointer =  Type*;\n")),(0,a.kt)("h3",{id:"using-iterator_category"},"using iterator_category"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::iterator::iterator_category =  typename Value::iterator_category;\n")),(0,a.kt)("h3",{id:"using-difference_type"},"using difference_type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::iterator::difference_type =  typename Value::difference_type;\n")),(0,a.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,a.kt)("h3",{id:"function-iterator"},"function iterator"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline iterator(\n    Value iter\n)\n")),(0,a.kt)("h3",{id:"function-operator"},"function operator++"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline self_type operator++()\n")),(0,a.kt)("h3",{id:"function-operator-1"},"function operator++"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline self_type operator++(\n    int junk\n)\n")),(0,a.kt)("h3",{id:"function-operator-2"},"function operator*"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline reference operator*()\n")),(0,a.kt)("h3",{id:"function-operator-"},"function operator->"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline pointer operator->()\n")),(0,a.kt)("h3",{id:"function-operator-3"},"function operator=="),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline bool operator==(\n    const self_type & right\n)\n")),(0,a.kt)("h3",{id:"function-operator-4"},"function operator!="),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline bool operator!=(\n    const self_type & right\n)\n")),(0,a.kt)("h3",{id:"function-operator-const_iterator"},"function operator const_iterator"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline operator const_iterator()\n")),(0,a.kt)("h3",{id:"function-getparent"},"function getParent"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Value getParent()\n")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}d.isMDXComponent=!0}}]);