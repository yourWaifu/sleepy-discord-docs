"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[3178],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return h}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(t),h=o,k=u["".concat(i,".").concat(h)]||u[h]||p[h]||a;return t?r.createElement(k,s(s({ref:n},d),{},{components:t})):r.createElement(k,s({ref:n},d))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=u;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6246:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var r=t(3117),o=t(102),a=(t(7294),t(3905)),s=["components"],c={title:"include/sleepy_discord/webhook.h"},i=void 0,l={unversionedId:"reference/Files/webhook_8h",id:"reference/Files/webhook_8h",title:"include/sleepy_discord/webhook.h",description:"Namespaces",source:"@site/docs/reference/Files/webhook_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/webhook_8h",permalink:"/sleepy-discord/docs/reference/Files/webhook_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/webhook.h"},sidebar:"Reference",previous:{title:"sleepy_discord/webhook.cpp",permalink:"/sleepy-discord/docs/reference/Files/webhook_8cpp"},next:{title:"include/sleepy_discord/websocket.h",permalink:"/sleepy-discord/docs/reference/Files/websocket_8h"}},d=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],p={toc:d};function u(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"namespaces"},"Namespaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,a.kt)("h2",{id:"classes"},"Classes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_webhook"},"SleepyDiscord::Webhook")))))),(0,a.kt)("h2",{id:"source-code"},"Source code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include "discord_object_interface.h"\n#include "user.h"\n#include "server.h"\n#include "channel.h"\n#include "snowflake.h"\n\nnamespace SleepyDiscord {\n    /*Webhook Structure\n    Field       Type        Description\n    id          snowflake   the id of the webhook\n    guild_id    snowflake?  the guild id this webhook is for\n    channel_id  snowflake   the channel id this webhook is for\n    user        User?       the user this webhook was created by (not returned when getting a webhook with its token)\n    name        ?string     the default name of the webhook\n    avatar      ?string     the default avatar of the webhook\n    token       string      the secure token of the webhook\n    */\n    struct Webhook : public IdentifiableDiscordObject<Webhook> {\n    public:\n        Webhook() = default;\n        Webhook(const json::Value & json);\n        Webhook(const nonstd::string_view& json) :\n            Webhook(json::fromJSON<Webhook>(json)) {}\n\n        enum WebhookType {\n            INCOMING = 1,\n            CHANNEL_FOLLOWER = 2,\n        };\n        WebhookType type = static_cast<WebhookType>(0);\n        Snowflake<Server> serverID;\n        Snowflake<Channel> channelID;\n        User user;\n        std::string name;\n        std::string avatar;\n        std::string token;\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&Webhook::ID       , "id"        , json::REQUIRIED_FIELD),\n                json::pair(&Webhook::serverID , "guild_id"  , json::OPTIONAL_FIELD ),\n                json::pair(&Webhook::channelID, "channel_id", json::REQUIRIED_FIELD),\n                json::pair(&Webhook::user     , "user"      , json::OPTIONAL_FIELD ),\n                json::pair(&Webhook::name     , "name"      , json::NULLABLE_FIELD ),\n                json::pair(&Webhook::avatar   , "avatar"    , json::NULLABLE_FIELD ),\n                json::pair(&Webhook::token    , "token"     , json::OPTIONAL_FIELD )\n            );\n        JSONStructEnd\n    };\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);