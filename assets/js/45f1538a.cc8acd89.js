"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[8598],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var r=o.createContext({}),s=function(e){var n=o.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(r.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,r=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=s(t),d=i,k=f["".concat(r,".").concat(d)]||f[d]||p[d]||l;return t?o.createElement(k,a(a({ref:n},u),{},{components:t})):o.createElement(k,a({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,a=new Array(l);a[0]=f;var c={};for(var r in n)hasOwnProperty.call(n,r)&&(c[r]=n[r]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var s=2;s<l;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2440:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return r},metadata:function(){return s},toc:function(){return u},default:function(){return f}});var o=t(3117),i=t(102),l=(t(7294),t(3905)),a=["components"],c={title:"SleepyDiscord::Snowflake"},r=void 0,s={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_snowflake",id:"reference/Classes/struct_sleepy_discord_1_1_snowflake",title:"SleepyDiscord::Snowflake",description:"More...",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_snowflake.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_snowflake",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_snowflake",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::Snowflake"},sidebar:"Reference",previous:{title:"SleepyDiscord::SessionStartLimit",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_session_start_limit"},next:{title:"SleepyDiscord::Snowflake::HasAFindFunction",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_snowflake_1_1_has_a_find_function"}},u=[{value:"Detailed Description",id:"detailed-description",children:[],level:2},{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using RawType",id:"using-rawtype",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function Snowflake",id:"function-snowflake",children:[],level:3},{value:"function Snowflake",id:"function-snowflake-1",children:[],level:3},{value:"function Snowflake",id:"function-snowflake-2",children:[],level:3},{value:"function Snowflake",id:"function-snowflake-3",children:[],level:3},{value:"function Snowflake",id:"function-snowflake-4",children:[],level:3},{value:"function Snowflake",id:"function-snowflake-5",children:[],level:3},{value:"function Snowflake",id:"function-snowflake-6",children:[],level:3},{value:"function Snowflake",id:"function-snowflake-7",children:[],level:3},{value:"function Snowflake",id:"function-snowflake-8",children:[],level:3},{value:"function Snowflake",id:"function-snowflake-9",children:[],level:3},{value:"function ~Snowflake",id:"function-snowflake-10",children:[],level:3},{value:"function operator==",id:"function-operator",children:[],level:3},{value:"function operator!=",id:"function-operator-1",children:[],level:3},{value:"function operator==",id:"function-operator-2",children:[],level:3},{value:"function operator!=",id:"function-operator-3",children:[],level:3},{value:"function operator const std::string &amp;",id:"function-operator-const-stdstring-",children:[],level:3},{value:"function string",id:"function-string",children:[],level:3},{value:"function number",id:"function-number",children:[],level:3},{value:"function timestamp",id:"function-timestamp",children:[],level:3},{value:"function empty",id:"function-empty",children:[],level:3},{value:"function serialize",id:"function-serialize",children:[],level:3},{value:"function findObject",id:"function-findobject",children:[],level:3},{value:"function findObject",id:"function-findobject-1",children:[],level:3},{value:"function findObject",id:"function-findobject-2",children:[],level:3},{value:"function findObject",id:"function-findobject-3",children:[],level:3},{value:"function isType",id:"function-istype",children:[],level:3}],level:2}],p={toc:u};function f(e){var n=e.components,t=(0,i.Z)(e,a);return(0,l.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"#detailed-description"},"More...")),(0,l.kt)("h2",{id:"detailed-description"},"Detailed Description"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename DiscordObject >\nstruct SleepyDiscord::Snowflake;\n")),(0,l.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,l.kt)("h3",{id:"using-rawtype"},"using RawType"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Snowflake< DiscordObject >::RawType =  std::string;\n")),(0,l.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,l.kt)("h3",{id:"function-snowflake"},"function Snowflake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"Snowflake() =default\n")),(0,l.kt)("h3",{id:"function-snowflake-1"},"function Snowflake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Snowflake(\n    const std::string & snow\n)\n")),(0,l.kt)("h3",{id:"function-snowflake-2"},"function Snowflake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Snowflake(\n    const std::string * snow\n)\n")),(0,l.kt)("h3",{id:"function-snowflake-3"},"function Snowflake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Snowflake(\n    const char * snow\n)\n")),(0,l.kt)("h3",{id:"function-snowflake-4"},"function Snowflake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Snowflake(\n    const nonstd::string_view & snow\n)\n")),(0,l.kt)("h3",{id:"function-snowflake-5"},"function Snowflake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Snowflake(\n    const Snowflake & flake\n)\n")),(0,l.kt)("h3",{id:"function-snowflake-6"},"function Snowflake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Snowflake(\n    const DiscordObject & object\n)\n")),(0,l.kt)("h3",{id:"function-snowflake-7"},"function Snowflake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Snowflake(\n    const DiscordObject * object\n)\n")),(0,l.kt)("h3",{id:"function-snowflake-8"},"function Snowflake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Snowflake(\n    const int64_t number\n)\n")),(0,l.kt)("h3",{id:"function-snowflake-9"},"function Snowflake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Snowflake(\n    const json::Value & value\n)\n")),(0,l.kt)("h3",{id:"function-snowflake-10"},"function ~Snowflake"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"~Snowflake() =default\n")),(0,l.kt)("h3",{id:"function-operator"},"function operator=="),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline bool operator==(\n    const Snowflake & right\n) const\n")),(0,l.kt)("h3",{id:"function-operator-1"},"function operator!="),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline bool operator!=(\n    const Snowflake & right\n) const\n")),(0,l.kt)("h3",{id:"function-operator-2"},"function operator=="),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline bool operator==(\n    const char * right\n) const\n")),(0,l.kt)("h3",{id:"function-operator-3"},"function operator!="),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline bool operator!=(\n    const char * right\n) const\n")),(0,l.kt)("h3",{id:"function-operator-const-stdstring-"},"function operator const std::string &"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline operator const std::string &() const\n")),(0,l.kt)("h3",{id:"function-string"},"function string"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const std::string & string() const\n")),(0,l.kt)("h3",{id:"function-number"},"function number"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const int64_t number() const\n")),(0,l.kt)("h3",{id:"function-timestamp"},"function timestamp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline std::chrono::time_point< std::chrono::steady_clock > timestamp() const\n")),(0,l.kt)("h3",{id:"function-empty"},"function empty"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const bool empty() const\n")),(0,l.kt)("h3",{id:"function-serialize"},"function serialize"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline json::Value serialize(\n    typename json::Value::AllocatorType & alloc\n) const\n")),(0,l.kt)("h3",{id:"function-findobject"},"function findObject"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class iterator >\ninline iterator findObject(\n    iterator begin,\n    iterator end\n) const\n")),(0,l.kt)("h3",{id:"function-findobject-1"},"function findObject"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Container >\ninline auto findObject(\n    Container & objects,\n    std::true_type \n) const\n")),(0,l.kt)("h3",{id:"function-findobject-2"},"function findObject"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Container >\ninline auto findObject(\n    Container & objects,\n    std::false_type \n) const\n")),(0,l.kt)("h3",{id:"function-findobject-3"},"function findObject"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Container >\ninline auto findObject(\n    Container & objects\n) const\n")),(0,l.kt)("h3",{id:"function-istype"},"function isType"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"static inline const bool isType(\n    const typename json::Value & value\n)\n")),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}f.isMDXComponent=!0}}]);