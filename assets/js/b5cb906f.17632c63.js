"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[9877],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(n),f=a,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||i;return n?r.createElement(m,l(l({ref:t},p),{},{components:n})):r.createElement(m,l({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2190:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),l=["components"],o={title:"include/sleepy_discord/asio_udp.h"},c=void 0,s={unversionedId:"reference/Files/asio__udp_8h",id:"reference/Files/asio__udp_8h",title:"include/sleepy_discord/asio_udp.h",description:"Namespaces",source:"@site/docs/reference/Files/asio__udp_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/asio__udp_8h",permalink:"/sleepy-discord/docs/reference/Files/asio__udp_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/asio_udp.h"},sidebar:"Reference",previous:{title:"sleepy_discord/asio_udp.cpp",permalink:"/sleepy-discord/docs/reference/Files/asio__udp_8cpp"},next:{title:"sleepy_discord/attachment.cpp",permalink:"/sleepy-discord/docs/reference/Files/attachment_8cpp"}},p=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Types",id:"types",children:[],level:2},{value:"Types Documentation",id:"types-documentation",children:[{value:"typedef UDPClient",id:"typedef-udpclient",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"namespaces"},"Namespaces"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,i.kt)("h2",{id:"classes"},"Classes"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"class"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_a_s_i_o_u_d_p_client"},"SleepyDiscord::ASIOUDPClient")))))),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"typedef ASIOUDPClient"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/asio__udp_8h#typedef-udpclient"},"UDPClient")))))),(0,i.kt)("h2",{id:"types-documentation"},"Types Documentation"),(0,i.kt)("h3",{id:"typedef-udpclient"},"typedef UDPClient"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef CustomUDPClient SleepyDiscord::UDPClient;\n")),(0,i.kt)("h2",{id:"source-code"},"Source code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include "asio_include.h"\n#ifndef NONEXISTENT_ASIO\n#include "udp.h"\n\nnamespace SleepyDiscord {\n\n    class BaseDiscordClient;\n\n    class ASIOUDPClient : public GenericUDPClient {\n    public:\n        //ASIOUDPClient();\n        ASIOUDPClient(BaseDiscordClient& client);\n        ASIOUDPClient(asio::io_service& service);\n        bool connect(const std::string& to  , const uint16_t port) override;\n        void send(\n            const uint8_t* buffer,\n            size_t bufferLength,\n            SendHandler handler = []() {}\n        ) override;\n        void receive(ReceiveHandler handler) override;\n    private:\n        asio::io_service* iOService;\n        asio::ip::udp::socket uDPSocket;\n        asio::ip::udp::resolver resolver;\n        asio::ip::udp::endpoint endpoint;\n\n        void handle_receive(const std::error_code &, std::size_t bytes_transferred, ReceiveHandler handler);\n\n        constexpr static std::size_t bufferSize = 1 << 16;\n        uint8_t buffer[bufferSize];\n    };\n\n    typedef ASIOUDPClient UDPClient;\n};\n#endif\n')),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);