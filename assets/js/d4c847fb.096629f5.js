"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[421],{3905:function(e,r,n){n.d(r,{Zo:function(){return l},kt:function(){return p}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function c(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?c(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},c=Object.keys(e);for(t=0;t<c.length;t++)n=c[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)n=c[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=t.createContext({}),d=function(e){var r=t.useContext(a),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},l=function(e){var r=d(e.components);return t.createElement(a.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,c=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=d(n),p=o,_=f["".concat(a,".").concat(p)]||f[p]||u[p]||c;return n?t.createElement(_,i(i({ref:r},l),{},{components:n})):t.createElement(_,i({ref:r},l))}));function p(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var c=n.length,i=new Array(c);i[0]=f;var s={};for(var a in r)hasOwnProperty.call(r,a)&&(s[a]=r[a]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var d=2;d<c;d++)i[d]=n[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2772:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return s},contentTitle:function(){return a},metadata:function(){return d},toc:function(){return l},default:function(){return f}});var t=n(3117),o=n(102),c=(n(7294),n(3905)),i=["components"],s={title:"include/sleepy_discord/standard_config.h"},a=void 0,d={unversionedId:"reference/Files/standard__config_8h",id:"reference/Files/standard__config_8h",title:"include/sleepy_discord/standard_config.h",description:"Source code",source:"@site/docs/reference/Files/standard__config_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/standard__config_8h",permalink:"/sleepy-discord/docs/reference/Files/standard__config_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/standard_config.h"},sidebar:"Reference",previous:{title:"include/sleepy_discord/stage_instance.h",permalink:"/sleepy-discord/docs/reference/Files/stage__instance_8h"},next:{title:"include/sleepy_discord/standard_config_header.h",permalink:"/sleepy-discord/docs/reference/Files/standard__config__header_8h"}},l=[{value:"Source code",id:"source-code",children:[],level:2}],u={toc:l};function f(e){var r=e.components,n=(0,o.Z)(e,i);return(0,c.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"source-code"},"Source code"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#ifndef SLEEPY_DO_NOT_INCLUDE_STANDARD_ONERROR\nvoid DiscordClient::onError(SleepyDiscord::ErrorCode errorCode, const std::string errorMessage) {\n    if (errorCode != 0)\n        std::cout << "Error " << errorCode << ": " + errorMessage + \'\\n\';\n    else\n        std::cout << "Error: " + errorMessage + \'\\n\';\n}\n#endif\n\n#ifndef SLEEPY_DO_NOT_INCLUDE_STANDARD_SLEEP\nvoid DiscordClient::sleep(const unsigned int milliseconds) {\n    std::this_thread::sleep_for(std::chrono::milliseconds(milliseconds));\n}\n#endif\n')),(0,c.kt)("hr",null),(0,c.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}f.isMDXComponent=!0}}]);