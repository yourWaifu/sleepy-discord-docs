"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[3153],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),p=l(n),f=a,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||i;return n?r.createElement(m,o(o({ref:t},s),{},{components:n})):r.createElement(m,o({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8139:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),o=["components"],u={title:"SleepyDiscord::BaseAudioSource"},c=void 0,l={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_base_audio_source",id:"reference/Classes/struct_sleepy_discord_1_1_base_audio_source",title:"SleepyDiscord::BaseAudioSource",description:"Inherited by SleepyDiscord::BasicAudioSourceForContainers",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_base_audio_source.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_base_audio_source",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_audio_source",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::BaseAudioSource"},sidebar:"Reference",previous:{title:"SleepyDiscord::BaseAudioOutput",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_audio_output"},next:{title:"SleepyDiscord::BaseComponent",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component"}},s=[{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"enum SpeakingFlag",id:"enum-speakingflag",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function BaseAudioSource",id:"function-baseaudiosource",children:[],level:3},{value:"function BaseAudioSource",id:"function-baseaudiosource-1",children:[],level:3},{value:"function isOpusEncoded",id:"function-isopusencoded",children:[],level:3},{value:"function ~BaseAudioSource",id:"function-baseaudiosource-2",children:[],level:3},{value:"function read",id:"function-read",children:[],level:3}],level:2},{value:"Public Attributes Documentation",id:"public-attributes-documentation",children:[{value:"variable type",id:"variable-type",children:[],level:3},{value:"variable speakingFlag",id:"variable-speakingflag",children:[],level:3}],level:2}],d={toc:s};function p(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Inherited by ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_basic_audio_source_for_containers"},"SleepyDiscord::BasicAudioSourceForContainers")),(0,i.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,i.kt)("h3",{id:"enum-speakingflag"},"enum SpeakingFlag"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Enumerator"),(0,i.kt)("th",{parentName:"tr",align:null},"Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Microphone"),(0,i.kt)("td",{parentName:"tr",align:null},"1u << 0u"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Soundshare"),(0,i.kt)("td",{parentName:"tr",align:null},"1u << 1u"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Priority"),(0,i.kt)("td",{parentName:"tr",align:null},"1u << 2u"),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,i.kt)("h3",{id:"function-baseaudiosource"},"function BaseAudioSource"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline BaseAudioSource()\n")),(0,i.kt)("h3",{id:"function-baseaudiosource-1"},"function BaseAudioSource"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline explicit BaseAudioSource(\n    AudioSourceType typ\n)\n")),(0,i.kt)("h3",{id:"function-isopusencoded"},"function isOpusEncoded"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual bool isOpusEncoded()\n")),(0,i.kt)("h3",{id:"function-baseaudiosource-2"},"function ~BaseAudioSource"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual ~BaseAudioSource() =default\n")),(0,i.kt)("h3",{id:"function-read"},"function read"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void read(\n    AudioTransmissionDetails & ,\n    int16_t *& ,\n    std::size_t & \n)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplemented by"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_audio_source#function-read"},"SleepyDiscord::AudioSource::read"),", ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_audio_source#function-read"},"SleepyDiscord::AudioSource::read")),(0,i.kt)("h2",{id:"public-attributes-documentation"},"Public Attributes Documentation"),(0,i.kt)("h3",{id:"variable-type"},"variable type"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"const AudioSourceType type;\n")),(0,i.kt)("h3",{id:"variable-speakingflag"},"variable speakingFlag"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"SpeakingFlag speakingFlag = Microphone;\n")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}p.isMDXComponent=!0}}]);