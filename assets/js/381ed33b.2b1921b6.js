"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[68],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return E}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function d(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),u=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=u(t.components);return a.createElement(o.Provider,{value:e},t.children)},g={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},s=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,p=d(t,["components","mdxType","originalType","parentName"]),s=u(n),E=r,m=s["".concat(o,".").concat(E)]||s[E]||g[E]||l;return n?a.createElement(m,i(i({ref:e},p),{},{components:n})):a.createElement(m,i({ref:e},p))}));function E(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=s;var d={};for(var o in e)hasOwnProperty.call(e,o)&&(d[o]=e[o]);d.originalType=t,d.mdxType="string"==typeof t?t:r,i[1]=d;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},3962:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return d},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return p},default:function(){return s}});var a=n(3117),r=n(102),l=(n(7294),n(3905)),i=["components"],d={title:"include/sleepy_discord/audit_log.h"},o=void 0,u={unversionedId:"reference/Files/audit__log_8h",id:"reference/Files/audit__log_8h",title:"include/sleepy_discord/audit_log.h",description:"Namespaces",source:"@site/docs/reference/Files/audit__log_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/audit__log_8h",permalink:"/sleepy-discord/docs/reference/Files/audit__log_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/audit_log.h"},sidebar:"Reference",previous:{title:"include/sleepy_discord/attachment.h",permalink:"/sleepy-discord/docs/reference/Files/attachment_8h"},next:{title:"include/sleepy_discord/beast_session.h",permalink:"/sleepy-discord/docs/reference/Files/beast__session_8h"}},p=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Types",id:"types",children:[],level:2},{value:"Types Documentation",id:"types-documentation",children:[{value:"enum AuditLogEvent",id:"enum-auditlogevent",children:[],level:3},{value:"using AuditLogKey",id:"using-auditlogkey",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],g={toc:p};function s(t){var e=t.components,n=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,a.Z)({},g,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"namespaces"},"Namespaces"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,l.kt)("h2",{id:"classes"},"Classes"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_audit_log_key_data"},"SleepyDiscord::AuditLogKeyData")))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"struct"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_audit_log"},"SleepyDiscord::AuditLog")))))),(0,l.kt)("h2",{id:"types"},"Types"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null},"Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"enum"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/audit__log_8h#enum-auditlogevent"},"AuditLogEvent"))," { GUILD_UPDATE = 1, CHANNEL_CREATE = 10, CHANNEL_UPDATE = 11, CHANNEL_DELETE = 12, CHANNEL_OVERWRITE_CREATE = 13, CHANNEL_OVERWRITE_UPDATE = 14, CHANNEL_OVERWRITE_DELETE = 15, MEMBER_KICK = 20, MEMBER_PRUNE = 21, MEMBER_BAN_ADD = 22, MEMBER_BAN_REMOVE = 23, MEMBER_UPDATE = 24, MEMBER_ROLE_UPDATE = 25, ROLE_CREATE = 30, ROLE_UPDATE = 31, ROLE_DELETE = 32, INVITE_CREATE = 40, INVITE_UPDATE = 41, INVITE_DELETE = 42, WEBHOOK_CREATE = 50, WEBHOOK_UPDATE = 51, WEBHOOK_DELETE = 52, EMOJI_CREATE = 60, EMOJI_UPDATE = 61, EMOJI_DELETE = 62, MESSAGE_DELETE = 72}")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"template <typename template< class, class > Data,ObjectChanged ,Type ",">"," ",(0,l.kt)("br",null),"using std::pair< std::string, Data< ObjectChanged, Type > >"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},(0,l.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/audit__log_8h#using-auditlogkey"},"AuditLogKey")))))),(0,l.kt)("h2",{id:"types-documentation"},"Types Documentation"),(0,l.kt)("h3",{id:"enum-auditlogevent"},"enum AuditLogEvent"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Enumerator"),(0,l.kt)("th",{parentName:"tr",align:null},"Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GUILD_UPDATE"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CHANNEL_CREATE"),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CHANNEL_UPDATE"),(0,l.kt)("td",{parentName:"tr",align:null},"11"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CHANNEL_DELETE"),(0,l.kt)("td",{parentName:"tr",align:null},"12"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CHANNEL_OVERWRITE_CREATE"),(0,l.kt)("td",{parentName:"tr",align:null},"13"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CHANNEL_OVERWRITE_UPDATE"),(0,l.kt)("td",{parentName:"tr",align:null},"14"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"CHANNEL_OVERWRITE_DELETE"),(0,l.kt)("td",{parentName:"tr",align:null},"15"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MEMBER_KICK"),(0,l.kt)("td",{parentName:"tr",align:null},"20"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MEMBER_PRUNE"),(0,l.kt)("td",{parentName:"tr",align:null},"21"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MEMBER_BAN_ADD"),(0,l.kt)("td",{parentName:"tr",align:null},"22"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MEMBER_BAN_REMOVE"),(0,l.kt)("td",{parentName:"tr",align:null},"23"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MEMBER_UPDATE"),(0,l.kt)("td",{parentName:"tr",align:null},"24"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MEMBER_ROLE_UPDATE"),(0,l.kt)("td",{parentName:"tr",align:null},"25"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ROLE_CREATE"),(0,l.kt)("td",{parentName:"tr",align:null},"30"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ROLE_UPDATE"),(0,l.kt)("td",{parentName:"tr",align:null},"31"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ROLE_DELETE"),(0,l.kt)("td",{parentName:"tr",align:null},"32"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"INVITE_CREATE"),(0,l.kt)("td",{parentName:"tr",align:null},"40"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"INVITE_UPDATE"),(0,l.kt)("td",{parentName:"tr",align:null},"41"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"INVITE_DELETE"),(0,l.kt)("td",{parentName:"tr",align:null},"42"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WEBHOOK_CREATE"),(0,l.kt)("td",{parentName:"tr",align:null},"50"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WEBHOOK_UPDATE"),(0,l.kt)("td",{parentName:"tr",align:null},"51"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"WEBHOOK_DELETE"),(0,l.kt)("td",{parentName:"tr",align:null},"52"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"EMOJI_CREATE"),(0,l.kt)("td",{parentName:"tr",align:null},"60"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"EMOJI_UPDATE"),(0,l.kt)("td",{parentName:"tr",align:null},"61"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"EMOJI_DELETE"),(0,l.kt)("td",{parentName:"tr",align:null},"62"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MESSAGE_DELETE"),(0,l.kt)("td",{parentName:"tr",align:null},"72"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"using-auditlogkey"},"using AuditLogKey"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename template< class, class > Data,\nObjectChanged ,\nType >\nusing SleepyDiscord::AuditLogKey = typedef std::pair<std::string, Data<ObjectChanged, Type> >;\n")),(0,l.kt)("h2",{id:"source-code"},"Source code"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include "webhook.h"\n#include "user.h"\n#include "server.h"\n#include <tuple>\n#include <utility>\n\nnamespace SleepyDiscord {\n    enum class AuditLogEvent {\n        GUILD_UPDATE             = 1,\n        CHANNEL_CREATE           = 10,\n        CHANNEL_UPDATE           = 11,\n        CHANNEL_DELETE           = 12,\n        CHANNEL_OVERWRITE_CREATE = 13,\n        CHANNEL_OVERWRITE_UPDATE = 14,\n        CHANNEL_OVERWRITE_DELETE = 15,\n        MEMBER_KICK              = 20,\n        MEMBER_PRUNE             = 21,\n        MEMBER_BAN_ADD           = 22,\n        MEMBER_BAN_REMOVE        = 23,\n        MEMBER_UPDATE            = 24,\n        MEMBER_ROLE_UPDATE       = 25,\n        ROLE_CREATE              = 30,\n        ROLE_UPDATE              = 31,\n        ROLE_DELETE              = 32,\n        INVITE_CREATE            = 40,\n        INVITE_UPDATE            = 41,\n        INVITE_DELETE            = 42,\n        WEBHOOK_CREATE           = 50,\n        WEBHOOK_UPDATE           = 51,\n        WEBHOOK_DELETE           = 52,\n        EMOJI_CREATE             = 60,\n        EMOJI_UPDATE             = 61,\n        EMOJI_DELETE             = 62,\n        MESSAGE_DELETE           = 72\n    };\n\n    template<class _ObjectChanged, class _Type>\n    struct AuditLogKeyData {\n    public:\n        using ObjectChanged = _ObjectChanged;\n        using Type = _type;\n    };\n\n    template<typename template<class, class> Data, ObjectChanged, Type>\n    using AuditLogKey = std::pair<std::string, Data<ObjectChanged, Type>>; \n\n    struct AuditLog {\n    public:\n\n        const static auto keys = std::make_tuple(\n            AuditLogKey("name"                         , AuditLogKeyData<Server , std::string           >()),\n            AuditLogKey("icon_hash"                    , AuditLogKeyData<Server , std::string           >()),\n            AuditLogKey("splash_hash"                  , AuditLogKeyData<Server , std::string           >()),\n            AuditLogKey("owner_id"                     , AuditLogKeyData<Server , Snowflake<User>       >()),\n            AuditLogKey("region"                       , AuditLogKeyData<Server , std::string           >()),\n            AuditLogKey("afk_channel_id"               , AuditLogKeyData<Server , Snowflake<Channel>    >()),\n            AuditLogKey("afk_timeout"                  , AuditLogKeyData<Server , int                   >()),\n            AuditLogKey("mfa_level"                    , AuditLogKeyData<Server , int                   >()),\n            AuditLogKey("verification_level"           , AuditLogKeyData<Server , int                   >()),\n            AuditLogKey("explicit_content_filter"      , AuditLogKeyData<Server , int                   >()),\n            AuditLogKey("default_message_notifications", AuditLogKeyData<Server , int                   >()),\n            AuditLogKey("vanity_url_code"              , AuditLogKeyData<Server , std::string           >()),\n            AuditLogKey("$add"                         , AuditLogKeyData<Server , std::vector<Role>     >()),\n            AuditLogKey("$remove"                      , AuditLogKeyData<Server , std::vector<Role>     >()),\n            AuditLogKey("prune_delete_days"            , AuditLogKeyData<Server , int                   >()),\n            AuditLogKey("widget_enabled"               , AuditLogKeyData<Server , bool                  >()),\n            AuditLogKey("widget_channel_id"            , AuditLogKeyData<Server , Snowflake<Channel>    >()),\n            AuditLogKey("position"                     , AuditLogKeyData<Channel, int                   >()),\n            AuditLogKey("topic"                        , AuditLogKeyData<Channel, std::string           >()),\n            AuditLogKey("bitrate"                      , AuditLogKeyData<Channel, int                   >()),\n            AuditLogKey("permission_overwrites"        , AuditLogKeyData<Channel, std::vector<Overwrite>>()),\n            AuditLogKey("nsfw"                         , AuditLogKeyData<Channel, bool                  >()),\n            AuditLogKey("application_id"               , AuditLogKeyData<Channel, std::string           >()), //to do use Snowflake\n            AuditLogKey("permissions"                  , AuditLogKeyData<Role   , int                   >()),\n            AuditLogKey("color"                        , AuditLogKeyData<Role   , int                   >()),\n            AuditLogKey("hoist"                        , AuditLogKeyData<Role   , bool                  >()),\n            AuditLogKey("mentionable"                  , AuditLogKeyData<Role   , bool                  >()),\n            AuditLogKey("allow"                        , AuditLogKeyData<Role   , int                   >()),\n            AuditLogKey("deny"                         , AuditLogKeyData<Role   , int                   >()),\n            AuditLogKey("code"                         , AuditLogKeyData<Invite , std::string           >()),\n            AuditLogKey("channel_id"                   , AuditLogKeyData<Invite , Snowflake<Channel>    >()),\n            AuditLogKey("inviter_id"                   , AuditLogKeyData<Invite , Snowflake<User>       >()),\n            AuditLogKey("max_uses"                     , AuditLogKeyData<Invite , int                   >()),\n            AuditLogKey("uses"                         , AuditLogKeyData<Invite , int                   >()),\n            AuditLogKey("max_age"                      , AuditLogKeyData<Invite , int                   >()),\n            AuditLogKey("temporary"                    , AuditLogKeyData<Invite , bool                  >()),\n            AuditLogKey("deaf"                         , AuditLogKeyData<User   , bool                  >()),\n            AuditLogKey("mute"                         , AuditLogKeyData<User   , bool                  >()),\n            AuditLogKey("nick"                         , AuditLogKeyData<User   , std::string           >()),\n            AuditLogKey("avatar_hash"                  , AuditLogKeyData<User   , std::string           >()),\n            AuditLogKey("id"                           , AuditLogKeyData<void   , Snowflake::RawType    >()),\n            //to do: type doesn\'t really fit into the above format\n        );\n    };\n}\n')),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}s.isMDXComponent=!0}}]);