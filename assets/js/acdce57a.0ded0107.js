"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[6161],{3905:function(e,r,n){n.d(r,{Zo:function(){return p},kt:function(){return f}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function s(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?s(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=t.createContext({}),i=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},p=function(e){var r=i(e.components);return t.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=i(n),f=o,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||s;return n?t.createElement(m,c(c({ref:r},p),{},{components:n})):t.createElement(m,c({ref:r},p))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var s=n.length,c=new Array(s);c[0]=d;var a={};for(var l in r)hasOwnProperty.call(r,l)&&(a[l]=r[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var i=2;i<s;i++)c[i]=n[i];return t.createElement.apply(null,c)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7552:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return i},toc:function(){return p},default:function(){return d}});var t=n(3117),o=n(102),s=(n(7294),n(3905)),c=["components"],a={title:"sleepy_discord/server.cpp"},l=void 0,i={unversionedId:"reference/Files/server_8cpp",id:"reference/Files/server_8cpp",title:"sleepy_discord/server.cpp",description:"Namespaces",source:"@site/docs/reference/Files/server_8cpp.md",sourceDirName:"reference/Files",slug:"/reference/Files/server_8cpp",permalink:"/sleepy-discord/docs/reference/Files/server_8cpp",tags:[],version:"current",frontMatter:{title:"sleepy_discord/server.cpp"},sidebar:"Reference",previous:{title:"sleepy_discord/sd_error.cpp",permalink:"/sleepy-discord/docs/reference/Files/sd__error_8cpp"},next:{title:"include/sleepy_discord/server.h",permalink:"/sleepy-discord/docs/reference/Files/server_8h"}},p=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],u={toc:p};function d(e){var r=e.components,n=(0,o.Z)(e,c);return(0,s.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"namespaces"},"Namespaces"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,s.kt)("h2",{id:"source-code"},"Source code"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "server.h"\n#include "client.h"\n#include "permissions.h"\n\nnamespace SleepyDiscord {\n    std::list<ServerMember>::iterator Server::findMember(Snowflake<User> userID) {\n        return userID.findObject(members.begin(), members.end());\n    }\n\n    std::list<Channel>::iterator Server::findChannel(Snowflake<Channel> channelID) {\n        return channelID.findObject(channels.begin(), channels.end());\n    }\n\n    std::list<Role>::iterator Server::findRole(Snowflake<Role> roleID) {\n        return roleID.findObject(roles.begin(), roles.end());\n    }\n\n    ServerMember::ServerMember(const json::Value & json) :\n        ServerMember(json::fromJSON<ServerMember>(json)) {\n        ID = user.ID;\n    }\n\n    Server::Server(const json::Value & json) :\n        Server(json::fromJSON<Server>(json)) {\n    }\n\n    UnavailableServer::UnavailableServer(const json::Value & json) :\n        UnavailableServer(json::fromJSON<UnavailableServer>(json)) {\n    }\n\n    ServerWidget::ServerWidget(const json::Value & json) :\n        ServerWidget(json::fromJSON<ServerWidget>(json)) {\n    }\n\n    ServerMembersRequest::ServerMembersRequest(const json::Value& json) :\n        ServerMembersRequest(json::fromJSON<ServerMembersRequest>(json)) {\n    }\n}\n')),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}d.isMDXComponent=!0}}]);