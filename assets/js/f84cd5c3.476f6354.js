"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[877],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return d}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},_={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(t),d=a,f=p["".concat(s,".").concat(d)]||p[d]||_[d]||l;return t?n.createElement(f,i(i({ref:r},u),{},{components:t})):n.createElement(f,i({ref:r},u))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=p;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7904:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var n=t(3117),a=t(102),l=(t(7294),t(3905)),i=["components"],o={title:"SleepyDiscord::GetEnumBaseType< UnavailableServer::AvailableFlag >"},s=void 0,c={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_get_enum_base_type_3_01_unavailable_server_1_1_available_flag_01_4",id:"reference/Classes/struct_sleepy_discord_1_1_get_enum_base_type_3_01_unavailable_server_1_1_available_flag_01_4",title:"SleepyDiscord::GetEnumBaseType< UnavailableServer::AvailableFlag >",description:"Public Types Documentation",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_get_enum_base_type_3_01_unavailable_server_1_1_available_flag_01_4.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_get_enum_base_type_3_01_unavailable_server_1_1_available_flag_01_4",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_get_enum_base_type_3_01_unavailable_server_1_1_available_flag_01_4",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::GetEnumBaseType< UnavailableServer::AvailableFlag >"},sidebar:"Reference",previous:{title:"SleepyDiscord::GetEnumBaseType< AllowedMentions::MentionReplierFlag >",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_get_enum_base_type_3_01_allowed_mentions_1_1_mention_replier_flag_01_4"},next:{title:"SleepyDiscord::HeaderPair",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_header_pair"}},u=[{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using Value",id:"using-value",children:[],level:3}],level:2}],_={toc:u};function p(e){var r=e.components,t=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},_,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,l.kt)("h3",{id:"using-value"},"using Value"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::GetEnumBaseType< UnavailableServer::AvailableFlag >::Value =  bool;\n")),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}p.isMDXComponent=!0}}]);