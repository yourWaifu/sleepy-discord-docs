"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[6070],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return v}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=l(n),v=a,m=u["".concat(c,".").concat(v)]||u[v]||p[v]||i;return n?r.createElement(m,s(s({ref:t},d),{},{components:n})):r.createElement(m,s({ref:t},d))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5568:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var r=n(3117),a=n(102),i=(n(7294),n(3905)),s=["components"],o={title:"include/sleepy_discord/invite.h"},c=void 0,l={unversionedId:"reference/Files/invite_8h",id:"reference/Files/invite_8h",title:"include/sleepy_discord/invite.h",description:"Namespaces",source:"@site/docs/reference/Files/invite_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/invite_8h",permalink:"/sleepy-discord/docs/reference/Files/invite_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/invite.h"},sidebar:"Reference",previous:{title:"sleepy_discord/invite.cpp",permalink:"/sleepy-discord/docs/reference/Files/invite_8cpp"},next:{title:"sleepy_discord/json_wrapper.cpp",permalink:"/sleepy-discord/docs/reference/Files/json__wrapper_8cpp"}},d=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],p={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"namespaces"},"Namespaces"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,i.kt)("h2",{id:"classes"},"Classes"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"struct"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_invite"},"SleepyDiscord::Invite")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"struct"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_invite_metadata"},"SleepyDiscord::InviteMetadata")))))),(0,i.kt)("h2",{id:"source-code"},"Source code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <string>\n#include "discord_object_interface.h"\n#include "user.h"\n#include "server.h"\n#include "channel.h"\n#include "snowflake.h"\n\nnamespace SleepyDiscord {\n    /*\n    Invite Structure    Represents a code that when used, adds a user to a guild.\n\n    Field      Type                      Description\n    code       string                    the invite code (unique ID)\n    guild      a invite guild object     the guild this invite is for\n    channel    a invite channel object   the channel this invite is for\n    */\n    struct Invite : public DiscordObject {\n    public:\n        Invite() = default;\n        //~Invite();\n        //Invite(const std::string * rawJson);\n        Invite(const json::Value & json);\n        Invite(const nonstd::string_view& json) :\n            Invite(json::fromJSON<Invite>(json)) {}\n        //Invite(const json::Values values);\n        std::string code;\n        Server server;\n        Channel channel;\n\n        //const static std::initializer_list<const char*const> fields;\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&Invite::code   , "code"   , json::REQUIRIED_FIELD),\n                json::pair(&Invite::server , "guild"  , json::OPTIONAL_FIELD ),\n                json::pair(&Invite::channel, "channel", json::REQUIRIED_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    /*\n    Invite Metadata Structure\n\n    Field       Type            Description\n    inviter     a user object   user who created the invite\n    uses        integer         number of times this invite has been used\n    max_uses    integer         max number of times this invite can be used\n    max_age     integer         duration (in seconds) after which the invite expires\n    temporary   bool            whether this invite only grants temporary membership\n    created_at  datetime        when this invite was created\n    revoked     bool            whether this invite is revoked\n    */\n    struct InviteMetadata : public DiscordObject {\n        InviteMetadata() = default;\n        //~InviteMetadata();\n        //InviteMetadata(const std::string * rawJson);\n        //InviteMetadata(const json::Values values);\n        InviteMetadata(const json::Value & json);\n        InviteMetadata(const nonstd::string_view& json) :\n            InviteMetadata(json::fromJSON<InviteMetadata>(json)) {}\n        User inviter;\n        int uses = 0;\n        int max_users = 0;\n        int max_age = 0;\n        bool isTemporary;\n        std::string createAt;\n        bool revoked;\n\n        //const static std::initializer_list<const char*const> fields;\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&InviteMetadata::inviter    , "inviter"   , json::REQUIRIED_FIELD),\n                json::pair(&InviteMetadata::uses       , "uses"      , json::REQUIRIED_FIELD),\n                json::pair(&InviteMetadata::max_users  , "max_uses"  , json::REQUIRIED_FIELD),\n                json::pair(&InviteMetadata::max_age    , "max_age"   , json::REQUIRIED_FIELD),\n                json::pair(&InviteMetadata::isTemporary, "temporary" , json::REQUIRIED_FIELD),\n                json::pair(&InviteMetadata::createAt   , "created_at", json::REQUIRIED_FIELD),\n                json::pair(&InviteMetadata::revoked    , "revoked"   , json::REQUIRIED_FIELD)\n            );\n        JSONStructEnd\n    };\n}\n')),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);