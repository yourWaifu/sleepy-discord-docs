"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[16],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=s.createContext({}),c=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?s.createElement(y,i(i({ref:t},p),{},{components:n})):s.createElement(y,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var c=2;c<o;c++)i[c]=n[c];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8141:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var s=n(3117),r=n(102),o=(n(7294),n(3905)),i=["components"],a={title:"include/sleepy_discord/custom_session.h"},l=void 0,c={unversionedId:"reference/Files/custom__session_8h",id:"reference/Files/custom__session_8h",title:"include/sleepy_discord/custom_session.h",description:"Namespaces",source:"@site/docs/reference/Files/custom__session_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/custom__session_8h",permalink:"/sleepy-discord/docs/reference/Files/custom__session_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/custom_session.h"},sidebar:"Reference",previous:{title:"include/sleepy_discord/custom_connection.h",permalink:"/sleepy-discord/docs/reference/Files/custom__connection_8h"},next:{title:"include/sleepy_discord/custom_udp_client.h",permalink:"/sleepy-discord/docs/reference/Files/custom__udp__client_8h"}},p=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Types",id:"types",children:[],level:2},{value:"Types Documentation",id:"types-documentation",children:[{value:"typedef CustomInit",id:"typedef-custominit",children:[],level:3},{value:"typedef CustomInitSession",id:"typedef-custominitsession",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,s.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"namespaces"},"Namespaces"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,o.kt)("h2",{id:"classes"},"Classes"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"class"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_custom_session"},"SleepyDiscord::CustomSession")))))),(0,o.kt)("h2",{id:"types"},"Types"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"typedef GenericSession ",(0,o.kt)("em",{parentName:"td"},"("),"const)()"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/custom__session_8h#typedef-custominit"},"CustomInit")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"typedef CustomInit"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/custom__session_8h#typedef-custominitsession"},"CustomInitSession")))))),(0,o.kt)("h2",{id:"types-documentation"},"Types Documentation"),(0,o.kt)("h3",{id:"typedef-custominit"},"typedef CustomInit"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef GenericSession*(*const SleepyDiscord::CustomInit) ();\n")),(0,o.kt)("h3",{id:"typedef-custominitsession"},"typedef CustomInitSession"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef CustomInit SleepyDiscord::CustomInitSession;\n")),(0,o.kt)("h2",{id:"source-code"},"Source code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <memory>\n#include "http.h"\n\nnamespace SleepyDiscord {\n    typedef GenericSession* (*const CustomInit)();  //keep compatibility with old code\n    typedef CustomInit CustomInitSession;\n\n    class CustomSession : public GenericSession {\n    public:\n        static CustomInitSession init;\n        CustomSession() : session(init()) {}\n        inline void setUrl(const std::string& url) { session->setUrl(url); }\n        inline void setBody(const std::string* jsonParamters) { session->setBody(jsonParamters); }\n        inline void setHeader(const std::vector<HeaderPair>& header) {\n            session->setHeader(header);\n        }\n        inline void setMultipart(const std::vector<Part>& parts) {\n            session->setMultipart(parts);\n        }\n        inline void setResponseCallback(const ResponseCallback& callback) {\n            session->setResponseCallback(callback);\n        }\n        inline Response request(RequestMethod method) {\n            return session->request(method);\n        }\n    private:\n        std::unique_ptr<GenericSession> session; //pointer to session\n    };\n\n    typedef CustomSession Session;\n}\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);