"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[363],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=l(n),m=s,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,o=new Array(i);o[0]=d;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:s,o[1]=a;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2117:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=n(3117),s=n(102),i=(n(7294),n(3905)),o=["components"],a={title:"SleepyDiscord::ZLibCompression"},c=void 0,l={unversionedId:"reference/Classes/class_sleepy_discord_1_1_z_lib_compression",id:"reference/Classes/class_sleepy_discord_1_1_z_lib_compression",title:"SleepyDiscord::ZLibCompression",description:"Inherits from SleepyDiscord::GenericCompression",source:"@site/docs/reference/Classes/class_sleepy_discord_1_1_z_lib_compression.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/class_sleepy_discord_1_1_z_lib_compression",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_z_lib_compression",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::ZLibCompression"},sidebar:"Reference",previous:{title:"SleepyDiscord::WebsocketppScheduleHandler",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_schedule_handler"},next:{title:"SleepyDiscord::ActionRow",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_action_row"}},p=[{value:"inherited members",id:"inherited-members",children:[],level:2},{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using Output",id:"using-output",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function ZLibCompression",id:"function-zlibcompression",children:[],level:3},{value:"function ~ZLibCompression",id:"function-zlibcompression-1",children:[],level:3},{value:"function uncompress",id:"function-uncompress",children:[],level:3},{value:"function getOutput",id:"function-getoutput",children:[],level:3},{value:"function resetStream",id:"function-resetstream",children:[],level:3},{value:"function streamEnded",id:"function-streamended",children:[],level:3}],level:2},{value:"Public Attributes Documentation",id:"public-attributes-documentation",children:[{value:"variable stream",id:"variable-stream",children:[],level:3},{value:"variable statusCode",id:"variable-statuscode",children:[],level:3},{value:"variable output",id:"variable-output",children:[],level:3},{value:"variable mutex",id:"variable-mutex",children:[],level:3}],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,s.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Inherits from ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_compression"},"SleepyDiscord::GenericCompression")),(0,i.kt)("h2",{id:"inherited-members"},"inherited members"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Public Functions inherited from ",(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_compression"},"SleepyDiscord::GenericCompression"))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"virtual"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_compression#function-~genericcompression"},"~GenericCompression")),"() =default")))),(0,i.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,i.kt)("h3",{id:"using-output"},"using Output"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::ZLibCompression::Output =  OutputQueue;\n")),(0,i.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,i.kt)("h3",{id:"function-zlibcompression"},"function ZLibCompression"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ZLibCompression()\n")),(0,i.kt)("h3",{id:"function-zlibcompression-1"},"function ~ZLibCompression"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline ~ZLibCompression()\n")),(0,i.kt)("h3",{id:"function-uncompress"},"function uncompress"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void uncompress(\n    const std::string & compressed\n) override\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_compression#function-uncompress"},"SleepyDiscord::GenericCompression::uncompress")),(0,i.kt)("h3",{id:"function-getoutput"},"function getOutput"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"virtual void getOutput(\n    std::string & uncompressedOut\n) override\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_compression#function-getoutput"},"SleepyDiscord::GenericCompression::getOutput")),(0,i.kt)("h3",{id:"function-resetstream"},"function resetStream"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual void resetStream() override\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_compression#function-resetstream"},"SleepyDiscord::GenericCompression::resetStream")),(0,i.kt)("h3",{id:"function-streamended"},"function streamEnded"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline virtual bool streamEnded() override\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Reimplements"),": ",(0,i.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_compression#function-streamended"},"SleepyDiscord::GenericCompression::streamEnded")),(0,i.kt)("h2",{id:"public-attributes-documentation"},"Public Attributes Documentation"),(0,i.kt)("h3",{id:"variable-stream"},"variable stream"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"ZLib::Stream stream;\n")),(0,i.kt)("h3",{id:"variable-statuscode"},"variable statusCode"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"int statusCode;\n")),(0,i.kt)("h3",{id:"variable-output"},"variable output"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"Output output;\n")),(0,i.kt)("h3",{id:"variable-mutex"},"variable mutex"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"std::mutex mutex;\n")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}d.isMDXComponent=!0}}]);