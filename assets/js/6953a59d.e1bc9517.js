"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[4969],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),i=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=i(n),f=a,m=u["".concat(o,".").concat(f)]||u[f]||d[f]||s;return n?r.createElement(m,c(c({ref:t},p),{},{components:n})):r.createElement(m,c({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,c=new Array(s);c[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,c[1]=l;for(var i=2;i<s;i++)c[i]=n[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4978:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return i},toc:function(){return p},default:function(){return u}});var r=n(3117),a=n(102),s=(n(7294),n(3905)),c=["components"],l={title:"include/sleepy_discord/stage_instance.h"},o=void 0,i={unversionedId:"reference/Files/stage__instance_8h",id:"reference/Files/stage__instance_8h",title:"include/sleepy_discord/stage_instance.h",description:"Namespaces",source:"@site/docs/reference/Files/stage__instance_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/stage__instance_8h",permalink:"/sleepy-discord/docs/reference/Files/stage__instance_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/stage_instance.h"},sidebar:"Reference",previous:{title:"sleepy_discord/stage_instance.cpp",permalink:"/sleepy-discord/docs/reference/Files/stage__instance_8cpp"},next:{title:"include/sleepy_discord/standard_config.h",permalink:"/sleepy-discord/docs/reference/Files/standard__config_8h"}},p=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,c);return(0,s.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"namespaces"},"Namespaces"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,s.kt)("h2",{id:"classes"},"Classes"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_stage_instance"},"SleepyDiscord::StageInstance")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_get_default_3_01_stage_instance_1_1_privacy_level_01_4"},"SleepyDiscord::GetDefault< StageInstance::PrivacyLevel >")))))),(0,s.kt)("h2",{id:"source-code"},"Source code"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include "discord_object_interface.h"\n#include "server.h"\n\nnamespace SleepyDiscord {\n    struct StageInstance : IdentifiableDiscordObject<StageInstance> {\n        StageInstance() = default;\n        ~StageInstance() = default;\n        StageInstance(const json::Value & json);\n        StageInstance(const nonstd::string_view& json) :\n            StageInstance(json::fromJSON<StageInstance>(json)) {}\n\n        Snowflake<Server> serverID;\n        Snowflake<Channel> channelID;\n        std::string topic;\n        using PrivacyLevelRaw = int;\n        enum class PrivacyLevel : PrivacyLevelRaw {\n            NotSet = -1, //made up for the library\n            PUBLIC = 1,\n            SERVER_ONLY = 2\n        };\n        PrivacyLevel privacyLevel = PrivacyLevel::NotSet;\n        bool discoverableDisabled = false;\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair                      (&StageInstance::ID                  , "id"                   , json::REQUIRIED_FIELD),\n                json::pair                      (&StageInstance::serverID            , "guild_id"             , json::REQUIRIED_FIELD),\n                json::pair                      (&StageInstance::channelID           , "channel_id"           , json::REQUIRIED_FIELD),\n                json::pair                      (&StageInstance::topic               , "topic"                , json::OPTIONAL_FIELD ),\n                json::pair<json::EnumTypeHelper>(&StageInstance::privacyLevel        , "privacy_level"        , json::OPTIONAL_FIELD ),\n                json::pair                      (&StageInstance::discoverableDisabled, "discoverable_disabled", json::OPTIONAL_FIELD )\n            );\n        JSONStructEnd\n    };\n\n    template<>\n    struct GetDefault<StageInstance::PrivacyLevel> {\n        static inline const StageInstance::PrivacyLevel get() {\n            return StageInstance::PrivacyLevel::NotSet;\n        }\n    };\n}\n')),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);