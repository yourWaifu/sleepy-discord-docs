"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[1762],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(r),m=a,f=d["".concat(c,".").concat(m)]||d[m]||s[m]||o;return r?n.createElement(f,l(l({ref:t},p),{},{components:r})):n.createElement(f,l({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},673:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var n=r(3117),a=r(102),o=(r(7294),r(3905)),l=["components"],i={title:"CMake Command Line Interface",includes:null},c=void 0,u={unversionedId:"setup-standard-cli",id:"setup-standard-cli",title:"CMake Command Line Interface",description:"Change current directory to the directory with your CMakeList.txt file.",source:"@site/docs/setup-standard-cli.md",sourceDirName:".",slug:"/setup-standard-cli",permalink:"/sleepy-discord/docs/setup-standard-cli",tags:[],version:"current",lastUpdatedAt:1698528022,formattedLastUpdatedAt:"10/28/2023",frontMatter:{title:"CMake Command Line Interface",includes:null},sidebar:"Docs",previous:{title:"Visual Studio CMake",permalink:"/sleepy-discord/docs/setup-standard-vs-cmake"},next:{title:"Build",permalink:"/sleepy-discord/docs/generator-compile"}},p=[],s={toc:p};function d(e){var t=e.components,r=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Change current directory to the directory with your CMakeList.txt file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cd your-project\n")),(0,o.kt)("p",null,"Create a new directory named build."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir build\n")),(0,o.kt)("p",null,"Change current directory to the new build directory."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cd build\n")),(0,o.kt)("p",null,"Choose a CMake Generator to use. ",(0,o.kt)("a",{parentName:"p",href:"https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html"},"Here's a list of them"),". In this example, we will use the default, so we'll keep it empty. The default is different depending on your system but it's likely ",(0,o.kt)("inlineCode",{parentName:"p"},"make"),"."),(0,o.kt)("p",null,"If you used VCPKG, do the following, otherwise skip this step. You'll need to add the command line argument ",(0,o.kt)("inlineCode",{parentName:"p"},"-DCMAKE_TOOLCHAIN_FILE=[path to vcpkg]/scripts/buildsystems/vcpkg.cmake")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"[path to vcpkg]")," replaced."),(0,o.kt)("p",null,"Generate build configuration files using CMake on the previous directory with your chosen CMake Generator and toolchain."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cmake ..\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"generator-compile"},"Compile and Build")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"common-build-errors"},"Common Errors"))))}d.isMDXComponent=!0}}]);