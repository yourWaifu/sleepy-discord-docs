"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[710],{3996:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"setup-standard-cli","title":"CMake Command Line Interface","description":"Change current directory to the directory with your CMakeList.txt file.","source":"@site/docs/setup-standard-cli.md","sourceDirName":".","slug":"/setup-standard-cli","permalink":"/sleepy-discord/docs/setup-standard-cli","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1758418732000,"frontMatter":{"title":"CMake Command Line Interface","includes":null},"sidebar":"Docs","previous":{"title":"Visual Studio CMake","permalink":"/sleepy-discord/docs/setup-standard-vs-cmake"},"next":{"title":"Build","permalink":"/sleepy-discord/docs/generator-compile"}}');var s=t(4848),i=t(8453);const c={title:"CMake Command Line Interface",includes:null},l=void 0,o={},d=[];function a(e){const n={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Change current directory to the directory with your CMakeList.txt file."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cd your-project\n"})}),"\n",(0,s.jsx)(n.p,{children:"Create a new directory named build."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"mkdir build\n"})}),"\n",(0,s.jsx)(n.p,{children:"Change current directory to the new build directory."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cd build\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Choose a CMake Generator to use. ",(0,s.jsx)(n.a,{href:"https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html",children:"Here's a list of them"}),". In this example, we will use the default, so we'll keep it empty. The default is different depending on your system but it's likely ",(0,s.jsx)(n.code,{children:"make"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you used VCPKG, do the following, otherwise skip this step. You'll need to add the command line argument ",(0,s.jsx)(n.code,{children:"-DCMAKE_TOOLCHAIN_FILE=[path to vcpkg]/scripts/buildsystems/vcpkg.cmake"})," with ",(0,s.jsx)(n.code,{children:"[path to vcpkg]"})," replaced."]}),"\n",(0,s.jsx)(n.p,{children:"Generate build configuration files using CMake on the previous directory with your chosen CMake Generator and toolchain."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"cmake ..\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"generator-compile",children:"Compile and Build"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"common-build-errors",children:"Common Errors"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var r=t(6540);const s={},i=r.createContext(s);function c(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);