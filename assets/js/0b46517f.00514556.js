"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[8179],{3905:function(e,t,n){n.d(t,{Zo:function(){return i},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},i=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,_=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(_,l(l({ref:t},i),{},{components:n})):r.createElement(_,l({ref:t},i))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8265:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return i},default:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),l=["components"],s={title:"SleepyDiscord::Button"},p=void 0,c={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_button",id:"reference/Classes/struct_sleepy_discord_1_1_button",title:"SleepyDiscord::Button",description:"Inherits from SleepyDiscord::DiscordObject",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_button.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_button",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_button",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::Button"},sidebar:"Reference",previous:{title:"SleepyDiscord::BooleanResponse",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_boolean_response"},next:{title:"SleepyDiscord::Cache",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_cache"}},i=[{value:"inherited members",id:"inherited-members",children:[],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function Button",id:"function-button",children:[],level:3},{value:"function ~Button",id:"function-button-1",children:[],level:3},{value:"function Button",id:"function-button-2",children:[],level:3},{value:"function Button",id:"function-button-3",children:[],level:3},{value:"function std::tuple_cat",id:"function-stdtuple_cat",children:[],level:3}],level:2},{value:"Public Attributes Documentation",id:"public-attributes-documentation",children:[{value:"variable componentType",id:"variable-componenttype",children:[],level:3},{value:"variable style",id:"variable-style",children:[],level:3},{value:"variable label",id:"variable-label",children:[],level:3},{value:"variable emoji",id:"variable-emoji",children:[],level:3},{value:"variable customID",id:"variable-customid",children:[],level:3},{value:"variable url",id:"variable-url",children:[],level:3},{value:"variable disabled",id:"variable-disabled",children:[],level:3}],level:2}],d={toc:i};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Inherits from ",(0,o.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_component_temp"},"SleepyDiscord::ComponentTemp< Button >"),", ",(0,o.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component"},"SleepyDiscord::BaseComponent"),", ",(0,o.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_discord_object"},"SleepyDiscord::DiscordObject")),(0,o.kt)("h2",{id:"inherited-members"},"inherited members"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Public Functions inherited from ",(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_component_temp"},"SleepyDiscord::ComponentTemp< Button >"))),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_component_temp#function-componenttemp"},"ComponentTemp")),"()")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_component_temp#function-~componenttemp"},"~ComponentTemp")),"() =default")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_component_temp#function-operator-jsonvalue"},"operator json::Value")),"()")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_component_temp#function-operator-rawcomponent"},"operator RawComponent")),"()")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"JSONStructStart"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_component_temp#function-stdmake_tuple"},"std::make_tuple")),"(json::pair< ",(0,o.kt)("a",{parentName:"td",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_enum_type_helper"},"json::EnumTypeHelper"),' > &::, "", ::REQUIRIED_FIELD )')))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Public Types inherited from ",(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component"},"SleepyDiscord::BaseComponent"))),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"using ComponentType"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#using-type"},"Type")))))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Public Functions inherited from ",(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component"},"SleepyDiscord::BaseComponent"))),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#function-basecomponent"},"BaseComponent")),"()")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#function-basecomponent"},"BaseComponent")),"(Type _type)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#function-~basecomponent"},"~BaseComponent")),"() =default")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"const ComponentType"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#function-gettype"},"getType")),"() const")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Protected Attributes inherited from ",(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component"},"SleepyDiscord::BaseComponent"))),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Type"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#variable-type"},"type")))))),(0,o.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,o.kt)("h3",{id:"function-button"},"function Button"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Button() =default\n")),(0,o.kt)("h3",{id:"function-button-1"},"function ~Button"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"~Button() =default\n")),(0,o.kt)("h3",{id:"function-button-2"},"function Button"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Button(\n    const json::Value & json\n)\n")),(0,o.kt)("h3",{id:"function-button-3"},"function Button"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Button(\n    const nonstd::string_view & json\n)\n")),(0,o.kt)("h3",{id:"function-stdtuple_cat"},"function std::tuple_cat"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'JSONStructStart std::tuple_cat(\n    ComponentTemp< Button >::JSONStruct ,\n    std::make_tuple(json::pair< json::EnumTypeHelper >(&Button::style, "style", json::REQUIRIED_FIELD), json::pair(&Button::label, "label", json::OPTIONAL_FIELD), json::pair(&Button::emoji, "emoji", json::OPTIONAL_FIELD), json::pair(&Button::customID, "custom_id", json::OPTIONAL_FIELD), json::pair(&Button::url, "url", json::OPTIONAL_FIELD), json::pair(&Button::disabled, "disabled", json::OPTIONAL_FIELD)) \n)\n')),(0,o.kt)("h2",{id:"public-attributes-documentation"},"Public Attributes Documentation"),(0,o.kt)("h3",{id:"variable-componenttype"},"variable componentType"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"static const ComponentType componentType = ComponentType::Button;\n")),(0,o.kt)("h3",{id:"variable-style"},"variable style"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"ButtonStyle style;\n")),(0,o.kt)("h3",{id:"variable-label"},"variable label"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string label;\n")),(0,o.kt)("h3",{id:"variable-emoji"},"variable emoji"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Emoji emoji;\n")),(0,o.kt)("h3",{id:"variable-customid"},"variable customID"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string customID;\n")),(0,o.kt)("h3",{id:"variable-url"},"variable url"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string url;\n")),(0,o.kt)("h3",{id:"variable-disabled"},"variable disabled"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"bool disabled = false;\n")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);