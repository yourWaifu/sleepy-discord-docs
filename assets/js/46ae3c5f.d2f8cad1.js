"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[1420],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=l(n),m=s,f=u["".concat(i,".").concat(m)]||u[m]||p[m]||a;return n?r.createElement(f,c(c({ref:t},d),{},{components:n})):r.createElement(f,c({ref:t},d))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,c=new Array(a);c[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:s,c[1]=o;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6421:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var r=n(3117),s=n(102),a=(n(7294),n(3905)),c=["components"],o={title:"include/sleepy_discord/message_receiver.h"},i=void 0,l={unversionedId:"reference/Files/message__receiver_8h",id:"reference/Files/message__receiver_8h",title:"include/sleepy_discord/message_receiver.h",description:"Namespaces",source:"@site/docs/reference/Files/message__receiver_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/message__receiver_8h",permalink:"/sleepy-discord/docs/reference/Files/message__receiver_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/message_receiver.h"},sidebar:"Reference",previous:{title:"include/sleepy_discord/message.h",permalink:"/sleepy-discord/docs/reference/Files/message_8h"},next:{title:"sleepy_discord/permissions.cpp",permalink:"/sleepy-discord/docs/reference/Files/permissions_8cpp"}},d=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],p={toc:d};function u(e){var t=e.components,n=(0,s.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"namespaces"},"Namespaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,a.kt)("h2",{id:"classes"},"Classes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_web_socket_message"},"SleepyDiscord::WebSocketMessage")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"class"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_message_receiver"},"SleepyDiscord::GenericMessageReceiver")))))),(0,a.kt)("h2",{id:"source-code"},"Source code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <string>\n#include "websocket_connection.h"\n#include "timer.h"\n\nnamespace SleepyDiscord {\n    struct WebSocketMessage {\n        enum OPCode {\n            continuation = 0x0,\n            text = 0x1,\n            binary = 0x2,\n            close = 0x8,\n            ping = 0x9,\n            pong = 0xA,\n        };\n        using OPCodeType = OPCode;\n        OPCodeType opCode = text;\n        const std::string& payload;\n        //since we are using a reference, we need to keep the payload in memory\n        std::shared_ptr<void> lifetime; //not might to be read from\n    };\n\n    class GenericMessageReceiver {\n    public:\n        virtual ~GenericMessageReceiver() = default;\n        virtual void initialize() {}                                  //called when ready to recevie messages\n        virtual void handleFailToConnect() {}                         //called when connection has failed to start\n        virtual void processMessage(const std::string & message) = 0; //called when recevicing a message\n        virtual void processCloseCode(const int16_t /*code*/) {}\n        virtual void processMessage(const WebSocketMessage message) {\n            processMessage(message.payload);\n        }\n        WebsocketConnection connection;                               //maybe this should be set to protected?\n    protected:\n        int consecutiveReconnectsCount = 0;\n        Timer reconnectTimer;\n\n        inline const time_t getRetryDelay() {\n            return consecutiveReconnectsCount < 50 ? consecutiveReconnectsCount * 5000 : 5000 * 50;\n        }\n    };\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);