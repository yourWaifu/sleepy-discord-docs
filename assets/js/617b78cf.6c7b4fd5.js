"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[892],{3905:function(e,r,n){n.d(r,{Zo:function(){return l},kt:function(){return u}});var t=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function s(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?s(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function d(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=t.createContext({}),i=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},l=function(e){var r=i(e.components);return t.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),m=i(n),u=a,h=m["".concat(c,".").concat(u)]||m[u]||p[u]||s;return n?t.createElement(h,o(o({ref:r},l),{},{components:n})):t.createElement(h,o({ref:r},l))}));function u(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=m;var d={};for(var c in r)hasOwnProperty.call(r,c)&&(d[c]=r[c]);d.originalType=e,d.mdxType="string"==typeof e?e:a,o[1]=d;for(var i=2;i<s;i++)o[i]=n[i];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},666:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return d},contentTitle:function(){return c},metadata:function(){return i},toc:function(){return l},default:function(){return m}});var t=n(3117),a=n(102),s=(n(7294),n(3905)),o=["components"],d={title:"include/sleepy_discord/thread.h"},c=void 0,i={unversionedId:"reference/Files/thread_8h",id:"reference/Files/thread_8h",title:"include/sleepy_discord/thread.h",description:"Namespaces",source:"@site/docs/reference/Files/thread_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/thread_8h",permalink:"/sleepy-discord/docs/reference/Files/thread_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/thread.h"},sidebar:"Reference",previous:{title:"sleepy_discord/thread.cpp",permalink:"/sleepy-discord/docs/reference/Files/thread_8cpp"},next:{title:"include/sleepy_discord/timer.h",permalink:"/sleepy-discord/docs/reference/Files/timer_8h"}},l=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],p={toc:l};function m(e){var r=e.components,n=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"namespaces"},"Namespaces"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,s.kt)("h2",{id:"classes"},"Classes"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_thread_member"},"SleepyDiscord::ThreadMember")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_thread_list_sync"},"SleepyDiscord::ThreadListSync")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_thread_members_update"},"SleepyDiscord::ThreadMembersUpdate")))))),(0,s.kt)("h2",{id:"source-code"},"Source code"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include "discord_object_interface.h"\n#include "server.h"\n#include "channel.h"\n#include "user.h"\n\nnamespace SleepyDiscord {\n    struct ThreadMember : IdentifiableDiscordObject<Channel> {\n        ThreadMember() = default;\n        ThreadMember(const nonstd::string_view& json) :\n            ThreadMember(json::fromJSON<ThreadMember>(json)) {}\n        ThreadMember(const json::Value& json);\n\n        Snowflake<User> userID;\n        std::string joinTimestamp;\n        int flags = 0;\n        ServerMember member;\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&ThreadMember::ID, "id", json::OPTIONAL_FIELD),\n                json::pair(&ThreadMember::userID, "user_id", json::OPTIONAL_FIELD),\n                json::pair(&ThreadMember::joinTimestamp, "join_timestamp", json::OPTIONAL_FIELD),\n                json::pair(&ThreadMember::member, "member", json::OPTIONAL_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    struct ThreadListSync : public DiscordObject {\n        ThreadListSync() = default;\n        ThreadListSync(const nonstd::string_view& json) :\n            ThreadListSync(json::fromJSON<ThreadListSync>(json)) {}\n        ThreadListSync(const json::Value& json);\n\n        Snowflake<Server> serverID;\n        std::vector<Snowflake<Channel>> channelIDs;\n        std::vector<Channel> threads;\n        std::vector<ThreadMember> members;\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair                           (&ThreadListSync::serverID  , "guild_id", json::REQUIRIED_FIELD),\n                json::pair<json::ContainerTypeHelper>(&ThreadListSync::channelIDs, "channel_ids", json::OPTIONAL_FIELD),\n                json::pair<json::ContainerTypeHelper>(&ThreadListSync::threads   , "channel_ids", json::OPTIONAL_FIELD),\n                json::pair<json::ContainerTypeHelper>(&ThreadListSync::members   , "members", json::OPTIONAL_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    struct ThreadMembersUpdate : public IdentifiableDiscordObject<Channel> {\n        ThreadMembersUpdate() = default;\n        ThreadMembersUpdate(const nonstd::string_view& json) :\n            ThreadMembersUpdate(json::fromJSON<ThreadMembersUpdate>(json)) {}\n        ThreadMembersUpdate(const json::Value& json);\n\n        Snowflake<Server> serverID;\n        int memberCount = 0;\n        std::vector<ThreadMember> addedMembers;\n        std::vector<Snowflake<User>> removedMemberIDs;\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&ThreadMembersUpdate::ID, "id", json::REQUIRIED_FIELD),\n                json::pair(&ThreadMembersUpdate::serverID, "guild_id", json::OPTIONAL_FIELD),\n                json::pair<json::ContainerTypeHelper>(&ThreadMembersUpdate::addedMembers, "added_members", json::OPTIONAL_FIELD),\n                json::pair(&ThreadMembersUpdate::memberCount, "memberCount", json::OPTIONAL_FIELD),\n                json::pair<json::ContainerTypeHelper>(&ThreadMembersUpdate::removedMemberIDs, "removed_member_ids", json::OPTIONAL_FIELD)\n            );\n        JSONStructEnd\n    };\n}\n')),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}m.isMDXComponent=!0}}]);