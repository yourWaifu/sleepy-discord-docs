"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[3803],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(f,s(s({ref:n},c),{},{components:t})):r.createElement(f,s({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=p;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var u=2;u<i;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8616:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var r=t(3117),a=t(102),i=(t(7294),t(3905)),s=["components"],o={title:"include/sleepy_discord/zlib_compression.h"},l=void 0,u={unversionedId:"reference/Files/zlib__compression_8h",id:"reference/Files/zlib__compression_8h",title:"include/sleepy_discord/zlib_compression.h",description:"Namespaces",source:"@site/docs/reference/Files/zlib__compression_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/zlib__compression_8h",permalink:"/sleepy-discord/docs/reference/Files/zlib__compression_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/zlib_compression.h"},sidebar:"Reference",previous:{title:"sleepy_discord/zlib_compression.cpp",permalink:"/sleepy-discord/docs/reference/Files/zlib__compression_8cpp"},next:{title:"SleepyDiscord",permalink:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"}},c=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Types",id:"types",children:[],level:2},{value:"Defines",id:"defines",children:[],level:2},{value:"Types Documentation",id:"types-documentation",children:[{value:"using DefaultCompression",id:"using-defaultcompression",children:[],level:3}],level:2},{value:"Macro Documentation",id:"macro-documentation",children:[{value:"define SLEEPY_DEFAULT_COMPRESSION",id:"define-sleepy_default_compression",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:c};function p(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"namespaces"},"Namespaces"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,i.kt)("h2",{id:"classes"},"Classes"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"struct"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_output_queue"},"SleepyDiscord::OutputQueue")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"class"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_z_lib_compression"},"SleepyDiscord::ZLibCompression")))))),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"using ZLibCompression"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/zlib__compression_8h#using-defaultcompression"},"DefaultCompression")))))),(0,i.kt)("h2",{id:"defines"},"Defines"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/zlib__compression_8h#define-sleepy_default_compression"},"SLEEPY_DEFAULT_COMPRESSION")))))),(0,i.kt)("h2",{id:"types-documentation"},"Types Documentation"),(0,i.kt)("h3",{id:"using-defaultcompression"},"using DefaultCompression"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::DefaultCompression = typedef ZLibCompression;\n")),(0,i.kt)("h2",{id:"macro-documentation"},"Macro Documentation"),(0,i.kt)("h3",{id:"define-sleepy_default_compression"},"define SLEEPY_DEFAULT_COMPRESSION"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"#define SLEEPY_DEFAULT_COMPRESSION ZLibCompression\n")),(0,i.kt)("h2",{id:"source-code"},"Source code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include "generic_compression.h"\n#ifdef EXISTENT_ZLIB\n    #include "zlib.h"\n#elif defined(EXISTENT_ZLIB_NG)\n    #include "zlib-ng/zlib-ng.h"\n#endif\n#include <array>\n#include <forward_list>\n#include <string>\n#include <mutex>\n\nnamespace SleepyDiscord {\n    //This Queue is basicly a single linked list with the back and size stored\n    //Needed for storing the output before copying it over into one string\n    struct OutputQueue {\n        constexpr static size_t chunkSize = 16 * 1024;\n        using Data = std::array<char, chunkSize>;\n        using Buffer = std::pair<Data, std::size_t>;\n\n        using Queue = std::forward_list<Buffer>;\n        using Iterator = std::forward_list<Buffer>::iterator;\n        using ConstIterator = std::forward_list<Buffer>::const_iterator;\n\n        Queue queue; //needed when output is larger then buffer\n        Iterator _back = queue.before_begin(); //both back and size would require looking for them\n        Queue::size_type _size = 0; //to avoid looking for size, we store it. Same goes for back\n\n        ~OutputQueue() = default;\n\n        bool empty() const { return queue.empty(); }\n\n        //allocates more memory\n        template<class... Args>\n        Iterator emplace_back(Args&&... args) {\n            Iterator result = queue.emplace_after(_back, std::forward<Args>(args)...);\n            if (_back != result) { //if did anything\n                _back = result;\n                _size += 1;\n            }\n            return result;\n        }\n\n        Buffer& front() {\n            return queue.front();\n        }\n        Buffer& back() {\n            return *_back;\n        }\n\n        Iterator begin() noexcept {\n            return queue.begin();\n        }\n        Iterator end() noexcept {\n            return queue.end();\n        }\n\n        ConstIterator begin() const noexcept {\n            return queue.begin();\n        }\n        ConstIterator end() const noexcept {\n            return queue.end();\n        }\n\n        Queue::size_type size() const noexcept {\n            return _size;\n        }\n\n        void resize(Queue::size_type count) {\n            queue.resize(count);\n            _size = 0;\n            //linear time complexity but count is usally 1\n            for (Iterator it = begin(); it != end(); ++it) {\n                _size += 1;\n                _back = it;\n            }\n        }\n    };\n\n#ifdef EXISTENT_ZLIB\n    namespace ZLib {\n        using Stream = z_stream;\n        using Btye = Bytef;\n        using ConstByte = z_const Bytef;\n        inline int inflateInitStream(Stream* stream) { return inflateInit(stream); }\n        inline int inflateEndStream(Stream* stream) { return inflateEnd(stream); }\n        inline int inflateResetStream(Stream* stream) { return inflateReset(stream); }\n        inline int inflateStream(Stream* stream, int mode) { return inflate(stream, mode); }\n    }\n#elif defined(EXISTENT_ZLIB_NG)\n    namespace ZLib {\n        using Stream = zng_stream;\n        using Btye = uint8_t;\n        using ConstByte = const uint8_t;\n        inline int inflateInitStream(Stream* stream) { return zng_inflateInit(stream); }\n        inline int inflateEndStream(Stream* stream) { return zng_inflateEnd(stream); }\n        inline int inflateResetStream(Stream* stream) { return zng_inflateReset(stream); }\n        inline int inflateStream(Stream* stream, int mode) { return zng_inflate(stream, mode); }\n    }\n#endif\n\n    class ZLibCompression : public GenericCompression {\n    public:\n        using Output = OutputQueue;\n\n        ZLibCompression();\n\n        ~ZLibCompression() {\n            ZLib::inflateEndStream(&stream);\n        }\n\n        ZLib::Stream stream;\n        int statusCode;\n\n        Output output;\n        std::mutex mutex; //only allow one thread to uncompress\n\n        void uncompress(const std::string& compressed) override;\n        void getOutput(std::string& uncompressedOut) override;\n\n        inline void resetStream() override {\n            ZLib::inflateResetStream(&stream);\n        }\n\n        inline bool streamEnded() override {\n            return statusCode == Z_STREAM_END;\n        }\n    };\n\n    using DefaultCompression = ZLibCompression;\n#define SLEEPY_DEFAULT_COMPRESSION ZLibCompression\n}\n')),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}p.isMDXComponent=!0}}]);