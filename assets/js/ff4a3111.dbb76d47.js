"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[456],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,c=function(e,n){if(null==e)return{};var t,r,c={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,c=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(t),f=c,m=d["".concat(o,".").concat(f)]||d[f]||p[f]||i;return t?r.createElement(m,a(a({ref:n},s),{},{components:t})):r.createElement(m,a({ref:n},s))}));function f(e,n){var t=arguments,c=n&&n.mdxType;if("string"==typeof e||c){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:c,a[1]=l;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},127:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var r=t(3117),c=t(102),i=(t(7294),t(3905)),a=["components"],l={title:"SleepyDiscord::Cache"},o=void 0,u={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_cache",id:"reference/Classes/struct_sleepy_discord_1_1_cache",title:"SleepyDiscord::Cache",description:"More...",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_cache.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_cache",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_cache",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::Cache"},sidebar:"Reference",previous:{title:"SleepyDiscord::Button",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_button"},next:{title:"SleepyDiscord::Channel",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_channel"}},s=[{value:"Detailed Description",id:"detailed-description",children:[],level:2},{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using Type",id:"using-type",children:[],level:3},{value:"using Parent",id:"using-parent",children:[],level:3},{value:"using Key",id:"using-key",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function Cache",id:"function-cache",children:[],level:3},{value:"function Cache",id:"function-cache-1",children:[],level:3},{value:"function Cache",id:"function-cache-2",children:[],level:3},{value:"function begin",id:"function-begin",children:[],level:3},{value:"function end",id:"function-end",children:[],level:3},{value:"function begin",id:"function-begin-1",children:[],level:3},{value:"function end",id:"function-end-1",children:[],level:3},{value:"function findOneWithObject",id:"function-findonewithobject",children:[],level:3},{value:"function insert",id:"function-insert",children:[],level:3},{value:"function emplace",id:"function-emplace",children:[],level:3},{value:"function find",id:"function-find",children:[],level:3},{value:"function find",id:"function-find-1",children:[],level:3},{value:"function erase",id:"function-erase",children:[],level:3},{value:"function erase",id:"function-erase-1",children:[],level:3}],level:2}],p={toc:s};function d(e){var n=e.components,t=(0,c.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"#detailed-description"},"More...")),(0,i.kt)("p",null,"Inherits from CacheParent< _Type >"),(0,i.kt)("h2",{id:"detailed-description"},"Detailed Description"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class _Type >\nstruct SleepyDiscord::Cache;\n")),(0,i.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,i.kt)("h3",{id:"using-type"},"using Type"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::Type =  _Type;\n")),(0,i.kt)("h3",{id:"using-parent"},"using Parent"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::Parent =  CacheParent<_Type>;\n")),(0,i.kt)("h3",{id:"using-key"},"using Key"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::Key =  typename Snowflake<Type>::RawType;\n")),(0,i.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,i.kt)("h3",{id:"function-cache"},"function Cache"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Cache()\n")),(0,i.kt)("h3",{id:"function-cache-1"},"function Cache"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Cache(\n    Parent map\n)\n")),(0,i.kt)("h3",{id:"function-cache-2"},"function Cache"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class InputIterator >\ninline Cache(\n    InputIterator first,\n    InputIterator last\n)\n")),(0,i.kt)("h3",{id:"function-begin"},"function begin"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline iterator begin()\n")),(0,i.kt)("h3",{id:"function-end"},"function end"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline iterator end()\n")),(0,i.kt)("h3",{id:"function-begin-1"},"function begin"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const_iterator begin() const\n")),(0,i.kt)("h3",{id:"function-end-1"},"function end"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const_iterator end() const\n")),(0,i.kt)("h3",{id:"function-findonewithobject"},"function findOneWithObject"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Container ,\nclass Object >\ninline const_iterator findOneWithObject(\n    Container Type::* list,\n    const Snowflake< Object > & objectID\n)\n")),(0,i.kt)("h3",{id:"function-insert"},"function insert"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline std::pair< iterator, bool > insert(\n    Type & value\n)\n")),(0,i.kt)("h3",{id:"function-emplace"},"function emplace"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class... Args>\ninline std::pair< iterator, bool > emplace(\n    const json::Value & value\n)\n")),(0,i.kt)("h3",{id:"function-find"},"function find"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline iterator find(\n    const Key & key\n)\n")),(0,i.kt)("h3",{id:"function-find-1"},"function find"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const_iterator find(\n    const Key & key\n) const\n")),(0,i.kt)("h3",{id:"function-erase"},"function erase"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline iterator erase(\n    const_iterator pos\n)\n")),(0,i.kt)("h3",{id:"function-erase-1"},"function erase"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"inline iterator erase(\n    const_iterator first,\n    const_iterator last\n)\n")),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}d.isMDXComponent=!0}}]);