"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[2779],{3905:function(e,r,n){n.d(r,{Zo:function(){return l},kt:function(){return E}});var o=n(7294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function t(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?t(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,o,a=function(e,r){if(null==e)return{};var n,o,a={},t=Object.keys(e);for(o=0;o<t.length;o++)n=t[o],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(o=0;o<t.length;o++)n=t[o],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=o.createContext({}),i=function(e){var r=o.useContext(d),n=r;return e&&(n="function"==typeof e?e(r):c(c({},r),e)),n},l=function(e){var r=i(e.components);return o.createElement(d.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},p=o.forwardRef((function(e,r){var n=e.components,a=e.mdxType,t=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=i(n),E=a,b=p["".concat(d,".").concat(E)]||p[E]||u[E]||t;return n?o.createElement(b,c(c({ref:r},l),{},{components:n})):o.createElement(b,c({ref:r},l))}));function E(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var t=n.length,c=new Array(t);c[0]=p;var s={};for(var d in r)hasOwnProperty.call(r,d)&&(s[d]=r[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var i=2;i<t;i++)c[i]=n[i];return o.createElement.apply(null,c)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3395:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return i},toc:function(){return l},default:function(){return p}});var o=n(3117),a=n(102),t=(n(7294),n(3905)),c=["components"],s={title:"sleepy_discord/sd_error.cpp"},d=void 0,i={unversionedId:"reference/Files/sd__error_8cpp",id:"reference/Files/sd__error_8cpp",title:"sleepy_discord/sd_error.cpp",description:"Namespaces",source:"@site/docs/reference/Files/sd__error_8cpp.md",sourceDirName:"reference/Files",slug:"/reference/Files/sd__error_8cpp",permalink:"/sleepy-discord/docs/reference/Files/sd__error_8cpp",tags:[],version:"current",frontMatter:{title:"sleepy_discord/sd_error.cpp"},sidebar:"Reference",previous:{title:"include/sleepy_discord/rate_limiter.h",permalink:"/sleepy-discord/docs/reference/Files/rate__limiter_8h"},next:{title:"sleepy_discord/server.cpp",permalink:"/sleepy-discord/docs/reference/Files/server_8cpp"}},l=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],u={toc:l};function p(e){var r=e.components,n=(0,a.Z)(e,c);return(0,t.kt)("wrapper",(0,o.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,t.kt)("h2",{id:"namespaces"},"Namespaces"),(0,t.kt)("table",null,(0,t.kt)("thead",{parentName:"table"},(0,t.kt)("tr",{parentName:"thead"},(0,t.kt)("th",{parentName:"tr",align:null},"Name"))),(0,t.kt)("tbody",{parentName:"table"},(0,t.kt)("tr",{parentName:"tbody"},(0,t.kt)("td",{parentName:"tr",align:null},(0,t.kt)("strong",{parentName:"td"},(0,t.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,t.kt)("h2",{id:"source-code"},"Source code"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "client.h"\n\nnamespace SleepyDiscord {\n    void BaseDiscordClient::setError(int errorCode) {\n        ErrorCode code = static_cast<ErrorCode>(errorCode);\n        switch (errorCode) {\n        //HTTP Response/Error Codes\n        case OK                 : onError(code, "The request completed successfully"                                             ); break;\n        case CREATED            : onError(code, "The entity was created successfully"                                            ); break;\n        case NO_CONTENT         : onError(code, "The request completed successfully but returned no content"                     ); break;\n        case NOT_MODIFIED       : onError(code, "The entity was not modified (no action was taken)"                              ); break;\n        case BAD_REQUEST        : onError(code, "The request was improperly formatted, or the server couldn\'t understand it"     ); break;\n        case UNAUTHORIZED       : onError(code, "The Authorization header was missing or invalid"                                ); break;\n        case FORBIDDEN          : onError(code, "The Authorization token you passed did not have permission to the resource"     ); break;\n        case NOT_FOUND          : onError(code, "The resource at the location specified doesn\'t exist"                           ); break;\n        case METHOD_NOT_ALLOWED : onError(code, "The HTTP method used is not valid for the location specified"                   ); break;\n        case TOO_MANY_REQUESTS  : onError(code, "You\'ve made too many requests"                                                  ); break;\n        case GATEWAY_UNAVAILABLE: onError(code, "There was not a gateway available to process your request. Wait a bit and retry"); break;\n        default:\n            if (500 <= errorCode && errorCode < 600) onError(code, "The server had an error processing your request (these are rare)");\n            else onError(code, "Unknown " + std::to_string(errorCode));\n            break;\n\n        //JSON Error Response\n        case 10001: onError(code, "Unknown account"                                                                                                ); break;\n        case 10002: onError(code, "Unknown application"                                                                                            ); break;\n        case 10003: onError(code, "Unknown channel"                                                                                                ); break;\n        case 10004: onError(code, "Unknown guild"                                                                                                  ); break;\n        case 10005: onError(code, "Unknown integration"                                                                                            ); break;\n        case 10006: onError(code, "Unknown invite"                                                                                                 ); break;\n        case 10007: onError(code, "Unknown member"                                                                                                 ); break;\n        case 10008: onError(code, "Unknown message"                                                                                                ); break;\n        case 10009: onError(code, "Unknown overwrite"                                                                                              ); break;\n        case 10010: onError(code, "Unknown provider"                                                                                               ); break;\n        case 10011: onError(code, "Unknown role"                                                                                                   ); break;\n        case 10012: onError(code, "Unknown token"                                                                                                  ); break;\n        case 10013: onError(code, "Unknown user"                                                                                                   ); break;\n        case 10014: onError(code, "Unknown Emoji"                                                                                                  ); break;\n        case 20001: onError(code, "Bots cannot use this endpoint"                                                                                  ); break;\n        case 20002: onError(code, "Only bots can use this endpoint"                                                                                ); break;\n        case 30001: onError(code, "Maximum number of guilds reached(100)"                                                                          ); break;\n        case 30002: onError(code, "Maximum number of friends reached(1000)"                                                                        ); break;\n        case 30003: onError(code, "Maximum number of pins reached(50)"                                                                             ); break;\n        case 30005: onError(code, "Maximum number of guild roles reached(250)"                                                                     ); break;\n        case 30010: onError(code, "Too many reactions"                                                                                             ); break;\n        case 40001: onError(code, "Unauthorized"                                                                                                   ); break;\n        case 50001: onError(code, "Missing access"                                                                                                 ); break;\n        case 50002: onError(code, "Invalid account type"                                                                                           ); break;\n        case 50003: onError(code, "Cannot execute action on a DM channel"                                                                          ); break;\n        case 50004: onError(code, "Embed disabled"                                                                                                 ); break;\n        case 50005: onError(code, "Cannot edit a message authored by another user"                                                                 ); break;\n        case 50006: onError(code, "Cannot send an empty message"                                                                                   ); break;\n        case 50007: onError(code, "Cannot send messages to this user"                                                                              ); break;\n        case 50008: onError(code, "Cannot send messages in a voice channel"                                                                        ); break;\n        case 50009: onError(code, "Channel verification level is too high"                                                                         ); break;\n        case 50010: onError(code, "OAuth2 application does not have a bot"                                                                         ); break;\n        case 50011: onError(code, "OAuth2 application limit reached"                                                                               ); break;\n        case 50012: onError(code, "Invalid OAuth state"                                                                                            ); break;\n        case 50013: onError(code, "Missing permissions"                                                                                            ); break;\n        case 50014: onError(code, "Invalid authentication token"                                                                                   ); break;\n        case 50015: onError(code, "Note is too long"                                                                                               ); break;\n        case 50016: onError(code, "Provided too few or too many messages to delete. Must provide at least 2 and fewer than 100 messages to delete."); break;\n        case 50019: onError(code, "A message can only be pinned to the channel it was sent in"                                                     ); break;\n        case 50034: onError(code, "A message provided was too old to bulk delete"                                                                  ); break;\n        case 90001: onError(code, "Reaction Blocked"                                                                                               ); break;\n\n        //Disconnections\n        case UNKNOWN_ERROR          : onError(code, "unknown error - We\'re not sure what went wrong. Try reconnecting?"                                                                  ); break;\n        case UNKNOWN_OPCODE         : onError(code, "unknown opcode - You sent an invalid Gateway OP Code. Don\'t do that!"                                                               ); break;\n        case DECODE_ERROR           : onError(code, "decode error - You sent an invalid payload to us. Don\'t do that!"                                                                   ); break;\n        case NOT_AUTHENTICATED      : onError(code, "not authenticated - You sent us a payload prior to identifying."                                                                    ); break;\n        case AUTHENTICATION_FAILED  : onError(code, "authentication failed - The account token sent with your identify payload is incorrect."                                            ); break;\n        case ALREADY_AUTHENTICATED  : onError(code, "already authenticated - You sent more than one identify payload. Don\'t do that!"                                                    ); break;\n        case SESSION_NO_LONGER_VALID: onError(code, "Your session is no longer valid."                                                                                                   ); break;\n        case INVALID_SEQ            : onError(code, "invalid seq - The sequence sent when resuming the session was invalid. Reconnect and start a new session."                          ); break;\n        case RATE_LIMITED           : onError(code, "rate limited - Woah nelly!You\'re sending payloads to us too quickly. Slow it down!"                                                 ); break;\n        case SESSION_TIMEOUT        : onError(code, "session timeout - Your session timed out.Reconnect and start a new one."                                                            ); break;\n        case INVALID_SHARD          : onError(code, "invalid shard - You sent us an invalid shard when identifying."                                                                     ); break;\n        case SHARDING_REQUIRED      : onError(code, "sharding required - The session would have handled too many guilds - you are required to shard your connection in order to connect."); break;\n        case UNKNOWN_PROTOCOL       : onError(code, "We didn\'t recognize the protocol you sent."                                                                                         ); break;\n        case INVALID_INTENTS        : onError(code, "You sent an invalid intent for a Gateway Intent."                                                                                   ); break;\n        case DISALLOWED_INTENTS     : onError(code, "You sent a disallowed intent for a Gateway Intent. You may have tried to specify an intent that you have not enabled for."          ); break;\n        case VOICE_SERVER_CRASHED   : onError(code, "The server crashed. Our bad! Try resuming."                                                                                         ); break;\n        case UNKNOWN_ENCRYPTION_MODE: onError(code, "We didn\'t recognize your encryption."                                                                                               ); break;\n\n        //Sleepy Errors\n        case RECONNECTING   : onError(code, "Reconnect function used or bad connection detected"               ); break;\n        case CONNECT_FAILED : onError(code, "Failed to connect to the Discord api after 4 trys"                ); break;\n        case EVENT_UNKNOWN  : onError(code, "Unexpected or unknown event occurred"                             ); break;\n        case GATEWAY_FAILED : onError(code, "Could not get the gateway"                                        ); break;\n        case GENERAL_ERROR  : onError(code, "A wild error appeared"                                            ); break;\n        case LAZY_ERROR     : onError(code, "The programmer was too lazy to give this error a code and message"); break;\n        case ERROR_NOTE     : onError(code, "This is subposed to be a note"                                    ); break;\n        case VOICE_NO_SODIUM: onError(code, "Failed to init libsodium. Try linking libsodium?"                 ); break;\n        case VOICE_NO_OPUS  : onError(code, "Failed to init libopus. Try linking libopus?"                     ); break;\n        case CANT_SCHEDULE  : onError(code, "The Discord Client\'s scheduleHandler is not set"                  ); break;\n        }\n    }\n}\n')),(0,t.kt)("hr",null),(0,t.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}p.isMDXComponent=!0}}]);