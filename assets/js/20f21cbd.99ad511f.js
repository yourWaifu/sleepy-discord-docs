"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[6785],{3905:function(e,r,n){n.d(r,{Zo:function(){return l},kt:function(){return f}});var t=n(7294);function s(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){s(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,s=function(e,r){if(null==e)return{};var n,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(s[n]=e[n]);return s}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=t.createContext({}),i=function(e){var r=t.useContext(p),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},l=function(e){var r=i(e.components);return t.createElement(p.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,s=e.mdxType,o=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=i(n),f=s,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||o;return n?t.createElement(m,a(a({ref:r},l),{},{components:n})):t.createElement(m,a({ref:r},l))}));function f(e,r){var n=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=u;var c={};for(var p in r)hasOwnProperty.call(r,p)&&(c[p]=r[p]);c.originalType=e,c.mdxType="string"==typeof e?e:s,a[1]=c;for(var i=2;i<o;i++)a[i]=n[i];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2979:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return i},toc:function(){return l},default:function(){return u}});var t=n(3117),s=n(102),o=(n(7294),n(3905)),a=["components"],c={title:"sleepy_discord/cpr_session.cpp"},p=void 0,i={unversionedId:"reference/Files/cpr__session_8cpp",id:"reference/Files/cpr__session_8cpp",title:"sleepy_discord/cpr_session.cpp",description:"Namespaces",source:"@site/docs/reference/Files/cpr__session_8cpp.md",sourceDirName:"reference/Files",slug:"/reference/Files/cpr__session_8cpp",permalink:"/sleepy-discord/docs/reference/Files/cpr__session_8cpp",tags:[],version:"current",frontMatter:{title:"sleepy_discord/cpr_session.cpp"},sidebar:"Reference",previous:{title:"include/sleepy_discord/compression.h",permalink:"/sleepy-discord/docs/reference/Files/compression_8h"},next:{title:"include/sleepy_discord/cpr_session.h",permalink:"/sleepy-discord/docs/reference/Files/cpr__session_8h"}},l=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:l};function u(e){var r=e.components,n=(0,s.Z)(e,a);return(0,o.kt)("wrapper",(0,t.Z)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"namespaces"},"Namespaces"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,o.kt)("h2",{id:"source-code"},"Source code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "cpr_session.h"\n#ifndef NONEXISTENT_CPR\n\nnamespace SleepyDiscord {\n    void CPRSession::setHeader(const std::vector<HeaderPair>& header) {\n        cpr::Header head;\n        for (HeaderPair pair : header)\n            head.insert({ pair.name, pair.value });\n        session.SetHeader(head);\n    }\n\n    void CPRSession::setMultipart(const std::vector<Part>& parts) {\n        std::vector<cpr::Part> cprParts;\n        for (Part const & m : parts) {\n            if (m.isFile) cprParts.push_back(cpr::Part(m.name, cpr::File(m.value)));\n            else          cprParts.push_back(cpr::Part(m.name, m.value));\n        }\n\n        muiltpart.parts = cprParts;\n        session.SetMultipart(muiltpart);\n    }\n\n    Response CPRSession::request(RequestMethod method) {\n        return perform(method);\n    }\n\n    Response CPRSession::perform(RequestMethod method) {\n        cpr::Response response;\n        switch (method) {\n        case Post  : response = session.Post  (); break;\n        case Patch : response = session.Patch (); break;\n        case Delete: response = session.Delete(); break;\n        case Get   : response = session.Get   (); break;\n        case Put   : response = session.Put   (); break;\n        default    : return Response(); break;\n        }\n\n        Response target;\n        target.statusCode = response.status_code;\n        target.text = response.text;\n        for (std::pair<std::string, std::string> i : response.header) {\n            target.header.insert(i);\n        }\n        return target;\n    }\n}\n#endif\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);