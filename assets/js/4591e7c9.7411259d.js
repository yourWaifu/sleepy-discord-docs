"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[5086],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return _}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(t),_=a,m=u["".concat(i,".").concat(_)]||u[_]||d[_]||s;return t?r.createElement(m,l(l({ref:n},p),{},{components:t})):r.createElement(m,l({ref:n},p))}));function _(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,l=new Array(s);l[0]=u;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<s;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9604:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var r=t(3117),a=t(102),s=(t(7294),t(3905)),l=["components"],o={title:"include/sleepy_discord/channel.h"},i=void 0,c={unversionedId:"reference/Files/channel_8h",id:"reference/Files/channel_8h",title:"include/sleepy_discord/channel.h",description:"Namespaces",source:"@site/docs/reference/Files/channel_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/channel_8h",permalink:"/sleepy-discord/docs/reference/Files/channel_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/channel.h"},sidebar:"Reference",previous:{title:"sleepy_discord/channel.cpp",permalink:"/sleepy-discord/docs/reference/Files/channel_8cpp"},next:{title:"sleepy_discord/client.cpp",permalink:"/sleepy-discord/docs/reference/Files/client_8cpp"}},p=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:p};function u(e){var n=e.components,t=(0,a.Z)(e,l);return(0,s.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"namespaces"},"Namespaces"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,s.kt)("h2",{id:"classes"},"Classes"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_overwrite"},"SleepyDiscord::Overwrite")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_get_default_3_01_overwrite_1_1_type_01_4"},"SleepyDiscord::GetDefault< Overwrite::Type >")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_channel"},"SleepyDiscord::Channel")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_get_default_3_01_channel_1_1_channel_type_01_4"},"SleepyDiscord::GetDefault< Channel::ChannelType >")))))),(0,s.kt)("h2",{id:"source-code"},"Source code"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <string>\n#include "user.h"\n#include "permissions.h"\n#include "snowflake.h"\n\nnamespace SleepyDiscord {\n    struct Overwrite : IdentifiableDiscordObject<Overwrite> {\n        Overwrite() = default;\n        //Overwrite(const std::string * rawJson);\n        Overwrite(const json::Value & rawJSON);\n        Overwrite(const nonstd::string_view& json) :\n            Overwrite(json::fromJSON<Overwrite>(json)) {\n        }\n        //Overwrite(const json::Values values);\n        ~Overwrite() {}\n        enum class Type : int {\n            TYPE_NONE = -400,\n            role = 0,\n            member = 1\n        };\n        Type type;\n        Permission allow = Permission::NONE;\n        Permission deny = Permission::NONE;\n\n        //const static std::initializer_list<const char*const> fields;\n        JSONStructStart\n            std::make_tuple(\n                json::pair                      (&Overwrite::ID   , "id"   , json::REQUIRIED_FIELD),\n                json::pair<json::EnumTypeHelper>(&Overwrite::type , "type" , json::REQUIRIED_FIELD),\n                json::pair<UInt64StrTypeHelper >(&Overwrite::allow, "allow", json::REQUIRIED_FIELD),\n                json::pair<UInt64StrTypeHelper >(&Overwrite::deny , "deny" , json::REQUIRIED_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    template<>\n    struct GetDefault<Overwrite::Type> {\n        static inline const Overwrite::Type get() {\n            return Overwrite::Type::TYPE_NONE;\n        }\n    };\n\n    //forward declearion\n    struct Server;\n    struct Message;\n\n    struct Channel : IdentifiableDiscordObject<Channel> {\n    public:\n        Channel() = default;\n        //Channel(const std::string * rawJson);\n        Channel(const json::Value & rawJSON);\n        Channel(const nonstd::string_view& json) :\n            Channel(json::fromJSON<Channel>(json)) {\n        }\n        //Channel(const json::Values values);\n        ~Channel();\n        \n        enum ChannelType {\n            CHANNEL_TYPE_NONE = -1,\n            SERVER_TEXT       = 0,\n            DM                = 1,\n            SERVER_VOICE      = 2,\n            GROUP_DM          = 3,\n            SERVER_CATEGORY   = 4,\n            GUILD_NEWS        = 5,\n            GUILD_STORE       = 6,\n            ANNOUNCEMENT_THREAD = 10,\n            PUBLIC_THREAD       = 11,\n            PRIVATE_THREAD      = 12,\n            GUILD_STAGE_VOICE = 13,\n            GUILD_DIRECTORY   = 14,\n            GUILD_FORUM       = 15,\n            GUILD_MEDIA       = 16,\n        } type = CHANNEL_TYPE_NONE;\n        Snowflake<Server>      serverID;             //optional,                  used in server       channels\n        int                    position = 0;         //optional,                  used in server       channels\n        std::vector<Overwrite> permissionOverwrites; //optional,                  used in server       channels\n        std::string            name;                 //optional,              not used in           DM channels\n        std::string            topic;                //optional and nullable,     used in server  text channels\n        bool                   isNSFW = false;       //optional,                  used in server       channels\n        Snowflake<Message>     lastMessageID;        //optional,                  used in         text channels\n        int                    bitrate = 0;          //optional,                  used in        voice channels\n        int                    userLimit = 0;        //optional,                  used in        voice channels\n        std::vector<User>      recipients;           //optional,                  used in all       DM channels\n        std::string            icon;                 //optional and nullable,     used in group     DM channels\n        Snowflake<User>        ownerID;              //optional,                  used in group     DM channels\n        //Snowflake<>          applicationID;        //??????????????????????     used in group     DM channels\n        Snowflake<Channel>     parentID;             //optional and nullable,     used in server       channels\n        std::string            lastPinTimestamp;     //optional,                  used in         text channels\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair                           (&Channel::ID                   , "id"                   , json::REQUIRIED_FIELD        ),\n                json::pair<json::EnumTypeHelper     >(&Channel::type                 , "type"                 , json::REQUIRIED_FIELD        ),\n                json::pair                           (&Channel::serverID             , "guild_id"             , json::OPTIONAL_FIELD         ),\n                json::pair                           (&Channel::position             , "position"             , json::OPTIONAL_FIELD         ),\n                json::pair<json::ContainerTypeHelper>(&Channel::permissionOverwrites , "permission_overwrites", json::OPTIONAL_FIELD         ),\n                json::pair                           (&Channel::name                 , "name"                 , json::OPTIONAL_FIELD         ),\n                json::pair                           (&Channel::topic                , "topic"                , json::OPTIONAL_NULLABLE_FIELD),\n                json::pair                           (&Channel::isNSFW               , "nsfw"                 , json::OPTIONAL_FIELD         ),\n                json::pair                           (&Channel::lastMessageID        , "last_message_id"      , json::OPTIONAL_NULLABLE_FIELD),\n                json::pair                           (&Channel::bitrate              , "bitrate"              , json::OPTIONAL_FIELD         ),\n                json::pair                           (&Channel::userLimit            , "user_limit"           , json::OPTIONAL_FIELD         ),\n                json::pair<json::ContainerTypeHelper>(&Channel::recipients           , "recipients"           , json::OPTIONAL_FIELD         ),\n                json::pair                           (&Channel::icon                 , "icon"                 , json::OPTIONAL_NULLABLE_FIELD),\n                json::pair                           (&Channel::ownerID              , "owner_id"             , json::OPTIONAL_FIELD         ),\n                json::pair                           (&Channel::parentID             , "parent_id"            , json::OPTIONAL_NULLABLE_FIELD),\n                json::pair                           (&Channel::lastPinTimestamp     , "last_pin_timestamp"   , json::OPTIONAL_FIELD         )\n            );\n        JSONStructEnd\n    };\n\n    template<>\n    struct GetDefault<Channel::ChannelType> {\n        static inline const Channel::ChannelType get() {\n            return Channel::ChannelType::CHANNEL_TYPE_NONE;\n        }\n    };\n}\n')),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);