"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[3546],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return t?o.createElement(y,i(i({ref:n},p),{},{components:t})):o.createElement(y,i({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=u;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var c=2;c<s;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9534:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var o=t(3117),r=t(102),s=(t(7294),t(3905)),i=["components"],a={title:"Using only Sleepy Discord"},l=void 0,c={unversionedId:"only-sleepy-discord",id:"only-sleepy-discord",title:"Using only Sleepy Discord",description:"There are at 3 things that the library needs in order to function the Websocket client and Sessions. There are also a few optional parts that allow for optional features such as voice. Currently, The only one optional part is UDP.",source:"@site/docs/only-sleepy-discord.md",sourceDirName:".",slug:"/only-sleepy-discord",permalink:"/sleepy-discord/docs/only-sleepy-discord",tags:[],version:"current",lastUpdatedAt:1698528022,formattedLastUpdatedAt:"10/28/2023",frontMatter:{title:"Using only Sleepy Discord"},sidebar:"Docs",previous:{title:"Common Errors",permalink:"/sleepy-discord/docs/common-build-errors"},next:{title:"Events",permalink:"/sleepy-discord/docs/events"}},p=[{value:"HTTPS",id:"https",children:[],level:2},{value:"WebSockets",id:"websockets",children:[],level:2},{value:"Async I/O",id:"async-io",children:[],level:2}],d={toc:p};function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"There are at 3 things that the library needs in order to function: WebSocket Secure, HTTPS, and Async Input/Output. The library splits this up into a 2 main parts: the Websocket client and Sessions. There are also a few optional parts that allow for optional features such as voice. Currently, The only one optional part is UDP."),(0,s.kt)("aside",null," There are a actually a few libraries that is part of Sleepy Discord. They are json and string view libraries. However, those are cross-platform and shouldn't cause any issues with compatibility. "),(0,s.kt)("h2",{id:"https"},"HTTPS"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class MySession : public SleepyDiscord::GenericSession {\n    MySession() = default;\n}\n")),(0,s.kt)("p",null,"You'll need to create a class that inherits ",(0,s.kt)("inlineCode",{parentName:"p"},"GenericSession"),"."),(0,s.kt)("p",null,"This rest is mostly self-explanatory. You basicity implement functions that do what it the function name suggest."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"void setUrl(const std::string& _url) override;\n")),(0,s.kt)("p",null,"This is self-explanatory."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"void setBody(const std::string* body) override;\n")),(0,s.kt)("p",null,"body is the data that will be sent in the body of the HTTP request."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"void setHeader(const std::vector<SleepyDiscord::HeaderPair>& header) override;\n")),(0,s.kt)("p",null,"header is a list of header fields. ",(0,s.kt)("inlineCode",{parentName:"p"},"SleepyDiscord::HeaderPair")," has two variables, name and value."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"void setMultipart(const std::initializer_list<SleepyDiscord::Part>& parts) override;\n")),(0,s.kt)("p",null,"Like header, parts is a list of parts. SleepyDiscord::Part has 3 variables, name, value, and isFile."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"SleepyDiscord::Response Post  () override;\nSleepyDiscord::Response Patch () override;\nSleepyDiscord::Response Delete() override;\nSleepyDiscord::Response Get   () override;\nSleepyDiscord::Response Put   () override;\n")),(0,s.kt)("p",null,"This sends the https request. The only difference between each function is that they use different HTTP methods."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"//Execute this line at the start of your program\nSleepyDiscord::CustomInit SleepyDiscord::Session::init = \n    []()->SleepyDiscord::GenericSession* { return new MySession; };\n")),(0,s.kt)("p",null,"You need to set SleepyDiscord::Session::init to a function that returns a pointer to a new Session. You can put this in the beginning of your cpp file after including the header file with your session class."),(0,s.kt)("h2",{id:"websockets"},"WebSockets"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class MyWebsocketConnection : public SleepyDiscord::GenericWebsocketConnection {\npublic:\n    MyWebsocketConnection() {}\n    MyWebsocketConnection(std::string token) {\n        start(token);\n    }\n\n    MyConnectionHandle handle;\n}\n")),(0,s.kt)("p",null,"You are going to need a WebSocket Connection class that the library will pass around in a ",(0,s.kt)("inlineCode",{parentName:"p"},"std::shared_ptr<GenericWebsocketConnection>")," called ",(0,s.kt)("inlineCode",{parentName:"p"},"WebsocketConnection"),". ",(0,s.kt)("inlineCode",{parentName:"p"},"GenericWebsocketConnection")," is an empty class so this acts like a ",(0,s.kt)("inlineCode",{parentName:"p"},"std::shared_ptr<void>"),". You can put anything you want in this class, but you'll likely need to handle in there. You'll also likely want to store a reference to the ",(0,s.kt)("inlineCode",{parentName:"p"},"GenericMessageReceiver")," in it, but it's optional if you don't want to. We'll talk about ",(0,s.kt)("inlineCode",{parentName:"p"},"GenericMessageReceiver")," later. You'll also need to call ",(0,s.kt)("inlineCode",{parentName:"p"},"start")," at some point, the constructor isn't a bad place to do this."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"class MyWebsocketClient : public SleepyDiscord::BaseDiscordClient {\n    MyWebsocketClient() = default;\n}\n\n//The typedef is optional.\ntypedef MyWebsocketClient DiscordClient;\n")),(0,s.kt)("p",null,"The WebSocket client is actually a child of The ",(0,s.kt)("inlineCode",{parentName:"p"},"BaseDiscordClient")," and using a typedef is renamed to ",(0,s.kt)("inlineCode",{parentName:"p"},"DiscordClient"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"//Add these function decelerations to your WebsocketClient\n//Optional: These should can be set to private\nbool connect(\n    const std::string & uri,\n    GenericMessageReceiver* messageProcessor,\n    WebsocketConnection& connection\n) override {\n    MyConnectionHandle handle = websocket.connect(uri); //connect and get handle from websocket library\n    connection = std::make_shared<MyWebsocketConnection>(messageProcessor, handle);\n    return false; //you don't need to return a bool, it was related to a removed feature.\n}\n\nvoid disconnect(\n    unsigned int code,\n    const std::string reason,\n    WebsocketConnection& connection\n) override {\n    connection.get<MyWebsocketConnection>().handle.disconnect()\n}\n\nvoid send(\n    std::string message,\n    WebsocketConnection& connection\n) override {\n    connection.get<MyWebsocketConnection>().handle.send(message);\n}\n")),(0,s.kt)("p",null,"There are 3 virtual functions that you need to override: connect, disconnect, and send. In ",(0,s.kt)("inlineCode",{parentName:"p"},"connect"),", set ",(0,s.kt)("inlineCode",{parentName:"p"},"connection")," to a new connection object with you ",(0,s.kt)("inlineCode",{parentName:"p"},"WebsocketConnection")," class. Use ",(0,s.kt)("inlineCode",{parentName:"p"},"std::shared_ptr"),"'s ",(0,s.kt)("inlineCode",{parentName:"p"},"get")," to get your ",(0,s.kt)("inlineCode",{parentName:"p"},"WebSocketConnection"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"//Add the equivalent code to your connect function\nwebsocket.onOpen = [=]() {\n    messageProcessor->initialize();\n}\n\nwebsocket.onClose = [=](int16_t closeCode) {\n    messageProcessor->processCloseCode(closeCode);\n}\n\nwebsocket.onMessage = [=](std::string message) {\n    messageProcessor->processMessage(handle.getMessage(message))\n}\n\nwebsocket.onFail = [=]() {\n    messageProcessor->handleFailToConnect();\n}\n")),(0,s.kt)("p",null,"This is where you'll need ",(0,s.kt)("inlineCode",{parentName:"p"},"messageProcessor"),", you'll need to call it's member functions in the websocket callbacks. If you can't capture ",(0,s.kt)("inlineCode",{parentName:"p"},"messageProcessor"),", then you'll want to have a reference to it in your connection class."),(0,s.kt)("h2",{id:"async-io"},"Async I/O"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"//Add these function declarations to your WebsocketClient class\nvoid run();\nTimer schedule(TimedTask code, const time_t milliseconds) override;\n")),(0,s.kt)("p",null,"There's 1 function you'll need to implement, ",(0,s.kt)("inlineCode",{parentName:"p"},"schedule"),". ",(0,s.kt)("inlineCode",{parentName:"p"},"run")," is optional. Async I/O is done inside the ",(0,s.kt)("inlineCode",{parentName:"p"},"WebSocketClient")," so place them in there."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"//Add the equivalent code\nTimer MyWebsocketClient::schedule(TimedTask code, const time_t milliseconds) {\n    Library::Timer timer = Library::createTimer(code, milliseconds);\n    return Timer([timer](){\n        timer.stop();\n    });\n}\n")),(0,s.kt)("p",null,"Create a timer that will call ",(0,s.kt)("inlineCode",{parentName:"p"},"code")," in ",(0,s.kt)("inlineCode",{parentName:"p"},"milliseconds")," milliseconds. Then, return a function to stop the timer."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"//Here's an example of run\nvoid run() {\n    Library::run();\n}\n")))}u.isMDXComponent=!0}}]);