"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[3282],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(n),f=a,y=d["".concat(i,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(y,l(l({ref:t},s),{},{components:n})):r.createElement(y,l({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7078:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),l=["components"],c={title:"SleepyDiscord::json::ArrayWrapper"},i=void 0,p={unversionedId:"reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper",id:"reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper",title:"SleepyDiscord::json::ArrayWrapper",description:"More...",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::json::ArrayWrapper"},sidebar:"Reference",previous:{title:"SleepyDiscord::json::ArrayValueWrapper< Type, typename std::enable_if< std::is_constructible< Type, const Value >::value >::type >",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_value_wrapper_3_01_type_00_01typename_01std_1_1enable__ic278f49c55d1ff83c8431dd68b94506f"},next:{title:"SleepyDiscord::json::ArrayWrapper< Value, Base >",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_array_wrapper_3_01_value_00_01_base_01_4"}},s=[{value:"Detailed Description",id:"detailed-description",children:[],level:2},{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using base",id:"using-base",children:[],level:3},{value:"using DocType",id:"using-doctype",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function get",id:"function-get",children:[],level:3},{value:"function get",id:"function-get-1",children:[],level:3},{value:"function get",id:"function-get-2",children:[],level:3},{value:"function get",id:"function-get-3",children:[],level:3},{value:"function get",id:"function-get-4",children:[],level:3},{value:"function get",id:"function-get-5",children:[],level:3},{value:"function get",id:"function-get-6",children:[],level:3},{value:"function vector",id:"function-vector",children:[],level:3},{value:"function list",id:"function-list",children:[],level:3},{value:"function cArray",id:"function-carray",children:[],level:3},{value:"function operator Values",id:"function-operator-values",children:[],level:3},{value:"function operator std::vector&lt; TypeToConvertTo &gt;",id:"function-operator-stdvector-typetoconvertto-",children:[],level:3},{value:"function operator std::list&lt; TypeToConvertTo &gt;",id:"function-operator-stdlist-typetoconvertto-",children:[],level:3}],level:2}],u={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#detailed-description"},"More...")),(0,o.kt)("p",null,"Inherits from typename ArrayValueWrapper::type"),(0,o.kt)("h2",{id:"detailed-description"},"Detailed Description"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class TypeToConvertTo ,\nclass Base  =typename ArrayValueWrapper<TypeToConvertTo>::type>\nstruct SleepyDiscord::json::ArrayWrapper;\n")),(0,o.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,o.kt)("h3",{id:"using-base"},"using base"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::json::ArrayWrapper< TypeToConvertTo, Base >::base =  Base;\n")),(0,o.kt)("h3",{id:"using-doctype"},"using DocType"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::json::ArrayWrapper< TypeToConvertTo, Base >::DocType =  decltype(std::declval<Base>().getDoc());\n")),(0,o.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,o.kt)("h3",{id:"function-get"},"function get"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Container ,\nclass Value >\nstatic inline Container get(\n    Value & value,\n    std::true_type \n)\n")),(0,o.kt)("h3",{id:"function-get-1"},"function get"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Container ,\nclass Value >\nstatic inline Container get(\n    Value && value,\n    std::false_type \n)\n")),(0,o.kt)("h3",{id:"function-get-2"},"function get"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Container ,\nclass Value >\nstatic inline Container get(\n    Value && value\n)\n")),(0,o.kt)("h3",{id:"function-get-3"},"function get"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Container >\ninline Container get()\n")),(0,o.kt)("h3",{id:"function-get-4"},"function get"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template <template< class... > class Container,\ntypename Type  =TypeToConvertTo>\ninline Container< Type > get()\n")),(0,o.kt)("h3",{id:"function-get-5"},"function get"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Container >\ninline bool get(\n    Container & value\n)\n")),(0,o.kt)("h3",{id:"function-get-6"},"function get"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template <template< class... > class Container,\ntypename Type  =TypeToConvertTo>\ninline bool get(\n    Container< Type > & value\n)\n")),(0,o.kt)("h3",{id:"function-vector"},"function vector"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline std::vector< TypeToConvertTo > vector()\n")),(0,o.kt)("h3",{id:"function-list"},"function list"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline std::list< TypeToConvertTo > list()\n")),(0,o.kt)("h3",{id:"function-carray"},"function cArray"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline TypeToConvertTo * cArray()\n")),(0,o.kt)("h3",{id:"function-operator-values"},"function operator Values"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline operator Values()\n")),(0,o.kt)("h3",{id:"function-operator-stdvector-typetoconvertto-"},"function operator std::vector< TypeToConvertTo >"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline operator std::vector< TypeToConvertTo >()\n")),(0,o.kt)("h3",{id:"function-operator-stdlist-typetoconvertto-"},"function operator std::list< TypeToConvertTo >"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline operator std::list< TypeToConvertTo >()\n")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}d.isMDXComponent=!0}}]);