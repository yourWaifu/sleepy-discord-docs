"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[2115],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=p(n),f=o,_=d["".concat(l,".").concat(f)]||d[f]||u[f]||a;return n?r.createElement(_,c(c({ref:t},s),{},{components:n})):r.createElement(_,c({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var p=2;p<a;p++)c[p]=n[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4540:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),c=["components"],i={title:"SleepyDiscord::Cache::const_iterator"},l=void 0,p={unversionedId:"reference/Classes/class_sleepy_discord_1_1_cache_1_1const__iterator",id:"reference/Classes/class_sleepy_discord_1_1_cache_1_1const__iterator",title:"SleepyDiscord::Cache::const_iterator",description:"Public Types Documentation",source:"@site/docs/reference/Classes/class_sleepy_discord_1_1_cache_1_1const__iterator.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/class_sleepy_discord_1_1_cache_1_1const__iterator",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_cache_1_1const__iterator",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::Cache::const_iterator"},sidebar:"Reference",previous:{title:"SleepyDiscord::CPRSession",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_c_p_r_session"},next:{title:"SleepyDiscord::Cache::iterator",permalink:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_cache_1_1iterator"}},s=[{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using Value",id:"using-value",children:[],level:3},{value:"using self_type",id:"using-self_type",children:[],level:3},{value:"using value_type",id:"using-value_type",children:[],level:3},{value:"using reference",id:"using-reference",children:[],level:3},{value:"using pointer",id:"using-pointer",children:[],level:3},{value:"using iterator_category",id:"using-iterator_category",children:[],level:3},{value:"using difference_type",id:"using-difference_type",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function const_iterator",id:"function-const_iterator",children:[],level:3},{value:"function operator++",id:"function-operator",children:[],level:3},{value:"function operator++",id:"function-operator-1",children:[],level:3},{value:"function operator*",id:"function-operator-2",children:[],level:3},{value:"function operator-&gt;",id:"function-operator-",children:[],level:3},{value:"function operator==",id:"function-operator-3",children:[],level:3},{value:"function operator!=",id:"function-operator-4",children:[],level:3},{value:"function getParent",id:"function-getparent",children:[],level:3}],level:2}],u={toc:s};function d(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,a.kt)("h3",{id:"using-value"},"using Value"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::const_iterator::Value =  typename Parent::const_iterator;\n")),(0,a.kt)("h3",{id:"using-self_type"},"using self_type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::const_iterator::self_type =  const_iterator;\n")),(0,a.kt)("h3",{id:"using-value_type"},"using value_type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::const_iterator::value_type =  Type;\n")),(0,a.kt)("h3",{id:"using-reference"},"using reference"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::const_iterator::reference =  Type&;\n")),(0,a.kt)("h3",{id:"using-pointer"},"using pointer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::const_iterator::pointer =  Type*;\n")),(0,a.kt)("h3",{id:"using-iterator_category"},"using iterator_category"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::const_iterator::iterator_category =  typename Value::iterator_category;\n")),(0,a.kt)("h3",{id:"using-difference_type"},"using difference_type"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::const_iterator::difference_type =  typename Value::difference_type;\n")),(0,a.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,a.kt)("h3",{id:"function-const_iterator"},"function const_iterator"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const_iterator(\n    Value iter\n)\n")),(0,a.kt)("h3",{id:"function-operator"},"function operator++"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline self_type operator++()\n")),(0,a.kt)("h3",{id:"function-operator-1"},"function operator++"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline self_type operator++(\n    int junk\n)\n")),(0,a.kt)("h3",{id:"function-operator-2"},"function operator*"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline reference operator*()\n")),(0,a.kt)("h3",{id:"function-operator-"},"function operator->"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline pointer operator->()\n")),(0,a.kt)("h3",{id:"function-operator-3"},"function operator=="),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline bool operator==(\n    const self_type & right\n)\n")),(0,a.kt)("h3",{id:"function-operator-4"},"function operator!="),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline bool operator!=(\n    const self_type & right\n)\n")),(0,a.kt)("h3",{id:"function-getparent"},"function getParent"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Value getParent()\n")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}d.isMDXComponent=!0}}]);