"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[3016],{3905:function(e,n,r){r.d(n,{Zo:function(){return d},kt:function(){return v}});var t=r(7294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,s=function(e,n){if(null==e)return{};var r,t,s={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},d=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(r),v=s,m=u["".concat(l,".").concat(v)]||u[v]||p[v]||a;return r?t.createElement(m,o(o({ref:n},d),{},{components:r})):t.createElement(m,o({ref:n},d))}));function v(e,n){var r=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=r.length,o=new Array(a);o[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var c=2;c<a;c++)o[c]=r[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4770:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var t=r(3117),s=r(102),a=(r(7294),r(3905)),o=["components"],i={title:"include/sleepy_discord/server.h"},l=void 0,c={unversionedId:"reference/Files/server_8h",id:"reference/Files/server_8h",title:"include/sleepy_discord/server.h",description:"Namespaces",source:"@site/docs/reference/Files/server_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/server_8h",permalink:"/sleepy-discord/docs/reference/Files/server_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/server.h"},sidebar:"Reference",previous:{title:"sleepy_discord/server.cpp",permalink:"/sleepy-discord/docs/reference/Files/server_8cpp"},next:{title:"include/sleepy_discord/session.h",permalink:"/sleepy-discord/docs/reference/Files/session_8h"}},d=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],p={toc:d};function u(e){var n=e.components,r=(0,s.Z)(e,o);return(0,a.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"namespaces"},"Namespaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,a.kt)("h2",{id:"classes"},"Classes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_server_member"},"SleepyDiscord::ServerMember")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_server"},"SleepyDiscord::Server")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_unavailable_server"},"SleepyDiscord::UnavailableServer")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_get_default_3_01_unavailable_server_1_1_available_flag_01_4"},"SleepyDiscord::GetDefault< UnavailableServer::AvailableFlag >")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_get_enum_base_type_3_01_unavailable_server_1_1_available_flag_01_4"},"SleepyDiscord::GetEnumBaseType< UnavailableServer::AvailableFlag >")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"class"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_server_cache"},"SleepyDiscord::ServerCache")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_server_widget"},"SleepyDiscord::ServerWidget")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_server_members_request"},"SleepyDiscord::ServerMembersRequest")))))),(0,a.kt)("h2",{id:"source-code"},"Source code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <string>\n#include "discord_object_interface.h"\n#include "user.h"\n#include "channel.h"\n#include "stage_instance.h"\n#include "snowflake.h"\n#include "cache.h"\n#include "voice.h"\n\nnamespace SleepyDiscord {\n    enum Permission : uint64_t;\n    struct Role;\n    struct StageInstance;\n    \n    /*Guild Member Structure\n    Field     Type     Description\n    user      object   user object\n    nick      string?  this users guild nickname (if one is set)\n    roles     array    array of role object id\'s\n    joined_at datetime date the user joined the guild\n    deaf      bool     if the user is deafened\n    mute      bool     if the user is muted\n    */\n    struct ServerMember : public IdentifiableDiscordObject<User> {\n        ServerMember() = default;\n        //ServerMember(const std::string * rawJson);\n        ServerMember(const nonstd::string_view& json) :\n            ServerMember(json::fromJSON<ServerMember>(json)) {}\n        ServerMember(const json::Value& json);\n        //ServerMember(const json::Values values);\n        User user;\n        std::string nick;\n        std::vector<Snowflake<Role>> roles;\n        std::string joinedAt;\n        bool deaf = false;\n        bool mute = false;\n        Permission permissions;\n        bool pending = false;\n\n        inline operator User&() {\n            return user;\n        }\n\n        //const static std::initializer_list<const char*const> fields;\n        JSONStructStart\n            std::make_tuple(\n                json::pair                           (&ServerMember::user    , "user"     , json::OPTIONAL_FIELD),\n                json::pair                           (&ServerMember::nick    , "nick"     , json::OPTIONAL_FIELD ),\n                json::pair<json::ContainerTypeHelper>(&ServerMember::roles   , "roles"    , json::OPTIONAL_FIELD),\n                json::pair                           (&ServerMember::joinedAt, "joined_at", json::OPTIONAL_FIELD),\n                json::pair                           (&ServerMember::deaf    , "deaf"     , json::OPTIONAL_FIELD),\n                json::pair                           (&ServerMember::mute    , "mute"     , json::OPTIONAL_FIELD),\n                json::pair<UInt64StrTypeHelper>      (&ServerMember::permissions, "permissions", json::OPTIONAL_FIELD),\n                json::pair                           (&ServerMember::pending , "pending"  , json::OPTIONAL_FIELD)\n            );\n        JSONStructEnd\n    };\n    \n    struct Server : public IdentifiableDiscordObject<Server> {\n        ~Server() = default;\n        Server() = default;\n        Server(const nonstd::string_view& json) :\n            Server(json::fromJSON<Server>(json)) {}\n        Server(const json::Value& json);\n        std::string name;\n        std::string icon;\n        std::string splash;\n        std::string discoverySplash;\n        Snowflake<User> ownerID;\n        Permission permissions;\n        std::string region;\n        std::string AFKchannelID;\n        int AFKTimeout;\n        bool embedEnable;\n        std::string embedChannelID;\n        int verificationLevel;\n        int defaultMessageNotifications;\n        int explicitContentFilter;\n        \n        std::list<Role> roles;\n        std::list<VoiceState> voiceStates;\n        //emojis\n        std::vector<std::string> features;\n        bool unavailable;\n        std::vector<StageInstance> stageInstances;\n        Snowflake<DiscordObject> applicationID;\n        Snowflake<Channel> systemChannelID;\n        int systemChannelFlags;\n        Snowflake<Channel> rulesChannelID;\n        //presences\n        int MFALevel;\n        std::string joinedAt;\n        int maxMembers = 0;\n        std::string vanityUrlCode;\n        std::string description;\n        std::string banner;\n        int premiumTier = 0;\n        int premiumSubscriptionCount = 0;\n        std::string preferredLocale;\n        Snowflake<Channel> publicUpdatesChannelID;\n        int maxVideoChannelUsers;\n        int approximateMemberCount;\n        int approximatePresenceCount;\n        int nsfwLevel = 0;\n        \n        //those are only filled in from the onServer event\n        bool large;\n        int memberCount = 0;\n        std::list<ServerMember> members;\n        std::list<Channel> channels;\n        std::list<Channel> threads;\n\n        std::list<ServerMember>::iterator findMember(const Snowflake<User> userID);\n        std::list<Channel>::iterator findChannel(const Snowflake<Channel> channelID);\n        std::list<Role>::iterator findRole(const Snowflake<Role> roleID);\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair                           (&Server::ID                         , "id"                           , json::REQUIRIED_FIELD),\n                json::pair                           (&Server::name                       , "name"                         , json::REQUIRIED_FIELD),\n                json::pair                           (&Server::icon                       , "icon"                         , json::NULLABLE_FIELD ),\n                json::pair                           (&Server::splash                     , "splash"                       , json::NULLABLE_FIELD ),\n                json::pair                           (&Server::discoverySplash            , "discovery_splash"             , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::ownerID                    , "owner_id"                     , json::OPTIONAL_FIELD ),\n                json::pair<UInt64StrTypeHelper      >(&Server::permissions                , "permissions"                  , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::region                     , "region"                       , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::AFKchannelID               , "afk_channel_id"               , json::NULLABLE_FIELD ),\n                json::pair                           (&Server::AFKTimeout                 , "afk_timeout"                  , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::embedEnable                , "widget_enabled"               , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::embedChannelID             , "widget_channel_id"            , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::verificationLevel          , "verification_level"           , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::defaultMessageNotifications, "default_message_notifications", json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::explicitContentFilter      , "explicit_content_filter"      , json::OPTIONAL_FIELD ),\n                json::pair<json::ContainerTypeHelper>(&Server::roles                      , "roles"                        , json::OPTIONAL_FIELD ),\n                json::pair<json::ContainerTypeHelper>(&Server::features                   , "features"                     , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::unavailable                , "unavailable"                  , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::MFALevel                   , "mfa_level"                    , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::applicationID              , "application_id"               , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::systemChannelID            , "system_channel_id"            , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::systemChannelFlags         , "system_channel_flags"         , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::rulesChannelID             , "rules_channel_id"             , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::joinedAt                   , "joined_at"                    , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::large                      , "large"                        , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::memberCount                , "member_count"                 , json::OPTIONAL_FIELD ),\n                json::pair<json::ContainerTypeHelper>(&Server::voiceStates                , "voice_states"                 , json::OPTIONAL_FIELD ),\n                json::pair<json::ContainerTypeHelper>(&Server::members                    , "members"                      , json::OPTIONAL_FIELD ),\n                json::pair<json::ContainerTypeHelper>(&Server::channels                   , "channels"                     , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::maxMembers                 , "max_members"                  , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::vanityUrlCode              , "vanity_url_code"              , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::description                , "description"                  , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::banner                     , "banner"                       , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::premiumTier                , "premium_tier"                 , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::premiumSubscriptionCount   , "premium_subscription_count"   , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::preferredLocale            , "preferred_locale"             , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::publicUpdatesChannelID     , "public_updates_channel_id"    , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::maxVideoChannelUsers       , "max_video_channel_users"      , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::approximateMemberCount     , "approximate_member_count"     , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::approximatePresenceCount   , "approximate_presence_count"   , json::OPTIONAL_FIELD ),\n                json::pair                           (&Server::nsfwLevel                  , "nsfw_level"                   , json::OPTIONAL_FIELD ),\n                json::pair<json::ContainerTypeHelper>(&Server::stageInstances             , "stage_instances"              , json::OPTIONAL_FIELD ),\n                json::pair<json::ContainerTypeHelper>(&Server::threads                    , "threads"                      , json::OPTIONAL_FIELD )\n            );\n        JSONStructEnd\n    };\n\n    struct UnavailableServer : public IdentifiableDiscordObject<Server> {\n        UnavailableServer() = default;\n        //UnavailableServer(const std::string * rawJson);\n        UnavailableServer(const nonstd::string_view& json) :\n            UnavailableServer(json::fromJSON<UnavailableServer>(json)) {}\n        UnavailableServer(const json::Value& json);\n        //UnavailableServer(const json::Values values);\n\n        enum class AvailableFlag {\n            NotSet = -2,\n            Unavaiable = true,\n            avaiable = false,\n        };\n        AvailableFlag unavailable = AvailableFlag::NotSet;\n\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&UnavailableServer::ID, "id", json::REQUIRIED_FIELD),\n                json::pair<json::EnumTypeHelper>\n                (&UnavailableServer::unavailable, "unavailable", json::OPTIONAL_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    template<>\n    struct GetDefault<UnavailableServer::AvailableFlag> {\n        static inline const UnavailableServer::AvailableFlag get() {\n            return UnavailableServer::AvailableFlag::NotSet;\n        } \n    };\n\n    template<>\n    struct GetEnumBaseType<UnavailableServer::AvailableFlag> {\n        //this makes the json wrapper know to use getBool instead of getInt\n        using Value = bool; \n    };\n\n    class ServerCache : public Cache<Server> {\n    public:\n        using Cache<Server>::Cache;\n        ServerCache() : Cache() {} //for some odd reason the default constructor isn\'t inherited\n        ServerCache(Cache<Server> list) : Cache<Server>(list) {}\n\n        /*\n        //Linear time complexity if unordered map: to do figure out how to do this with constant time complexity\n        template<class Container, class Object>\n        iterator findOneWithObject(Container Server::*list, const Snowflake<Object>& objectID) {\n            return std::find_if(begin(), end(), [&objectID, list](Server& server) {\n                auto result = objectID.findObject(server.*list);\n                return result != std::end(server.*list);\n            });\n        }\n        */\n\n        inline const_iterator findSeverWith(const Snowflake<Channel>& channelID) {\n            return findOneWithObject(&Server::channels, channelID);\n        }\n\n        inline const_iterator findServerWith(const Snowflake<Role> roleID) {\n            return findOneWithObject(&Server::roles, roleID);\n        }\n\n        //Linear time complexity if using list\n        //Usually Constant time complexity if using unordered maps\n        inline iterator findServer(const Snowflake<Server> serverID) {\n            return serverID.findObject(*this);\n        }\n    };\n\n    struct ServerWidget : public DiscordObject {\n        ServerWidget() = default;\n        //ServerWidget(const std::string * rawJson);\n        ServerWidget(const nonstd::string_view& json) :\n            ServerWidget(json::fromJSON<ServerWidget>(json)) {}\n        ServerWidget(const json::Value& json);\n        //ServerWidget(const json::Values values);\n        bool enabled;\n        Snowflake<Channel> channelID;\n\n        //const static std::initializer_list<const char*const> fields;\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&ServerWidget::enabled  , "enabled"   , json::REQUIRIED_FIELD),\n                json::pair(&ServerWidget::channelID, "channel_id", json::NULLABLE_FIELD )\n            );\n        JSONStructEnd\n    };\n\n    struct ServerMembersRequest {\n        ServerMembersRequest() = default;\n        ServerMembersRequest(const json::Value& json);\n        ServerMembersRequest(const nonstd::string_view& json) :\n            ServerMembersRequest(json::fromJSON<ServerMembersRequest>(json)) {}\n        Snowflake<Server> serverID;\n        //since empty and undefined mean different things to the API, we need optional\n        tl::optional<std::string> query;\n        int limit = 0;\n        bool presence = false;\n        std::vector<Snowflake<User>> userIDs;\n        std::string nonce;\n        \n        JSONStructStart\n            std::make_tuple(\n                json::pair                           (&ServerMembersRequest::serverID, "guild_id" , json::REQUIRIED_FIELD),\n                json::pair<json::OptionalTypeHelper >(&ServerMembersRequest::query   , "query"    , json::OPTIONAL_FIELD ),\n                json::pair                           (&ServerMembersRequest::limit   , "limit"    , json::REQUIRIED_FIELD),\n                json::pair                           (&ServerMembersRequest::presence, "presences", json::OPTIONAL_FIELD ),\n                json::pair<json::ContainerTypeHelper>(&ServerMembersRequest::userIDs , "user_ids" , json::OPTIONAL_FIELD ), \n                json::pair                           (&ServerMembersRequest::nonce   , "nonce"    , json::OPTIONAL_FIELD )\n            );\n        JSONStructEnd\n    };\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);