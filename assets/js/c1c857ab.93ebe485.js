"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[6008],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,i=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=l(t),m=s,f=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(f,c(c({ref:n},p),{},{components:t})):r.createElement(f,c({ref:n},p))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,c=new Array(o);c[0]=d;var a={};for(var i in n)hasOwnProperty.call(n,i)&&(a[i]=n[i]);a.originalType=e,a.mdxType="string"==typeof e?e:s,c[1]=a;for(var l=2;l<o;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1352:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=t(3117),s=t(102),o=(t(7294),t(3905)),c=["components"],a={title:"sleepy_discord/message.cpp"},i=void 0,l={unversionedId:"reference/Files/message_8cpp",id:"reference/Files/message_8cpp",title:"sleepy_discord/message.cpp",description:"Namespaces",source:"@site/docs/reference/Files/message_8cpp.md",sourceDirName:"reference/Files",slug:"/reference/Files/message_8cpp",permalink:"/sleepy-discord/docs/reference/Files/message_8cpp",tags:[],version:"current",frontMatter:{title:"sleepy_discord/message.cpp"},sidebar:"Reference",previous:{title:"include/sleepy_discord/json_wrapper.h",permalink:"/sleepy-discord/docs/reference/Files/json__wrapper_8h"},next:{title:"include/sleepy_discord/message.h",permalink:"/sleepy-discord/docs/reference/Files/message_8h"}},p=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],u={toc:p};function d(e){var n=e.components,t=(0,s.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"namespaces"},"Namespaces"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,o.kt)("h2",{id:"source-code"},"Source code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "message.h"\n#include "client.h"\n\nnamespace SleepyDiscord {\n    Message::Message(json::Value& json) :\n        Message(json::fromJSON<Message>(json))\n    {}\n\n    bool Message::startsWith(const std::string& test) {\n        return content.compare(0, test.length(), test) == 0;\n    }\n\n    std::size_t Message::length() {\n        return content.length();\n    }\n\n    bool Message::isMentioned(Snowflake<User> userID) {\n        std::size_t size = mentions.size();\n        for (std::size_t i = 0; i < size; i++)\n            if (mentions[i].ID == userID) return true;\n        return false;\n    }\n\n    bool Message::isMentioned(User& _user) {\n        return isMentioned(_user.ID);\n    }\n\n    Message Message::send(BaseDiscordClient* client) {\n        return client->sendMessage(channelID, content, embeds, messageReference, static_cast<TTS>(tts));\n    }\n\n    Message Message::reply(BaseDiscordClient * client, std::string message, Embed embed)\n    {\n        return client->sendMessage(channelID, message, { embed });\n    }\n\n    Message::Interaction::Interaction(const json::Value& json) :\n        Interaction(json::fromJSON<Message::Interaction>(json))\n    {}\n\n    Emoji::~Emoji() {\n    }\n\n    Emoji::Emoji(const json::Value& json) :\n        Emoji(json::fromJSON<Emoji>(json)) {\n    }\n\n    Reaction::~Reaction() {\n    }\n\n    Reaction::Reaction(const json::Value& json) :\n        Reaction(json::fromJSON<Reaction>(json)) {\n    }\n\n    StickerPack::~StickerPack() {}\n    StickerPack::StickerPack(const json::Value & json):\n        StickerPack(json::fromJSON<StickerPack>(json))\n    {}\n\n    Sticker::~Sticker() {}\n    Sticker::Sticker(const json::Value & json):\n        Sticker(json::fromJSON<Sticker>(json))\n    {}\n\n    MessageReference::MessageReference(const json::Value & json):\n        MessageReference(json::fromJSON<MessageReference>(json))\n    {}\n    AllowedMentions::AllowedMentions(const json::Value & json):\n        AllowedMentions(json::fromJSON<AllowedMentions>(json))\n    {}\n\n    ActionRow::ActionRow(json::Value& json) :\n        ActionRow(json::fromJSON<ActionRow>(json))\n    {}\n    Button::Button(const json::Value& json) :\n        Button(json::fromJSON<Button>(json))\n    {}\n    SelectMenu::SelectMenu(const json::Value& json) :\n        SelectMenu(json::fromJSON<SelectMenu>(json))\n    {}\n    SelectMenu::Option::Option(const json::Value& json) :\n        SelectMenu::Option(json::fromJSON<SelectMenu::Option>(json))\n    {}\n    TextInputs::TextInputs(const json::Value& json) :\n        TextInputs(json::fromJSON<TextInputs>(json))\n    {}\n\n}\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}d.isMDXComponent=!0}}]);