"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[8476],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return p}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),o=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=o(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=o(n),p=i,f=m["".concat(c,".").concat(p)]||m[p]||u[p]||a;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var o=2;o<a;o++)s[o]=n[o];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7537:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return o},toc:function(){return d},default:function(){return m}});var r=n(3117),i=n(102),a=(n(7294),n(3905)),s=["components"],l={title:"include/sleepy_discord/rate_limiter.h"},c=void 0,o={unversionedId:"reference/Files/rate__limiter_8h",id:"reference/Files/rate__limiter_8h",title:"include/sleepy_discord/rate_limiter.h",description:"Namespaces",source:"@site/docs/reference/Files/rate__limiter_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/rate__limiter_8h",permalink:"/sleepy-discord/docs/reference/Files/rate__limiter_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/rate_limiter.h"},sidebar:"Reference",previous:{title:"include/sleepy_discord/permissions.h",permalink:"/sleepy-discord/docs/reference/Files/permissions_8h"},next:{title:"sleepy_discord/sd_error.cpp",permalink:"/sleepy-discord/docs/reference/Files/sd__error_8cpp"}},d=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],u={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"namespaces"},"Namespaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,a.kt)("h2",{id:"classes"},"Classes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"class"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_route"},"SleepyDiscord::Route")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_rate_limiter"},"SleepyDiscord::RateLimiter")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_rate_limiter_1_1_rate_limit"},"SleepyDiscord::RateLimiter::RateLimit")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"class"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_rate_limiter_1_1_handle_await_after_request"},"SleepyDiscord::RateLimiter::HandleAwaitAfterRequest")))))),(0,a.kt)("h2",{id:"source-code"},"Source code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include "client.h"\n\nnamespace SleepyDiscord {\n\n    class Route {\n    public:\n        using Bucket = std::string;\n        Route(const std::string route, const std::initializer_list<std::string>& _values = {});\n        Route(const char* route);\n        inline const std::string& url() {\n            return _url;\n        }\n        const Bucket bucket(RequestMethod method);\n        inline operator const std::string&() {\n            return url();\n        }\n        inline const std::string& getPath() {\n            return path;\n        }\n\n    private:\n        const std::string path;\n        std::string _url;\n        const std::initializer_list<std::string>& values;\n\n        //for the snowflake part, discord class should do\n        std::unordered_map<std::string, Snowflake<User>::RawType>\n            majorParameters = {\n            { "channel.id", {} },\n            { "guild.id"  , {} },\n            { "webhook.id", {} }\n        };\n    };\n\n    //note: all rate limiter data needs to be handled in a sync manner\n    template<class Client>\n    struct RateLimiter {\n        std::atomic<bool> isGlobalRateLimited = { false };\n        std::atomic<double> nextRetry = { 0 };\n        void limitBucket(const Route::Bucket& bucket, const std::string& xBucket, double timestamp)  {\n            std::lock_guard<std::mutex> lock(mutex);\n            buckets[bucket] = xBucket;\n            limits[xBucket].nextTry = timestamp;\n        }\n        \n        const double getLiftTime(Route::Bucket& bucket, const double& currentTime) {\n            if (isGlobalRateLimited && currentTime < nextRetry)\n                    return nextRetry;\n            isGlobalRateLimited = false;\n            std::lock_guard<std::mutex> lock(mutex);\n            auto actualBucket = buckets.find(bucket);\n            if (actualBucket != buckets.end()) {\n                auto rateLimit = limits.find(actualBucket->second);\n                if (rateLimit != limits.end()) {\n                    if (currentTime < rateLimit->second.nextTry)\n                        return rateLimit->second.nextTry;\n                    limits.erase(rateLimit);\n                }\n                buckets.erase(actualBucket);\n            }\n            return 0;\n        }\n        //isLimited also returns the next Retry timestamp\n\n        struct RateLimit {\n        public:\n            void doWaitingRequest()  {\n                if (awaitingRequest.empty())\n                    return;\n                RateLimiter& rateLimiter = awaitingRequest.front().client.rateLimiter;\n\n                std::lock_guard<std::mutex> lock(rateLimiter.mutex);\n                awaitingRequest.remove_if([](typename Client::Request& request){\n                    request.client.postTask(request);\n                    return true;\n                });\n            }\n        private:\n            friend RateLimiter;\n            std::list<typename Client::Request> awaitingRequest;\n            double nextTry = 0;\n            static constexpr int defaultLimit = 1;\n            int limit = defaultLimit;\n            int remaining = defaultLimit;\n            Timer expireTimer;\n        };\n\n        class HandleAwaitAfterRequest {\n        public:\n            HandleAwaitAfterRequest(RateLimiter::RateLimit& limit)\n                : rateLimit(limit) {}\n            ~HandleAwaitAfterRequest() {\n                rateLimit.doWaitingRequest();\n            }\n        private:\n            RateLimiter::RateLimit& rateLimit;\n        };\n\n    private:\n        std::unordered_map<Route::Bucket, std::string> buckets;\n        std::unordered_map<std::string, RateLimit> limits;\n        std::mutex mutex;\n    };\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}m.isMDXComponent=!0}}]);