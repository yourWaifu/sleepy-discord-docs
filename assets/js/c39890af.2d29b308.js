"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[9080],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),s=d(n),m=a,b=s["".concat(c,".").concat(m)]||s[m]||u[m]||l;return n?r.createElement(b,i(i({ref:t},p),{},{components:n})):r.createElement(b,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=s;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},8207:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return p},default:function(){return s}});var r=n(3117),a=n(102),l=(n(7294),n(3905)),i=["components"],o={title:"SleepyDiscord::Embed"},c=void 0,d={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_embed",id:"reference/Classes/struct_sleepy_discord_1_1_embed",title:"SleepyDiscord::Embed",description:"Inherits from SleepyDiscord::DiscordObject",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_embed.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_embed",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_embed",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::Embed"},sidebar:"Reference",previous:{title:"SleepyDiscord::EditWebhookParams",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_edit_webhook_params"},next:{title:"SleepyDiscord::EmbedAuthor",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_embed_author"}},p=[{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"enum Flag",id:"enum-flag",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function Embed",id:"function-embed",children:[],level:3},{value:"function Embed",id:"function-embed-1",children:[],level:3},{value:"function Embed",id:"function-embed-2",children:[],level:3},{value:"function Embed",id:"function-embed-3",children:[],level:3},{value:"function empty",id:"function-empty",children:[],level:3},{value:"function std::make_tuple",id:"function-stdmake_tuple",children:[],level:3}],level:2},{value:"Public Attributes Documentation",id:"public-attributes-documentation",children:[{value:"variable title",id:"variable-title",children:[],level:3},{value:"variable type",id:"variable-type",children:[],level:3},{value:"variable description",id:"variable-description",children:[],level:3},{value:"variable url",id:"variable-url",children:[],level:3},{value:"variable timestamp",id:"variable-timestamp",children:[],level:3},{value:"variable color",id:"variable-color",children:[],level:3},{value:"variable footer",id:"variable-footer",children:[],level:3},{value:"variable image",id:"variable-image",children:[],level:3},{value:"variable thumbnail",id:"variable-thumbnail",children:[],level:3},{value:"variable video",id:"variable-video",children:[],level:3},{value:"variable provider",id:"variable-provider",children:[],level:3},{value:"variable author",id:"variable-author",children:[],level:3},{value:"variable fields",id:"variable-fields",children:[],level:3}],level:2}],u={toc:p};function s(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Inherits from ",(0,l.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_discord_object"},"SleepyDiscord::DiscordObject")),(0,l.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,l.kt)("h3",{id:"enum-flag"},"enum Flag"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Enumerator"),(0,l.kt)("th",{parentName:"tr",align:null},"Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"INVALID_EMBED"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"VALID_EMBED"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,l.kt)("h3",{id:"function-embed"},"function Embed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"Embed() =default\n")),(0,l.kt)("h3",{id:"function-embed-1"},"function Embed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"Embed(\n    const json::Value & json\n)\n")),(0,l.kt)("h3",{id:"function-embed-2"},"function Embed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Embed(\n    const nonstd::string_view & json\n)\n")),(0,l.kt)("h3",{id:"function-embed-3"},"function Embed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Embed(\n    const Flag f\n)\n")),(0,l.kt)("h3",{id:"function-empty"},"function empty"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline bool empty() const\n")),(0,l.kt)("h3",{id:"function-stdmake_tuple"},"function std::make_tuple"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'JSONStructStart std::make_tuple(\n    json::pair &::, "", ::OPTIONAL_FIELD ,\n    json::pair &::, "", ::OPTIONAL_FIELD ,\n    json::pair &::, "", ::OPTIONAL_FIELD ,\n    json::pair &::, "", ::OPTIONAL_FIELD ,\n    json::pair &::, "", ::OPTIONAL_FIELD ,\n    json::pair<-1 > &::, "", ::OPTIONAL_FIELD ,\n    json::pair &::, "", ::OPTIONAL_FIELD ,\n    json::pair &::, "", ::OPTIONAL_FIELD ,\n    json::pair &::, "", ::OPTIONAL_FIELD ,\n    json::pair &::, "", ::OPTIONAL_FIELD ,\n    json::pair &::, "", ::OPTIONAL_FIELD ,\n    json::pair &::, "", ::OPTIONAL_FIELD ,\n    json::pair< json::ContainerTypeHelper > &::, "", ::OPTIONAL_FIELD \n)\n')),(0,l.kt)("h2",{id:"public-attributes-documentation"},"Public Attributes Documentation"),(0,l.kt)("h3",{id:"variable-title"},"variable title"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string title;\n")),(0,l.kt)("h3",{id:"variable-type"},"variable type"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string type;\n")),(0,l.kt)("h3",{id:"variable-description"},"variable description"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string description;\n")),(0,l.kt)("h3",{id:"variable-url"},"variable url"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string url;\n")),(0,l.kt)("h3",{id:"variable-timestamp"},"variable timestamp"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string timestamp;\n")),(0,l.kt)("h3",{id:"variable-color"},"variable color"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"int32_t color = -1;\n")),(0,l.kt)("h3",{id:"variable-footer"},"variable footer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"EmbedFooter footer;\n")),(0,l.kt)("h3",{id:"variable-image"},"variable image"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"EmbedImage image;\n")),(0,l.kt)("h3",{id:"variable-thumbnail"},"variable thumbnail"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"EmbedThumbnail thumbnail;\n")),(0,l.kt)("h3",{id:"variable-video"},"variable video"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"EmbedVideo video;\n")),(0,l.kt)("h3",{id:"variable-provider"},"variable provider"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"EmbedProvider provider;\n")),(0,l.kt)("h3",{id:"variable-author"},"variable author"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"EmbedAuthor author;\n")),(0,l.kt)("h3",{id:"variable-fields"},"variable fields"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"std::vector< EmbedField > fields;\n")),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}s.isMDXComponent=!0}}]);