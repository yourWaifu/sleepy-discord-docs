"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[898],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),m=l,f=u["".concat(o,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,a=new Array(i);a[0]=u;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:l,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1850:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var r=n(3117),l=n(102),i=(n(7294),n(3905)),a=["components"],c={title:"include/sleepy_discord/custom_udp_client.h"},o=void 0,s={unversionedId:"reference/Files/custom__udp__client_8h",id:"reference/Files/custom__udp__client_8h",title:"include/sleepy_discord/custom_udp_client.h",description:"Namespaces",source:"@site/docs/reference/Files/custom__udp__client_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/custom__udp__client_8h",permalink:"/sleepy-discord/docs/reference/Files/custom__udp__client_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/custom_udp_client.h"},sidebar:"Reference",previous:{title:"include/sleepy_discord/custom_session.h",permalink:"/sleepy-discord/docs/reference/Files/custom__session_8h"},next:{title:"sleepy_discord/default_functions.cpp",permalink:"/sleepy-discord/docs/reference/Files/default__functions_8cpp"}},p=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Types",id:"types",children:[],level:2},{value:"Types Documentation",id:"types-documentation",children:[{value:"typedef CustomInitUDPClient",id:"typedef-custominitudpclient",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,l.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"namespaces"},"Namespaces"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,i.kt)("h2",{id:"classes"},"Classes"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"class"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_custom_u_d_p_client"},"SleepyDiscord::CustomUDPClient")))))),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"typedef GenericUDPClient ",(0,i.kt)("em",{parentName:"td"},"("),"const)()"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/custom__udp__client_8h#typedef-custominitudpclient"},"CustomInitUDPClient")))))),(0,i.kt)("h2",{id:"types-documentation"},"Types Documentation"),(0,i.kt)("h3",{id:"typedef-custominitudpclient"},"typedef CustomInitUDPClient"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef GenericUDPClient*(*const SleepyDiscord::CustomInitUDPClient) ();\n")),(0,i.kt)("h2",{id:"source-code"},"Source code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include<memory>\n#include "udp.h"\n\nnamespace SleepyDiscord {\n    typedef GenericUDPClient* (*const CustomInitUDPClient)();\n\n    class CustomUDPClient : public GenericUDPClient {\n    protected:\n        static CustomInitUDPClient init;\n        CustomUDPClient() : client(init()) {}\n        inline bool connect(const std::string& to, const uint16_t port) override {\n            return client->connect(to, port);\n        }\n        inline void send(\n            const uint8_t* buffer,\n            size_t bufferLength,\n            SendHandler handler = []() {}\n        ) override {\n            return client->send(buffer, bufferLength, handler);\n        }\n        inline void receive(ReceiveHandler handler) override {\n            return client->receive(handler);\n        }\n    private:\n        std::unique_ptr<GenericUDPClient> client;\n    };\n\n    typedef CustomUDPClient UDPClient;\n}\n')),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);