"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[6140],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return b}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var a=r.createContext({}),l=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(a.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,a=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(t),b=o,m=p["".concat(a,".").concat(b)]||p[b]||d[b]||c;return t?r.createElement(m,s(s({ref:n},u),{},{components:t})):r.createElement(m,s({ref:n},u))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,s=new Array(c);s[0]=p;var i={};for(var a in n)hasOwnProperty.call(n,a)&&(i[a]=n[a]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<c;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7398:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return a},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var r=t(3117),o=t(102),c=(t(7294),t(3905)),s=["components"],i={title:"sleepy_discord/uwebsockets_websocket.cpp"},a=void 0,l={unversionedId:"reference/Files/uwebsockets__websocket_8cpp",id:"reference/Files/uwebsockets__websocket_8cpp",title:"sleepy_discord/uwebsockets_websocket.cpp",description:"Namespaces",source:"@site/docs/reference/Files/uwebsockets__websocket_8cpp.md",sourceDirName:"reference/Files",slug:"/reference/Files/uwebsockets__websocket_8cpp",permalink:"/sleepy-discord/docs/reference/Files/uwebsockets__websocket_8cpp",tags:[],version:"current",frontMatter:{title:"sleepy_discord/uwebsockets_websocket.cpp"},sidebar:"Reference",previous:{title:"include/sleepy_discord/uwebsockets_connection.h",permalink:"/sleepy-discord/docs/reference/Files/uwebsockets__connection_8h"},next:{title:"include/sleepy_discord/uwebsockets_websocket.h",permalink:"/sleepy-discord/docs/reference/Files/uwebsockets__websocket_8h"}},u=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:u};function p(e){var n=e.components,t=(0,o.Z)(e,s);return(0,c.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,c.kt)("h2",{id:"namespaces"},"Namespaces"),(0,c.kt)("table",null,(0,c.kt)("thead",{parentName:"table"},(0,c.kt)("tr",{parentName:"thead"},(0,c.kt)("th",{parentName:"tr",align:null},"Name"))),(0,c.kt)("tbody",{parentName:"table"},(0,c.kt)("tr",{parentName:"tbody"},(0,c.kt)("td",{parentName:"tr",align:null},(0,c.kt)("strong",{parentName:"td"},(0,c.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,c.kt)("h2",{id:"source-code"},"Source code"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "uwebsockets_websocket.h"\n#ifndef NONEXISTENT_UWEBSOCKETS\n#include <iostream>\n\nnamespace SleepyDiscord {\n    UWebSocketsDiscordClient::~UWebSocketsDiscordClient() {\n        thread.join();\n    }\n\n    UWebSocketsDiscordClient::UWebSocketsDiscordClient(const std::string token, const char numOfThreads) :\n        maxNumOfThreads(numOfThreads) {\n        hub.onConnection([=](uWS::WebSocket<uWS::CLIENT>* ws, uWS::HttpRequest req) {\n            auto connection = static_cast<uWS::WebSocket<uWS::CLIENT>**>(ws->getUserData());\n            *connection = ws;\n        });\n        hub.onMessage([=](uWS::WebSocket<uWS::CLIENT>* ws, char * message, size_t length, uWS::OpCode opCode) {\n            processMessage(message);\n        });\n        hub.onError([=](void *user) {\n            isConnectionBad = true;\n        });\n\n        start(token, numOfThreads);\n    }\n\n    bool UWebSocketsDiscordClient::connect(const std::string & uri, GenericMessageReceiver* messageProcessor, WebsocketConnection* connection) {\n        isConnectionBad = false;\n        hub.connect(uri, connection);\n        return !isConnectionBad;\n    }\n\n    void UWebSocketsDiscordClient::run() {\n        hub.run();\n    }\n\n    Timer UWebSocketsDiscordClient::schedule(std::function<void()> code, const time_t milliseconds) {\n        uS::Timer *timer = new uS::Timer(hub.getLoop());\n        timer->setData(&code);\n        timer->start([](uS::Timer *timer) {\n            (*static_cast<std::function<void()>*>(timer->getData()))();\n            timer->close();\n        }, milliseconds, 0);\n        return Timer(\n            [timer]() {\n                timer->stop();\n                timer->close();\n            }\n        );\n    }\n\n    void UWebSocketsDiscordClient::runAsync() {\n        thread = std::thread([this]() { hub.run(); });\n    }\n\n    void UWebSocketsDiscordClient::disconnect(unsigned int code, const std::string reason, WebsocketConnection* connection) {\n        /*the static cast should do a compile time check that WebsocketConnection\n          is the correct type*/\n        static_cast<uWS::WebSocket<uWS::CLIENT>*>(*connection)->close();\n    }\n\n    void UWebSocketsDiscordClient::send(std::string message, WebsocketConnection* connection) {\n        //if disconnect doesn\'t give an error then this should also be fine\n        (*connection)->send(message.c_str());\n    }\n\n#include "standard_config.h"\n\n\n/* list of needed librarys to compile this\nuWS.lib\nlibuv.lib\niphlpapi.lib\npsapi.lib\nuserenv.lib\nzlibstat.lib\n*/\n\n\n}\n#endif\n')),(0,c.kt)("hr",null),(0,c.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}p.isMDXComponent=!0}}]);