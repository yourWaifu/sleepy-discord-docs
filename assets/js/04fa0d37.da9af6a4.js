"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[2824],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=r.createContext({}),d=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(o.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),p=d(t),m=i,f=p["".concat(o,".").concat(m)]||p[m]||u[m]||l;return t?r.createElement(f,c(c({ref:n},s),{},{components:t})):r.createElement(f,c({ref:n},s))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,c=new Array(l);c[0]=p;var a={};for(var o in n)hasOwnProperty.call(n,o)&&(a[o]=n[o]);a.originalType=e,a.mdxType="string"==typeof e?e:i,c[1]=a;for(var d=2;d<l;d++)c[d]=t[d];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},7880:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return o},metadata:function(){return d},toc:function(){return s},default:function(){return p}});var r=t(3117),i=t(102),l=(t(7294),t(3905)),c=["components"],a={title:"SleepyDiscord::EmbedField"},o=void 0,d={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_embed_field",id:"reference/Classes/struct_sleepy_discord_1_1_embed_field",title:"SleepyDiscord::EmbedField",description:"Inherits from SleepyDiscord::DiscordObject",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_embed_field.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_embed_field",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_embed_field",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::EmbedField"},sidebar:"Reference",previous:{title:"SleepyDiscord::EmbedAuthor",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_embed_author"},next:{title:"SleepyDiscord::EmbedFooter",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_embed_footer"}},s=[{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function EmbedField",id:"function-embedfield",children:[],level:3},{value:"function EmbedField",id:"function-embedfield-1",children:[],level:3},{value:"function EmbedField",id:"function-embedfield-2",children:[],level:3},{value:"function EmbedField",id:"function-embedfield-3",children:[],level:3},{value:"function empty",id:"function-empty",children:[],level:3},{value:"function std::make_tuple",id:"function-stdmake_tuple",children:[],level:3}],level:2},{value:"Public Attributes Documentation",id:"public-attributes-documentation",children:[{value:"variable name",id:"variable-name",children:[],level:3},{value:"variable value",id:"variable-value",children:[],level:3},{value:"variable isInline",id:"variable-isinline",children:[],level:3}],level:2}],u={toc:s};function p(e){var n=e.components,t=(0,i.Z)(e,c);return(0,l.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Inherits from ",(0,l.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_discord_object"},"SleepyDiscord::DiscordObject")),(0,l.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,l.kt)("h3",{id:"function-embedfield"},"function EmbedField"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"EmbedField() =default\n")),(0,l.kt)("h3",{id:"function-embedfield-1"},"function EmbedField"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"EmbedField(\n    const json::Value & json\n)\n")),(0,l.kt)("h3",{id:"function-embedfield-2"},"function EmbedField"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline EmbedField(\n    const nonstd::string_view & json\n)\n")),(0,l.kt)("h3",{id:"function-embedfield-3"},"function EmbedField"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline EmbedField(\n    std::string _name,\n    std::string _value,\n    bool _isInline =false\n)\n")),(0,l.kt)("h3",{id:"function-empty"},"function empty"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"inline bool empty() const\n")),(0,l.kt)("h3",{id:"function-stdmake_tuple"},"function std::make_tuple"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'JSONStructStart std::make_tuple(\n    json::pair &::, "", ::OPTIONAL_FIELD ,\n    json::pair &::, "", ::OPTIONAL_FIELD ,\n    json::pair &::, "", ::OPTIONAL_FIELD \n)\n')),(0,l.kt)("h2",{id:"public-attributes-documentation"},"Public Attributes Documentation"),(0,l.kt)("h3",{id:"variable-name"},"variable name"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'std::string name = "";\n')),(0,l.kt)("h3",{id:"variable-value"},"variable value"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},'std::string value = "";\n')),(0,l.kt)("h3",{id:"variable-isinline"},"variable isInline"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"bool isInline = false;\n")),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}p.isMDXComponent=!0}}]);