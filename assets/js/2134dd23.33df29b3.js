"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[9330],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=l(t),f=o,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||s;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,i=new Array(s);i[0]=u;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var l=2;l<s;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7091:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var r=t(3117),o=t(102),s=(t(7294),t(3905)),i=["components"],a={title:"include/sleepy_discord/voice.h"},c=void 0,l={unversionedId:"reference/Files/voice_8h",id:"reference/Files/voice_8h",title:"include/sleepy_discord/voice.h",description:"Namespaces",source:"@site/docs/reference/Files/voice_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/voice_8h",permalink:"/sleepy-discord/docs/reference/Files/voice_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/voice.h"},sidebar:"Reference",previous:{title:"sleepy_discord/voice.cpp",permalink:"/sleepy-discord/docs/reference/Files/voice_8cpp"},next:{title:"sleepy_discord/voice_connection.cpp",permalink:"/sleepy-discord/docs/reference/Files/voice__connection_8cpp"}},p=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"namespaces"},"Namespaces"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,s.kt)("h2",{id:"classes"},"Classes"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_voice_state"},"SleepyDiscord::VoiceState")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_voice_region"},"SleepyDiscord::VoiceRegion")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_voice_server_update"},"SleepyDiscord::VoiceServerUpdate")))))),(0,s.kt)("h2",{id:"source-code"},"Source code"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include "discord_object_interface.h"\n#include "snowflake.h"\n#include "channel.h"\n\nnamespace SleepyDiscord {\n    //forward declearion\n    struct Server;\n    struct Channel;\n    struct User;\n\n    struct VoiceState : public DiscordObject {\n        VoiceState() = default;\n        VoiceState(const nonstd::string_view& json) :\n            VoiceState(json::fromJSON<VoiceState>(json)) {}\n        VoiceState(const json::Value& json);\n        Snowflake<Server> serverID;\n        Snowflake<Channel> channelID;\n        Snowflake<User> userID;\n        std::string sessionID;\n        bool deaf = false;\n        bool mute = false;\n        bool selfDeaf = false;\n        bool selfMute = false;\n        bool suppress = false;\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&VoiceState::serverID , "guild_id"  , json::OPTIONAL_FIELD ),\n                json::pair(&VoiceState::channelID, "channel_id", json::NULLABLE_FIELD ),\n                json::pair(&VoiceState::userID   , "user_id"   , json::REQUIRIED_FIELD),\n                json::pair(&VoiceState::sessionID, "session_id", json::REQUIRIED_FIELD),\n                json::pair(&VoiceState::deaf     , "deaf"      , json::REQUIRIED_FIELD),\n                json::pair(&VoiceState::mute     , "mute"      , json::REQUIRIED_FIELD),\n                json::pair(&VoiceState::selfDeaf , "self_deaf" , json::REQUIRIED_FIELD),\n                json::pair(&VoiceState::selfMute , "self_mute" , json::REQUIRIED_FIELD),\n                json::pair(&VoiceState::suppress , "suppress"  , json::REQUIRIED_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    /*\n    Voice Region Structure\n    Field           Type    Description\n    id              string  unique ID for the region\n    name            string  name of the region\n    sample_hostname string  an example hostname for the region\n    sample_port     integer an example port for the region\n    vip             bool    true if this is a vip-only server\n    optimal         bool    true for a single server that is closest to the current user\'s client\n    deprecated      bool    whether this is a deprecated voice region (avoid switching to these)\n    custom          bool    whether this is a custom voice region (used for events/etc)\n    */\n    struct VoiceRegion : IdentifiableDiscordObject<VoiceRegion> {\n        VoiceRegion() = default;\n        //VoiceRegion(const std::string * rawJson);\n        VoiceRegion(const nonstd::string_view& json) :\n            VoiceRegion(json::fromJSON<VoiceRegion>(json)) {}\n        VoiceRegion(const json::Value& json);\n        //VoiceRegion(const json::Values values);\n        std::string name;\n        bool vip = false;\n        bool optimal = false;\n        bool deprecated = false;\n        bool custom = false;\n        //const static std::initializer_list<const char*const> fields;\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&VoiceRegion::ID            , "id"        , json::REQUIRIED_FIELD),\n                json::pair(&VoiceRegion::name          , "name"      , json::REQUIRIED_FIELD),\n                json::pair(&VoiceRegion::vip           , "vip"       , json::REQUIRIED_FIELD),\n                json::pair(&VoiceRegion::optimal       , "optimal"   , json::REQUIRIED_FIELD),\n                json::pair(&VoiceRegion::deprecated    , "deprecated", json::REQUIRIED_FIELD),\n                json::pair(&VoiceRegion::custom        , "custom"    , json::REQUIRIED_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    /*\n    Voice Server Update Event Fields\n    Field     Type       Description\n    token     string     voice connection token\n    guild_id  snowflake  the guild this voice server update is for\n    endpoint  string     the voice server host\n    */\n    struct VoiceServerUpdate : DiscordObject {\n        VoiceServerUpdate() = default;\n        //VoiceServerUpdate(const std::string * rawJson);\n        VoiceServerUpdate(const nonstd::string_view& json) :\n            VoiceServerUpdate(json::fromJSON<VoiceServerUpdate>(json)) {}\n        VoiceServerUpdate(const json::Value& json);\n        //VoiceServerUpdate(const json::Values values);\n        std::string token;\n        Snowflake<Server> serverID;\n        std::string endpoint;\n        //const static std::initializer_list<const char*const> fields;\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&VoiceServerUpdate::token   , "token"   , json::REQUIRIED_FIELD),\n                json::pair(&VoiceServerUpdate::serverID, "guild_id", json::REQUIRIED_FIELD),\n                json::pair(&VoiceServerUpdate::endpoint, "endpoint", json::REQUIRIED_FIELD)\n            );\n        JSONStructEnd\n    };\n}\n')),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);