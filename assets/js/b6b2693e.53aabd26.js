"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[1440],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return g}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(t),g=a,m=u["".concat(c,".").concat(g)]||u[g]||d[g]||o;return t?r.createElement(m,s(s({ref:n},p),{},{components:t})):r.createElement(m,s({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6934:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),s=["components"],i={title:"sleepy_discord/json_wrapper.cpp"},c=void 0,l={unversionedId:"reference/Files/json__wrapper_8cpp",id:"reference/Files/json__wrapper_8cpp",title:"sleepy_discord/json_wrapper.cpp",description:"Namespaces",source:"@site/docs/reference/Files/json__wrapper_8cpp.md",sourceDirName:"reference/Files",slug:"/reference/Files/json__wrapper_8cpp",permalink:"/sleepy-discord/docs/reference/Files/json__wrapper_8cpp",tags:[],version:"current",frontMatter:{title:"sleepy_discord/json_wrapper.cpp"},sidebar:"Reference",previous:{title:"include/sleepy_discord/invite.h",permalink:"/sleepy-discord/docs/reference/Files/invite_8h"},next:{title:"include/sleepy_discord/json_wrapper.h",permalink:"/sleepy-discord/docs/reference/Files/json__wrapper_8h"}},p=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Functions",id:"functions",children:[],level:2},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function createJSON",id:"function-createjson",children:[],level:3},{value:"function string",id:"function-string",children:[],level:3},{value:"function UInteger",id:"function-uinteger",children:[],level:3},{value:"function optionalUInteger",id:"function-optionaluinteger",children:[],level:3},{value:"function integer",id:"function-integer",children:[],level:3},{value:"function optionalInteger",id:"function-optionalinteger",children:[],level:3},{value:"function boolean",id:"function-boolean",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:p};function u(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"namespaces"},"Namespaces"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord_1_1json"},"SleepyDiscord::json")))))),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"const std::string"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/json__wrapper_8cpp#function-createjson"},"createJSON")),"(std::initializer_list< std::pair< std::string, std::string >> json)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"const std::string"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/json__wrapper_8cpp#function-string"},"string")),"(const std::string & s)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"const std::string"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/json__wrapper_8cpp#function-uinteger"},"UInteger")),"(const uint64_t num)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"const std::string"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/json__wrapper_8cpp#function-optionaluinteger"},"optionalUInteger")),"(const uint64_t num)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"const std::string"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/json__wrapper_8cpp#function-integer"},"integer")),"(const int64_t num)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"const std::string"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/json__wrapper_8cpp#function-optionalinteger"},"optionalInteger")),"(const int64_t num)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"const std::string"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/json__wrapper_8cpp#function-boolean"},"boolean")),"(const bool boolean)")))),(0,o.kt)("h2",{id:"functions-documentation"},"Functions Documentation"),(0,o.kt)("h3",{id:"function-createjson"},"function createJSON"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"const std::string createJSON(\n    std::initializer_list< std::pair< std::string, std::string >> json\n)\n")),(0,o.kt)("h3",{id:"function-string"},"function string"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"const std::string string(\n    const std::string & s\n)\n")),(0,o.kt)("h3",{id:"function-uinteger"},"function UInteger"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"const std::string UInteger(\n    const uint64_t num\n)\n")),(0,o.kt)("h3",{id:"function-optionaluinteger"},"function optionalUInteger"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"const std::string optionalUInteger(\n    const uint64_t num\n)\n")),(0,o.kt)("h3",{id:"function-integer"},"function integer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"const std::string integer(\n    const int64_t num\n)\n")),(0,o.kt)("h3",{id:"function-optionalinteger"},"function optionalInteger"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"const std::string optionalInteger(\n    const int64_t num\n)\n")),(0,o.kt)("h3",{id:"function-boolean"},"function boolean"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"const std::string boolean(\n    const bool boolean\n)\n")),(0,o.kt)("h2",{id:"source-code"},"Source code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "json_wrapper.h"\n#include <stdexcept>\n#include <string>\n\nnamespace SleepyDiscord { namespace json {\n    const std::string createJSON(std::initializer_list<std::pair<std::string, std::string>> json) {\n        std::string target;\n        target.reserve(2);  //revents crash\n        for (std::pair<std::string, std::string> pair : json) {\n            if (pair.second != "") {\n                target += ",\\"" + pair.first + "\\":" + pair.second;\n            }\n        }\n        target[0] = \'{\';\n        target.push_back(\'}\');\n        return target;\n    }\n\n    const std::string string(const std::string& s) {\n        if (s.empty())\n            return "";\n        rapidjson::StringBuffer buffer;\n        rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);\n        writer.String(s.data(), s.length());\n        return std::string(buffer.GetString(), buffer.GetSize());\n    }\n\n    const std::string UInteger(const uint64_t num) {\n        return std::to_string(num & 0x3FFFFFFFFFFFFF);   //just in case numbers are larger then 53 bits\n    }\n\n    const std::string optionalUInteger(const uint64_t num) {\n        return num ? UInteger(num) : "";\n    }\n\n    const std::string integer(const int64_t num) {\n        return std::to_string(num & 0x803FFFFFFFFFFFFF);  //just in case numbers are larger then 53 bits\n    }\n\n    const std::string optionalInteger(const int64_t num) {\n        return num ? integer(num) : "";\n    }\n\n    const std::string boolean(const bool boolean) {\n        return boolean ? "true" : "false";\n    }\n}}\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);