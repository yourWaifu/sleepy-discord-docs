"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[2639],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(o,".").concat(m)]||u[m]||p[m]||s;return n?r.createElement(h,l(l({ref:t},d),{},{components:n})):r.createElement(h,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,l=new Array(s);l[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<s;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7090:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var r=n(3117),a=n(102),s=(n(7294),n(3905)),l=["components"],i={title:"include/sleepy_discord/http.h"},o=void 0,c={unversionedId:"reference/Files/http_8h",id:"reference/Files/http_8h",title:"include/sleepy_discord/http.h",description:"Namespaces",source:"@site/docs/reference/Files/http_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/http_8h",permalink:"/sleepy-discord/docs/reference/Files/http_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/http.h"},sidebar:"Reference",previous:{title:"sleepy_discord/http.cpp",permalink:"/sleepy-discord/docs/reference/Files/http_8cpp"},next:{title:"sleepy_discord/invite.cpp",permalink:"/sleepy-discord/docs/reference/Files/invite_8cpp"}},d=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Types",id:"types",children:[],level:2},{value:"Functions",id:"functions",children:[],level:2},{value:"Types Documentation",id:"types-documentation",children:[{value:"enum RequestMethod",id:"enum-requestmethod",children:[],level:3},{value:"typedef Multipart",id:"typedef-multipart",children:[],level:3}],level:2},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function getMethodName",id:"function-getmethodname",children:[],level:3},{value:"function escapeURL",id:"function-escapeurl",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],p={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"namespaces"},"Namespaces"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,s.kt)("h2",{id:"classes"},"Classes"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1case_insensitive_compare"},"SleepyDiscord::caseInsensitiveCompare")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_response"},"SleepyDiscord::Response")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1file_path_part"},"SleepyDiscord::filePathPart")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_part"},"SleepyDiscord::Part")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"struct"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_header_pair"},"SleepyDiscord::HeaderPair")))),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"class"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_generic_session"},"SleepyDiscord::GenericSession")))))),(0,s.kt)("h2",{id:"types"},"Types"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"enum"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/http_8h#enum-requestmethod"},"RequestMethod"))," { Post = 0, Patch = 1, Delete = 2, Get = 3, Put = 4}")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"typedef std::initializer_list< Part >"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/http_8h#typedef-multipart"},"Multipart")))))),(0,s.kt)("h2",{id:"functions"},"Functions"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null}),(0,s.kt)("th",{parentName:"tr",align:null},"Name"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"const char *"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/http_8h#function-getmethodname"},"getMethodName")),"(const RequestMethod & method)")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"std::string"),(0,s.kt)("td",{parentName:"tr",align:null},(0,s.kt)("strong",{parentName:"td"},(0,s.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/http_8h#function-escapeurl"},"escapeURL")),"(const std::string & string)")))),(0,s.kt)("h2",{id:"types-documentation"},"Types Documentation"),(0,s.kt)("h3",{id:"enum-requestmethod"},"enum RequestMethod"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Enumerator"),(0,s.kt)("th",{parentName:"tr",align:null},"Value"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Post"),(0,s.kt)("td",{parentName:"tr",align:null},"0"),(0,s.kt)("td",{parentName:"tr",align:null})),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Patch"),(0,s.kt)("td",{parentName:"tr",align:null},"1"),(0,s.kt)("td",{parentName:"tr",align:null})),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Delete"),(0,s.kt)("td",{parentName:"tr",align:null},"2"),(0,s.kt)("td",{parentName:"tr",align:null})),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Get"),(0,s.kt)("td",{parentName:"tr",align:null},"3"),(0,s.kt)("td",{parentName:"tr",align:null})),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Put"),(0,s.kt)("td",{parentName:"tr",align:null},"4"),(0,s.kt)("td",{parentName:"tr",align:null})))),(0,s.kt)("h3",{id:"typedef-multipart"},"typedef Multipart"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef std::initializer_list<Part> SleepyDiscord::Multipart;\n")),(0,s.kt)("h2",{id:"functions-documentation"},"Functions Documentation"),(0,s.kt)("h3",{id:"function-getmethodname"},"function getMethodName"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"const char * getMethodName(\n    const RequestMethod & method\n)\n")),(0,s.kt)("h3",{id:"function-escapeurl"},"function escapeURL"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string escapeURL(\n    const std::string & string\n)\n")),(0,s.kt)("h2",{id:"source-code"},"Source code"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <string>\n#include <utility>\n#include <map>\n#include <vector>\n#include <functional>\n#include "error.h"\n\n//important note, all requests on sync mode throw on an http error\n\nnamespace SleepyDiscord {\n    //http variables and functions\n    //request functions\n    enum RequestMethod {\n        Post   = 0,\n        Patch  = 1,\n        Delete = 2,\n        Get    = 3,\n        Put    = 4\n    };\n\n    class BaseDiscordClient;\n\n    //copied from cpr\n    struct caseInsensitiveCompare {\n        bool operator()(const std::string& a, const std::string& b) const noexcept;\n    };\n\n    struct Response {\n        std::string text;\n        int32_t statusCode = 0;\n        std::map<std::string, std::string, caseInsensitiveCompare> header;\n        time_t birth = 0;\n        inline bool error() const {\n            return BAD_REQUEST <= statusCode;\n        }\n        Response() = default;\n        Response(int32_t _statusCode) : statusCode(_statusCode) {}\n    };\n\n    struct filePathPart {\n        const std::string filePath;\n    };\n\n    struct Part {\n        Part(const std::string _name, const std::string _value) :\n            name(_name), value(_value), isFile(false) {}\n        Part(const std::string _name, const filePathPart _file) :\n            name(_name), value(_file.filePath), isFile(true) {}\n        const std::string name;\n        const std::string value;\n        const bool isFile;   //if isFile is true then value is the filepath\n    };\n\n    typedef std::initializer_list<Part> Multipart;\n\n    struct HeaderPair {\n        const char *const name;\n        std::string value = "";\n        HeaderPair(const char* _name) : name(_name) {}\n        HeaderPair(const char* _name, std::string _value) : name(_name), value(_value) {}\n    };\n\n    class GenericSession {\n    public:\n        using ResponseCallback = std::function<void(Response)>;\n        virtual void setUrl(const std::string& url) = 0;\n        virtual void setBody(const std::string* jsonParameters) = 0;\n        virtual void setHeader(const std::vector<HeaderPair>& header) = 0;\n        virtual void setMultipart(const std::vector<Part>& parts) = 0;\n        virtual void setResponseCallback(const ResponseCallback& callback) = 0;\n        virtual Response request(RequestMethod method) = 0;\n    };\n\n    //Use this to convert RequestMethod into a string\n    const char* getMethodName(const RequestMethod& method);\n\n    std::string escapeURL(const std::string& string);\n};\n')),(0,s.kt)("hr",null),(0,s.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);