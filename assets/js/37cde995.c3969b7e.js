"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[1340],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=i(n),m=a,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var i=2;i<o;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2687:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return i},toc:function(){return p},default:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),l=["components"],s={title:"SleepyDiscord::RawComponent"},c=void 0,i={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_raw_component",id:"reference/Classes/struct_sleepy_discord_1_1_raw_component",title:"SleepyDiscord::RawComponent",description:"Inherits from SleepyDiscord::DiscordObject",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_raw_component.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_raw_component",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_raw_component",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::RawComponent"},sidebar:"Reference",previous:{title:"SleepyDiscord::RateLimiter::RateLimit",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_rate_limiter_1_1_rate_limit"},next:{title:"SleepyDiscord::Reaction",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_reaction"}},p=[{value:"inherited members",id:"inherited-members",children:[],level:2},{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using JSONTypeHelper",id:"using-jsontypehelper",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function RawComponent",id:"function-rawcomponent",children:[],level:3},{value:"function RawComponent",id:"function-rawcomponent-1",children:[],level:3},{value:"function RawComponent",id:"function-rawcomponent-2",children:[],level:3},{value:"function RawComponent",id:"function-rawcomponent-3",children:[],level:3},{value:"function serialize",id:"function-serialize",children:[],level:3},{value:"function empty",id:"function-empty",children:[],level:3},{value:"function isType",id:"function-istype",children:[],level:3}],level:2},{value:"Public Attributes Documentation",id:"public-attributes-documentation",children:[{value:"variable data",id:"variable-data",children:[],level:3}],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Inherits from ",(0,o.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component"},"SleepyDiscord::BaseComponent"),", ",(0,o.kt)("a",{parentName:"p",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_discord_object"},"SleepyDiscord::DiscordObject")),(0,o.kt)("h2",{id:"inherited-members"},"inherited members"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Public Types inherited from ",(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component"},"SleepyDiscord::BaseComponent"))),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"using ComponentType"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#using-type"},"Type")))))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Public Functions inherited from ",(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component"},"SleepyDiscord::BaseComponent"))),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#function-basecomponent"},"BaseComponent")),"()")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#function-basecomponent"},"BaseComponent")),"(Type _type)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#function-~basecomponent"},"~BaseComponent")),"() =default")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"const ComponentType"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#function-gettype"},"getType")),"() const")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Protected Attributes inherited from ",(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component"},"SleepyDiscord::BaseComponent"))),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Type"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_base_component#variable-type"},"type")))))),(0,o.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,o.kt)("h3",{id:"using-jsontypehelper"},"using JSONTypeHelper"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::RawComponent::JSONTypeHelper =  json::ClassTypeHelper<json::Value>;\n")),(0,o.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,o.kt)("h3",{id:"function-rawcomponent"},"function RawComponent"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline RawComponent(\n    BaseComponent base,\n    json::Value & rawJSON\n)\n")),(0,o.kt)("h3",{id:"function-rawcomponent-1"},"function RawComponent"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline RawComponent(\n    json::Value & rawJSON\n)\n")),(0,o.kt)("h3",{id:"function-rawcomponent-2"},"function RawComponent"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline RawComponent(\n    const nonstd::string_view & json\n)\n")),(0,o.kt)("h3",{id:"function-rawcomponent-3"},"function RawComponent"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline RawComponent(\n    const RawComponent & origin\n)\n")),(0,o.kt)("h3",{id:"function-serialize"},"function serialize"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline json::Value serialize(\n    typename json::Value::AllocatorType & alloc\n) const\n")),(0,o.kt)("h3",{id:"function-empty"},"function empty"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const bool empty() const\n")),(0,o.kt)("h3",{id:"function-istype"},"function isType"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"static inline const bool isType(\n    const typename json::Value & value\n)\n")),(0,o.kt)("h2",{id:"public-attributes-documentation"},"Public Attributes Documentation"),(0,o.kt)("h3",{id:"variable-data"},"variable data"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"json::Value data;\n")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);