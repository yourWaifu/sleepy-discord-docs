"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[2459],{3905:function(e,r,n){n.d(r,{Zo:function(){return m},kt:function(){return u}});var t=n(7294);function s(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){s(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,t,s=function(e,r){if(null==e)return{};var n,t,s={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(s[n]=e[n]);return s}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=t.createContext({}),c=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},m=function(e){var r=c(e.components);return t.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,m=a(e,["components","mdxType","originalType","parentName"]),d=c(n),u=s,v=d["".concat(l,".").concat(u)]||d[u]||p[u]||i;return n?t.createElement(v,o(o({ref:r},m),{},{components:n})):t.createElement(v,o({ref:r},m))}));function u(e,r){var n=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var i=n.length,o=new Array(i);o[0]=d;var a={};for(var l in r)hasOwnProperty.call(r,l)&&(a[l]=r[l]);a.originalType=e,a.mdxType="string"==typeof e?e:s,o[1]=a;for(var c=2;c<i;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7300:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return m},default:function(){return d}});var t=n(3117),s=n(102),i=(n(7294),n(3905)),o=["components"],a={title:"sleepy_discord/permissions.cpp"},l=void 0,c={unversionedId:"reference/Files/permissions_8cpp",id:"reference/Files/permissions_8cpp",title:"sleepy_discord/permissions.cpp",description:"Namespaces",source:"@site/docs/reference/Files/permissions_8cpp.md",sourceDirName:"reference/Files",slug:"/reference/Files/permissions_8cpp",permalink:"/sleepy-discord/docs/reference/Files/permissions_8cpp",tags:[],version:"current",frontMatter:{title:"sleepy_discord/permissions.cpp"},sidebar:"Reference",previous:{title:"include/sleepy_discord/message_receiver.h",permalink:"/sleepy-discord/docs/reference/Files/message__receiver_8h"},next:{title:"include/sleepy_discord/permissions.h",permalink:"/sleepy-discord/docs/reference/Files/permissions_8h"}},m=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Functions",id:"functions",children:[],level:2},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function getBasePermissions",id:"function-getbasepermissions",children:[],level:3},{value:"function handleOverwrite",id:"function-handleoverwrite",children:[],level:3},{value:"function handleOverwrite",id:"function-handleoverwrite-1",children:[],level:3},{value:"function overwritePermissions",id:"function-overwritepermissions",children:[],level:3},{value:"function getPermissions",id:"function-getpermissions",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],p={toc:m};function d(e){var r=e.components,n=(0,s.Z)(e,o);return(0,i.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"namespaces"},"Namespaces"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null},"Name"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Permission"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/permissions_8cpp#function-getbasepermissions"},"getBasePermissions")),"(const Server & server, const ServerMember & member)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"void"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/permissions_8cpp#function-handleoverwrite"},"handleOverwrite")),"(Permission & target, const Permission & allow, const Permission & deny)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"void"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/permissions_8cpp#function-handleoverwrite"},"handleOverwrite")),"(Permission & target, const Overwrite & overwrite)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Permission"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/permissions_8cpp#function-overwritepermissions"},"overwritePermissions")),"(const Permission basePermissions, const Server & server, const ServerMember & member, const Channel & channel)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Permission"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},(0,i.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/permissions_8cpp#function-getpermissions"},"getPermissions")),"(const Server & server, const ServerMember & member, const Channel & channel)")))),(0,i.kt)("h2",{id:"functions-documentation"},"Functions Documentation"),(0,i.kt)("h3",{id:"function-getbasepermissions"},"function getBasePermissions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"Permission getBasePermissions(\n    const Server & server,\n    const ServerMember & member\n)\n")),(0,i.kt)("h3",{id:"function-handleoverwrite"},"function handleOverwrite"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void handleOverwrite(\n    Permission & target,\n    const Permission & allow,\n    const Permission & deny\n)\n")),(0,i.kt)("h3",{id:"function-handleoverwrite-1"},"function handleOverwrite"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"void handleOverwrite(\n    Permission & target,\n    const Overwrite & overwrite\n)\n")),(0,i.kt)("h3",{id:"function-overwritepermissions"},"function overwritePermissions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"Permission overwritePermissions(\n    const Permission basePermissions,\n    const Server & server,\n    const ServerMember & member,\n    const Channel & channel\n)\n")),(0,i.kt)("h3",{id:"function-getpermissions"},"function getPermissions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"Permission getPermissions(\n    const Server & server,\n    const ServerMember & member,\n    const Channel & channel\n)\n")),(0,i.kt)("h2",{id:"source-code"},"Source code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "permissions.h"\n#include "server.h"\n#include "channel.h"\n\nnamespace SleepyDiscord {\n    Permission getBasePermissions(const Server& server, const ServerMember& member) {\n        if (server.ownerID == member.user.ID)\n            return Permission::ALL;\n\n        auto everyoneRole = static_cast<Snowflake<Role>>(server.ID).findObject(server.roles);\n\n        if (everyoneRole == server.roles.end())\n            return Permission::NONE;\n\n        Permission permissions = everyoneRole->permissions;\n\n        for (Snowflake<Role> roleID : member.roles) {\n            auto rolePermissions = roleID.findObject(server.roles);\n            if (rolePermissions != server.roles.end())\n                permissions = permissions | rolePermissions->permissions;\n        }\n\n        if (hasPremission(permissions, Permission::ADMINISTRATOR))\n            return Permission::ALL;\n        return permissions;\n    }\n\n    void handleOverwrite(Permission& target, const Permission& allow, const Permission& deny) {\n        target = (target & static_cast<Permission>(~deny)) | allow;\n    }\n\n    void handleOverwrite(Permission& target, const Overwrite& overwrite) {\n        handleOverwrite(target, overwrite.allow, overwrite.deny);\n    }\n\n    Permission overwritePermissions(const Permission basePermissions, const Server& server, const ServerMember& member, const Channel& channel) {\n        if (hasPremission(basePermissions, Permission::ADMINISTRATOR))\n            return Permission::ALL;\n\n        Permission permissions = basePermissions;\n        const std::vector<Overwrite>& overwrites = channel.permissionOverwrites;\n\n        auto everyoneOverwrites = static_cast<Snowflake<Overwrite>>(server.ID).findObject(overwrites);\n        if (everyoneOverwrites != overwrites.end())\n            handleOverwrite(permissions, *everyoneOverwrites);\n\n        //role overwrites\n        Permission allow = NONE;\n        Permission deny = NONE;\n        for (Snowflake<Role> roleID : member.roles) {\n            auto roleOverwrite = static_cast<Snowflake<Overwrite>>(roleID).findObject(overwrites);\n            if (roleOverwrite != overwrites.end()) {\n                allow = allow | roleOverwrite->allow;\n                deny = deny | roleOverwrite->deny;\n            }\n        }\n\n        handleOverwrite(permissions, allow, deny);\n\n        //member overwrites\n        auto memberOverwrites = static_cast<Snowflake<Overwrite>>(member.user.ID).findObject(overwrites);\n        if (memberOverwrites != overwrites.end())\n            handleOverwrite(permissions, *memberOverwrites);\n\n        return permissions;\n    }\n\n    Permission getPermissions(const Server& server, const ServerMember& member, const Channel& channel) {\n        return overwritePermissions(getBasePermissions(server, member), server, member, channel);\n    }\n\n    Role::Role(const json::Value & json) :\n        Role(json::fromJSON<Role>(json)) {\n    }\n\n    Role::Tags::Tags(const json::Value& json) :\n        Tags(json::fromJSON<Tags>(json)) {\n    }\n}\n')),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}d.isMDXComponent=!0}}]);