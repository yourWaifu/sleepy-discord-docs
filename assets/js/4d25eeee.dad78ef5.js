"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[5873],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return k}});var r=t(7294);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,c=function(e,n){if(null==e)return{};var t,r,c={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var l=r.createContext({}),a=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=a(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,c=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=a(t),k=c,m=u["".concat(l,".").concat(k)]||u[k]||d[k]||o;return t?r.createElement(m,s(s({ref:n},p),{},{components:t})):r.createElement(m,s({ref:n},p))}));function k(e,n){var t=arguments,c=n&&n.mdxType;if("string"==typeof e||c){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:c,s[1]=i;for(var a=2;a<o;a++)s[a]=t[a];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},237:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return a},toc:function(){return p},default:function(){return u}});var r=t(3117),c=t(102),o=(t(7294),t(3905)),s=["components"],i={title:"include/sleepy_discord/websocketpp_websocket.h"},l=void 0,a={unversionedId:"reference/Files/websocketpp__websocket_8h",id:"reference/Files/websocketpp__websocket_8h",title:"include/sleepy_discord/websocketpp_websocket.h",description:"Namespaces",source:"@site/docs/reference/Files/websocketpp__websocket_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/websocketpp__websocket_8h",permalink:"/sleepy-discord/docs/reference/Files/websocketpp__websocket_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/websocketpp_websocket.h"},sidebar:"Reference",previous:{title:"sleepy_discord/websocketpp_websocket.cpp",permalink:"/sleepy-discord/docs/reference/Files/websocketpp__websocket_8cpp"},next:{title:"sleepy_discord/zlib_compression.cpp",permalink:"/sleepy-discord/docs/reference/Files/zlib__compression_8cpp"}},p=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Types",id:"types",children:[],level:2},{value:"Types Documentation",id:"types-documentation",children:[{value:"typedef _client",id:"typedef-_client",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:p};function u(e){var n=e.components,t=(0,c.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"namespaces"},"Namespaces"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,o.kt)("h2",{id:"classes"},"Classes"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"class"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_schedule_handler"},"SleepyDiscord::WebsocketppScheduleHandler")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"class"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/class_sleepy_discord_1_1_websocketpp_discord_client"},"SleepyDiscord::WebsocketppDiscordClient")))))),(0,o.kt)("h2",{id:"types"},"Types"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"typedef websocketpp::client< websocketpp::config::asio_tls_client >"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/websocketpp__websocket_8h#typedef-_client"},"_client")))))),(0,o.kt)("h2",{id:"types-documentation"},"Types Documentation"),(0,o.kt)("h3",{id:"typedef-_client"},"typedef _client"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef websocketpp::client<websocketpp::config::asio_tls_client> _client;\n")),(0,o.kt)("h2",{id:"source-code"},"Source code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include "websocketpp_common.h"\n#ifndef NONEXISTENT_WEBSOCKETPP\n#include <chrono>\n//#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/client.hpp>\n#include <websocketpp/common/thread.hpp>\n#include <websocketpp/common/memory.hpp>\n#include "client.h"\n#include "websocketpp_connection.h"\n#include "asio_schedule.h"\n#include "asio_udp.h"\n\ntypedef websocketpp::client<websocketpp::config::asio_tls_client> _client;\n\nnamespace SleepyDiscord {\n    //typedef GenericMessageReceiver MessageProcssor;\n\n    class WebsocketppScheduleHandler : public ASIOBasedScheduleHandler {\n    public:\n        WebsocketppScheduleHandler(_client& c) : client(c) {}\n        ~WebsocketppScheduleHandler() = default;\n        Timer schedule(TimedTask code, const time_t milliseconds) override;\n        inline websocketpp::lib::asio::io_service& getIOService() override {\n            return client.get_io_service();\n        }\n    private:\n        _client& client;\n    };\n\n    class WebsocketppDiscordClient : public BaseDiscordClient {\n    public:\n        WebsocketppDiscordClient() = default;\n        WebsocketppDiscordClient(const std::string token, const char numOfThreads = SleepyDiscord::DEFAULT_THREADS);\n        ~WebsocketppDiscordClient();\n\n        using TimerPointer = std::weak_ptr<websocketpp::lib::asio::steady_timer>;\n\n        void run() override;\n        Timer schedule(TimedTask code, const time_t milliseconds) override;\n        void postTask(PostableTask code) override {\n            asio::post(code);\n        }\n        //UDPClient createUDPClient() /* override*/;\n    protected:\n#include "standard_config_header.h"\n    private:\n        void init();\n        bool connect(const std::string & uri,\n            GenericMessageReceiver* messageProcessor,\n            WebsocketConnection& connection\n        ) override;\n        void disconnect(unsigned int code, const std::string reason, WebsocketConnection& connection) override;\n        void onClose(\n            websocketpp::connection_hdl handle,\n            GenericMessageReceiver* messageProcessor\n        );\n        void onFail(websocketpp::connection_hdl handle, GenericMessageReceiver* messageProcessor);\n        void send(std::string message, WebsocketConnection& connection) override;\n        void runAsync() override;\n        void onOpen(websocketpp::connection_hdl hdl, GenericMessageReceiver* messageProcessor);\n        void onMessage(\n            websocketpp::connection_hdl hdl,\n            websocketpp::config::asio_client::message_type::ptr msg, \n            GenericMessageReceiver* messageProcessor\n        );\n        void stopClient() override {\n            this_client.stop_perpetual();\n            this_client.stop();\n        }\n        _client this_client;\n        websocketpp::lib::shared_ptr<websocketpp::lib::thread> _thread;\n        websocketpp::connection_hdl handle;\n    };\n    typedef WebsocketppDiscordClient DiscordClient;\n}\n#else\n#ifndef BOOST_VERSION\n#undef ASIO_STANDALONE\n#undef _WEBSOCKETPP_CPP11_RANDOM_DEVICE_\n#undef _WEBSOCKETPP_CPP11_TYPE_TRAITS_\n#endif\n#endif\n')),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);