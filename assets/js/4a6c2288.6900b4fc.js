"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[4486],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return y}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),a=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=a(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,c=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=a(r),y=o,f=d["".concat(p,".").concat(y)]||d[y]||u[y]||c;return r?n.createElement(f,l(l({ref:t},s),{},{components:r})):n.createElement(f,l({ref:t},s))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=r.length,l=new Array(c);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var a=2;a<c;a++)l[a]=r[a];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7941:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return a},toc:function(){return s},default:function(){return d}});var n=r(3117),o=r(102),c=(r(7294),r(3905)),l=["components"],i={title:"SleepyDiscord::json::SmartPtrTypeHelper"},p=void 0,a={unversionedId:"reference/Classes/struct_sleepy_discord_1_1json_1_1_smart_ptr_type_helper",id:"reference/Classes/struct_sleepy_discord_1_1json_1_1_smart_ptr_type_helper",title:"SleepyDiscord::json::SmartPtrTypeHelper",description:"More...",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_smart_ptr_type_helper.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1json_1_1_smart_ptr_type_helper",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_smart_ptr_type_helper",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::json::SmartPtrTypeHelper"},sidebar:"Reference",previous:{title:"SleepyDiscord::json::PrimitiveTypeHelper",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_primitive_type_helper"},next:{title:"SleepyDiscord::json::StdArrayTypeHelper",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1json_1_1_std_array_type_helper"}},s=[{value:"Detailed Description",id:"detailed-description",children:[],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function toType",id:"function-totype",children:[],level:3},{value:"function fromType",id:"function-fromtype",children:[],level:3},{value:"function empty",id:"function-empty",children:[],level:3},{value:"function isType",id:"function-istype",children:[],level:3}],level:2}],u={toc:s};function d(e){var t=e.components,r=(0,o.Z)(e,l);return(0,c.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("p",null,(0,c.kt)("a",{parentName:"p",href:"#detailed-description"},"More...")),(0,c.kt)("h2",{id:"detailed-description"},"Detailed Description"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class SmartPtr ,\ntemplate< class... > class TypeHelper>\nstruct SleepyDiscord::json::SmartPtrTypeHelper;\n")),(0,c.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,c.kt)("h3",{id:"function-totype"},"function toType"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Value >\nstatic inline SmartPtr toType(\n    Value & value\n)\n")),(0,c.kt)("h3",{id:"function-fromtype"},"function fromType"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"static inline Value fromType(\n    const SmartPtr & value,\n    Value::AllocatorType & allocator\n)\n")),(0,c.kt)("h3",{id:"function-empty"},"function empty"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"static inline bool empty(\n    const SmartPtr & value\n)\n")),(0,c.kt)("h3",{id:"function-istype"},"function isType"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-cpp"},"static inline bool isType(\n    const Value & value\n)\n")),(0,c.kt)("hr",null),(0,c.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}d.isMDXComponent=!0}}]);