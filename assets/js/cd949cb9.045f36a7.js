"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[4735],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,f=p["".concat(c,".").concat(m)]||p[m]||l[m]||a;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var d=2;d<a;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6779:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return u},default:function(){return p}});var r=n(3117),o=n(102),a=(n(7294),n(3905)),s=["components"],i={title:"Unicode and Emojis",sidebar_label:"Unicode and Emojis"},c=void 0,d={unversionedId:"unicode",id:"unicode",title:"Unicode and Emojis",description:"C++ code is usually in ASCII but many times you will want to send messages with Unicode and Emojis.",source:"@site/docs/unicode.md",sourceDirName:".",slug:"/unicode",permalink:"/sleepy-discord/docs/unicode",tags:[],version:"current",lastUpdatedAt:1698528022,formattedLastUpdatedAt:"10/28/2023",frontMatter:{title:"Unicode and Emojis",sidebar_label:"Unicode and Emojis"},sidebar:"Docs",previous:{title:"Voice",permalink:"/sleepy-discord/docs/voice"},next:{title:"Snowflakes and IDs",permalink:"/sleepy-discord/docs/snowflake"}},u=[{value:"Standard Unicode Emojis and Characters",id:"standard-unicode-emojis-and-characters",children:[],level:2},{value:"C++20 and std::u8string",id:"c20-and-stdu8string",children:[],level:2},{value:"Custom Emojis",id:"custom-emojis",children:[],level:2}],l={toc:u};function p(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"C++ code is usually in ASCII but many times you will want to send messages with Unicode and Emojis."),(0,a.kt)("h2",{id:"standard-unicode-emojis-and-characters"},"Standard Unicode Emojis and Characters"),(0,a.kt)("p",null,"Sleepy Discord should store text content using UTF-8. As such, to use Unicode, you can use C++'s u8 string literals."),(0,a.kt)("p",null,"String Literal"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'auto foo = u8"\u8a9e";\nsendMessage(channelID, u8"\u8a9e");\n')),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The u8 string types are different in different C++ standards so auto is used and the above code may not work. ",(0,a.kt)("a",{parentName:"p",href:"#c20-and-stdu8string"},"More info here.")))),(0,a.kt)("p",null,"If you want to use ASCII in your source files, C++'s escape sequences also work. You'll want to look up the Unicode number for each character on a Unicode Character table. For example, \ud83d\udd34 has the Unicode number ",(0,a.kt)("inlineCode",{parentName:"p"},"U+1F534"),", so it's escape sequence is ",(0,a.kt)("inlineCode",{parentName:"p"},"\\U0001F534"),"."),(0,a.kt)("p",null,"Unicode code points"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'auto foo = u8"\\u8A9E"; //use little u for 4 digits\nauto bar = u8"\\u00B5"; //use zeros to fill up to 4 digits\nauto fuu = u8"\\U0001F534"; //use big U for 8 digits\n')),(0,a.kt)("p",null,"Numeric Hex escapes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'std::string foo = "\\xE8\\xAA\\x9E"; //one \\x for every byte in utf-8\n')),(0,a.kt)("h2",{id:"c20-and-stdu8string"},"C++20 and std::u8string"),(0,a.kt)("p",null,"In C++20, some of the above code will not work as the library currenty expects the std::string type instead of std::u8string."),(0,a.kt)("p",null,"Taking a look at the paper ",(0,a.kt)("a",{parentName:"p",href:"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1423r2.html"},"char8_t backward compatibility remediation (P1423)"),", there are many ways to cast a u8 char array to a char array that has the same behavior of eariler C++ standards."),(0,a.kt)("p",null,"Here's an example of explicit conversions from the paper."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"std::string from_u8string(const std::string &s) {\n  return s;\n}\nstd::string from_u8string(std::string &&s) {\n  return std::move(s);\n}\n#if defined(__cpp_lib_char8_t)\nstd::string from_u8string(const std::u8string &s) {\n  return std::string(s.begin(), s.end());\n}\n#endif\n\nstd::filesystem::path p = ...;\nstd::string s = from_u8string(p.u8string());  // C++17 or C++20\n")),(0,a.kt)("h2",{id:"custom-emojis"},"Custom Emojis"),(0,a.kt)("p",null,"If you want to insert Discord custom emojis into your text content, please prefer to ",(0,a.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/reference#message-formatting"},"the Discord API Message formatting reference"),"."))}p.isMDXComponent=!0}}]);