"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[5328],{3905:function(e,n,t){t.d(n,{Zo:function(){return i},kt:function(){return m}});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},i=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,l=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),u=c(t),m=s,y=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(y,o(o({ref:n},i),{},{components:t})):r.createElement(y,o({ref:n},i))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=u;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:s,o[1]=p;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2690:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return i},default:function(){return u}});var r=t(3117),s=t(102),a=(t(7294),t(3905)),o=["components"],p={title:"include/sleepy_discord/common_return_types.h"},l=void 0,c={unversionedId:"reference/Files/common__return__types_8h",id:"reference/Files/common__return__types_8h",title:"include/sleepy_discord/common_return_types.h",description:"Namespaces",source:"@site/docs/reference/Files/common__return__types_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/common__return__types_8h",permalink:"/sleepy-discord/docs/reference/Files/common__return__types_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/common_return_types.h"},sidebar:"Reference",previous:{title:"include/sleepy_discord/client.h",permalink:"/sleepy-discord/docs/reference/Files/client_8h"},next:{title:"include/sleepy_discord/compression.h",permalink:"/sleepy-discord/docs/reference/Files/compression_8h"}},i=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Classes",id:"classes",children:[],level:2},{value:"Types",id:"types",children:[],level:2},{value:"Functions",id:"functions",children:[],level:2},{value:"Types Documentation",id:"types-documentation",children:[{value:"typedef BoolResponse",id:"typedef-boolresponse",children:[],level:3},{value:"using ArrayResponse",id:"using-arrayresponse",children:[],level:3},{value:"using VoidResponse",id:"using-voidresponse",children:[],level:3}],level:2},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function SuccessCodeFn",id:"function-successcodefn",children:[],level:3},{value:"function EmptyRespFn",id:"function-emptyrespfn",children:[],level:3},{value:"function StandardRespFn",id:"function-standardrespfn",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],d={toc:i};function u(e){var n=e.components,t=(0,s.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"namespaces"},"Namespaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,a.kt)("h2",{id:"classes"},"Classes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_standard_response"},"SleepyDiscord::StandardResponse")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_boolean_response"},"SleepyDiscord::BooleanResponse")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_object_response"},"SleepyDiscord::ObjectResponse")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_array_response_wrapper"},"SleepyDiscord::ArrayResponseWrapper")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"struct"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_string_response"},"SleepyDiscord::StringResponse")))))),(0,a.kt)("h2",{id:"types"},"Types"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"typedef BooleanResponse"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/common__return__types_8h#typedef-boolresponse"},"BoolResponse")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"template <class Type ",">"," ",(0,a.kt)("br",null),"using json::ArrayWrapper< Type, ArrayResponseWrapper >"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/common__return__types_8h#using-arrayresponse"},"ArrayResponse")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"using StringResponse"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/common__return__types_8h#using-voidresponse"},"VoidResponse")))))),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null}),(0,a.kt)("th",{parentName:"tr",align:null},"Name"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"template <ErrorCode Code",">"," ",(0,a.kt)("br",null),"const BooleanResponse::Callback"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/common__return__types_8h#function-successcodefn"},"SuccessCodeFn")),"()")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"const BooleanResponse::Callback"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/common__return__types_8h#function-emptyrespfn"},"EmptyRespFn")),"()")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"const BooleanResponse::Callback"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"td"},(0,a.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/common__return__types_8h#function-standardrespfn"},"StandardRespFn")),"()")))),(0,a.kt)("h2",{id:"types-documentation"},"Types Documentation"),(0,a.kt)("h3",{id:"typedef-boolresponse"},"typedef BoolResponse"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"typedef BooleanResponse SleepyDiscord::BoolResponse;\n")),(0,a.kt)("h3",{id:"using-arrayresponse"},"using ArrayResponse"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Type >\nusing SleepyDiscord::ArrayResponse = typedef json::ArrayWrapper<Type, ArrayResponseWrapper>;\n")),(0,a.kt)("h3",{id:"using-voidresponse"},"using VoidResponse"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::VoidResponse = typedef StringResponse;\n")),(0,a.kt)("h2",{id:"functions-documentation"},"Functions Documentation"),(0,a.kt)("h3",{id:"function-successcodefn"},"function SuccessCodeFn"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template <ErrorCode Code>\ninline const BooleanResponse::Callback SuccessCodeFn()\n")),(0,a.kt)("h3",{id:"function-emptyrespfn"},"function EmptyRespFn"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const BooleanResponse::Callback EmptyRespFn()\n")),(0,a.kt)("h3",{id:"function-standardrespfn"},"function StandardRespFn"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const BooleanResponse::Callback StandardRespFn()\n")),(0,a.kt)("h2",{id:"source-code"},"Source code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <functional>\n#include "http.h"\n#include "json_wrapper.h"\n#include "error.h"\n\nnamespace SleepyDiscord {\n    struct StandardResponse : Response {    //This is here for possiable future use\n        explicit StandardResponse(const Response& response) : Response(response) {}\n    };\n\n    struct BooleanResponse : public StandardResponse {\n    public:\n        using StandardResponse::StandardResponse;\n        using Callback = std::function<bool(const Response& response)>;\n        using Type = bool;\n        BooleanResponse(const Response& response, const Callback callback) :\n            StandardResponse(response), wasSuccessful(callback) { }\n\n        inline operator Type() const {\n            return wasSuccessful(*this) || !error();\n        }\n\n        Type operator*() const {\n            return operator Type();\n        }\n\n        inline Type cast() {\n            return operator Type();\n        }\n\n        //this isn\'t a function so that we can override it during construction.\n        //this isn\'t a virtual function because then we need lots of child classes\n        //this isn\'t used in a template because then the user would have to write the right error handling function\n        const Callback wasSuccessful = [](const Response& /*response*/) { return true; };\n    };\n\n    typedef BooleanResponse BoolResponse;\n    \n    template<ErrorCode Code>\n    inline const BooleanResponse::Callback SuccessCodeFn() {\n        return [](const Response& response) {return response.statusCode == Code; };\n    }\n\n    inline const BooleanResponse::Callback EmptyRespFn() {\n        return SuccessCodeFn<NO_CONTENT>();\n    }\n\n    inline const BooleanResponse::Callback StandardRespFn() {\n        return SuccessCodeFn<OK>();\n    }\n\n\n    template<class _Type>\n    struct ObjectResponse : public StandardResponse {\n        using StandardResponse::StandardResponse;\n        using Type = _Type;\n\n        operator Type() { //to do use references instead of pointers\n            return error() ? Type() : Type(text);\n        }\n\n        Type& operator*() const {\n            return operator Type();\n        }\n\n        inline Type cast() {\n            return operator Type();\n        }\n\n        inline bool cast(Type& value) {\n            if (error())\n                return false;\n            rapidjson::Document doc;\n            rapidjson::ParseResult isOK =\n                doc.Parse(text.c_str(), text.length());\n            if (!isOK)\n                return false;\n            value = Type(doc);\n            return true;\n        }\n    };\n\n\n    struct ArrayResponseWrapper : public StandardResponse {\n        using StandardResponse::StandardResponse;\n        using Type = std::string;\n        inline operator const std::string&() const {\n            return text;\n        }\n        inline rapidjson::Document getDoc() {\n            rapidjson::Document arr; //ARR, I\'m a pirate\n            arr.Parse(text.data(), text.length());\n            return arr;\n        }\n        template<class Callback>\n        inline rapidjson::ParseResult getDoc(Callback& callback) {\n            rapidjson::Document arr;\n            rapidjson::ParseResult isOK =\n                arr.Parse(text.data(), text.length());\n            if (isOK) callback(arr);\n            return isOK;\n        }\n    };\n\n    template <class Type>\n    using ArrayResponse = json::ArrayWrapper<Type, ArrayResponseWrapper>;\n\n    struct StringResponse : public StandardResponse {\n        using StandardResponse::StandardResponse;\n        using Type = std::string;\n        inline operator const Type&() const {\n            return text;\n        }\n    };\n\n    using VoidResponse = StringResponse;\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);