"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[4775],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),d=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=d(e.components);return a.createElement(o.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(t),f=i,m=p["".concat(o,".").concat(f)]||p[f]||s[f]||r;return t?a.createElement(m,c(c({ref:n},u),{},{components:t})):a.createElement(m,c({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,c=new Array(r);c[0]=p;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,c[1]=l;for(var d=2;d<r;d++)c[d]=t[d];return a.createElement.apply(null,c)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8135:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return d},toc:function(){return u},default:function(){return p}});var a=t(3117),i=t(102),r=(t(7294),t(3905)),c=["components"],l={title:"SleepyDiscord::InteractionData::ResolvedData::Data"},o=void 0,d={unversionedId:"reference/Classes/struct_sleepy_discord_1_1_interaction_data_1_1_resolved_data_1_1_data",id:"reference/Classes/struct_sleepy_discord_1_1_interaction_data_1_1_resolved_data_1_1_data",title:"SleepyDiscord::InteractionData::ResolvedData::Data",description:"More...",source:"@site/docs/reference/Classes/struct_sleepy_discord_1_1_interaction_data_1_1_resolved_data_1_1_data.md",sourceDirName:"reference/Classes",slug:"/reference/Classes/struct_sleepy_discord_1_1_interaction_data_1_1_resolved_data_1_1_data",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_interaction_data_1_1_resolved_data_1_1_data",tags:[],version:"current",frontMatter:{title:"SleepyDiscord::InteractionData::ResolvedData::Data"},sidebar:"Reference",previous:{title:"SleepyDiscord::InteractionData::ResolvedData",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_interaction_data_1_1_resolved_data"},next:{title:"SleepyDiscord::Invite",permalink:"/sleepy-discord/docs/reference/Classes/struct_sleepy_discord_1_1_invite"}},u=[{value:"Detailed Description",id:"detailed-description",children:[],level:2},{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using JSONTypeHelper",id:"using-jsontypehelper",children:[],level:3},{value:"using Identifier",id:"using-identifier",children:[],level:3}],level:2},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function Data",id:"function-data",children:[],level:3},{value:"function Data",id:"function-data-1",children:[],level:3},{value:"function Data",id:"function-data-2",children:[],level:3},{value:"function serialize",id:"function-serialize",children:[],level:3},{value:"function empty",id:"function-empty",children:[],level:3},{value:"function find",id:"function-find",children:[],level:3},{value:"function find",id:"function-find-1",children:[],level:3},{value:"function end",id:"function-end",children:[],level:3},{value:"function cast",id:"function-cast",children:[],level:3},{value:"function find",id:"function-find-2",children:[],level:3},{value:"function find",id:"function-find-3",children:[],level:3},{value:"function createUnorderedMap",id:"function-createunorderedmap",children:[],level:3},{value:"function isType",id:"function-istype",children:[],level:3}],level:2},{value:"Public Attributes Documentation",id:"public-attributes-documentation",children:[{value:"variable data",id:"variable-data",children:[],level:3}],level:2}],s={toc:u};function p(e){var n=e.components,t=(0,i.Z)(e,c);return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"#detailed-description"},"More...")),(0,r.kt)("h2",{id:"detailed-description"},"Detailed Description"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"template <typename Type >\nstruct SleepyDiscord::InteractionData::ResolvedData::Data;\n")),(0,r.kt)("h2",{id:"public-types-documentation"},"Public Types Documentation"),(0,r.kt)("h3",{id:"using-jsontypehelper"},"using JSONTypeHelper"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::InteractionData::ResolvedData::Data< Type >::JSONTypeHelper =  json::ClassTypeHelper<json::Value>;\n")),(0,r.kt)("h3",{id:"using-identifier"},"using Identifier"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::InteractionData::ResolvedData::Data< Type >::Identifier =  typename Type::Identifier;\n")),(0,r.kt)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),(0,r.kt)("h3",{id:"function-data"},"function Data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Data() =default\n")),(0,r.kt)("h3",{id:"function-data-1"},"function Data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Data(\n    json::Value & json\n)\n")),(0,r.kt)("h3",{id:"function-data-2"},"function Data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Data(\n    const nonstd::string_view & json\n)\n")),(0,r.kt)("h3",{id:"function-serialize"},"function serialize"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"inline json::Value serialize(\n    typename json::Value::AllocatorType & alloc\n) const\n")),(0,r.kt)("h3",{id:"function-empty"},"function empty"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const bool empty() const\n")),(0,r.kt)("h3",{id:"function-find"},"function find"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"inline json::Value::MemberIterator find(\n    const Identifier & ID\n)\n")),(0,r.kt)("h3",{id:"function-find-1"},"function find"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"inline json::Value::MemberIterator find(\n    const Snowflake< DiscordObject > & ID\n)\n")),(0,r.kt)("h3",{id:"function-end"},"function end"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"inline json::Value::MemberIterator end()\n")),(0,r.kt)("h3",{id:"function-cast"},"function cast"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"inline Type cast(\n    json::Value::MemberIterator & member\n)\n")),(0,r.kt)("h3",{id:"function-find-2"},"function find"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const bool find(\n    const Identifier & ID,\n    Type & object\n)\n")),(0,r.kt)("h3",{id:"function-find-3"},"function find"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"inline const bool find(\n    const Snowflake< DiscordObject > & ID,\n    Type & object\n)\n")),(0,r.kt)("h3",{id:"function-createunorderedmap"},"function createUnorderedMap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"inline std::unordered_map< Identifier, Type > createUnorderedMap()\n")),(0,r.kt)("h3",{id:"function-istype"},"function isType"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"static inline const bool isType(\n    const typename json::Value & value\n)\n")),(0,r.kt)("h2",{id:"public-attributes-documentation"},"Public Attributes Documentation"),(0,r.kt)("h3",{id:"variable-data"},"variable data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"json::Value data;\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}p.isMDXComponent=!0}}]);