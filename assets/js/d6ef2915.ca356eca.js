"use strict";(self.webpackChunksleepy_discord_docs=self.webpackChunksleepy_discord_docs||[]).push([[9832],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return h}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),h=r,y=u["".concat(l,".").concat(h)]||u[h]||p[h]||o;return t?a.createElement(y,i(i({ref:n},c),{},{components:t})):a.createElement(y,i({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},586:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var a=t(3117),r=t(102),o=(t(7294),t(3905)),i=["components"],s={title:"include/sleepy_discord/sleepy_discord.h"},l=void 0,d={unversionedId:"reference/Files/sleepy__discord_8h",id:"reference/Files/sleepy__discord_8h",title:"include/sleepy_discord/sleepy_discord.h",description:"Namespaces",source:"@site/docs/reference/Files/sleepy__discord_8h.md",sourceDirName:"reference/Files",slug:"/reference/Files/sleepy__discord_8h",permalink:"/sleepy-discord/docs/reference/Files/sleepy__discord_8h",tags:[],version:"current",frontMatter:{title:"include/sleepy_discord/sleepy_discord.h"},sidebar:"Reference",previous:{title:"include/sleepy_discord/slash_commands.h",permalink:"/sleepy-discord/docs/reference/Files/slash__commands_8h"},next:{title:"include/sleepy_discord/snowflake.h",permalink:"/sleepy-discord/docs/reference/Files/snowflake_8h"}},c=[{value:"Namespaces",id:"namespaces",children:[],level:2},{value:"Defines",id:"defines",children:[],level:2},{value:"Macro Documentation",id:"macro-documentation",children:[{value:"define SLEEPY_DEFINE_CUSTOM_CLIENT",id:"define-sleepy_define_custom_client",children:[],level:3}],level:2},{value:"Source code",id:"source-code",children:[],level:2}],p={toc:c};function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"namespaces"},"Namespaces"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),(0,o.kt)("h2",{id:"defines"},"Defines"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},"Name"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"/sleepy-discord/docs/reference/Files/sleepy__discord_8h#define-sleepy_define_custom_client"},"SLEEPY_DEFINE_CUSTOM_CLIENT")))))),(0,o.kt)("h2",{id:"macro-documentation"},"Macro Documentation"),(0,o.kt)("h3",{id:"define-sleepy_define_custom_client"},"define SLEEPY_DEFINE_CUSTOM_CLIENT"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#define SLEEPY_DEFINE_CUSTOM_CLIENT namespace SleepyDiscord {\\\ntypedef BaseDiscordClient DiscordClient;\\\n}\n")),(0,o.kt)("h2",{id:"source-code"},"Source code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#pragma once\n\n#define SLEEPY_DEFINE_CUSTOM_CLIENT \\\nnamespace SleepyDiscord {\\\ntypedef BaseDiscordClient DiscordClient;\\\n}\n\n#ifdef SLEEPY_CUSTOM_CLIENT\n    #include \"client.h\"\n    SLEEPY_DEFINE_CUSTOM_CLIENT\n#elif defined(SLEEPY_DISCORD_CMAKE)\n    #if defined(EXISTENT_WEBSOCKETPP)\n        #include \"websocketpp_websocket.h\"\n    #elif defined(EXISTENT_UWEBSOCKETS)\n        #include \"uwebsockets_websocket.h\"\n    #else\n        #include \"client.h\"\n        SLEEPY_DEFINE_CUSTOM_CLIENT\n    #endif\n#else\n    #include \"websocketpp_websocket.h\"\n    #ifdef NONEXISTENT_WEBSOCKETPP\n        #include \"uwebsockets_websocket.h\"\n        #ifdef NONEXISTENT_UWEBSOCKETS\n            #include \"client.h\"\n            SLEEPY_DEFINE_CUSTOM_CLIENT\n        #endif\n    #endif\n#endif\n\n/*\nFEEDBACK\nacdenisSK - Today at 8:23 PM\natleast make it parse the json in the function ffs\n\nThe Almighty Shubshub - Today at 8:25 PM\nWhy aren't the message_create events bundled with an isprivate identifier?\n\nDanny - Today at 10:29 PM\n1. sleepy_c++_discord_library.h is an awful library name, consider using something a bit more sane like sleepy_discord.hpp or something.\n2. C++ style guide is snake_case not ThisCase or thisCase.\n3. SleepyDiscord::init is a global function that is a C-ism. C++ we tend to use RAII.\n4. Your use of new myEventClass has no notion of ownership.\n5. Your parameter jsonMessage has no notion of ownership.\n6. Forcing your users to do the heartbeat themselves is poor design.\n7. Sleep is not a standard function. std::this_thread::sleep_for(std::chrono::seconds(1)) is though.\n8. heartbeat is a global function again which makes me wonder how your design is.\n9. Casting to std::string like (std::string)message.author.username is most definitely the wrong thing to do.\n\nbased on your code I don't even think you know what modern C++ is\nlook up C++11/14/17\n\nmeh\nownership woes still\nand then there's the responsibility of creating the message\nalso I don't like your message API\nstd::string already exists.\ne.g. message.content.find(\"whcg hello\") == 0 works too\nand you could then use message.content with whatever accepts an std::string\nfor all I know message.content already exists.\n\nit's pretty meh\nI don't want some parsed JSON object\nif you're gonna use boost.asio use it all the way through\nhttps://github.com/Rapptz/Gears/blob/docs/gears/string/predicate.hpp\n\nDigiTechs - Today at 12:17 AM\nThat's a pretty bad way of passing data. I guess if it's written in C it makes sense but you should have written a thin wrapper in C++ for it\n\nI see, you are manually constructing JSON payload too\nSleepy Flower Girl - Today at 2:28 AM\nyea\nI don't see that as problem yet\nqwename - Today at 2:29 AM\nWell, it's error-prone, and you might not know the intricacies of JSON enough\nTiltMeSenpai - Today at 2:29 AM\nthere is a json lib for cpp floating around\nyou want that?\nSleepy Flower Girl - Today at 2:29 AM\nI don't need a json lib\nqwename - Today at 2:30 AM\nThe least you can do is pack it into a helper function\nSleepy Flower Girl - Today at 2:30 AM\nI understand it enugh that I don't need a lib for that\nqwename - Today at 2:31 AM\nI pass a dictionary around until I actually need to send the data, then I call a library function to return a JSON payload\nThe point isn't whether you understand it or not(edited)\nTiltMeSenpai - Today at 2:31 AM\nok that's not horrible actually\nqwename - Today at 2:31 AM\nRight now you have to specify all the curly brackets and commas and whatnot(edited)\nNEW MESSAGES\nqwename - Today at 2:32 AM\nWhich takes away time and effort from what you are actually accomplishing\nSo I suggest the minimum of putting that in a helper method.\nI think the map class is an associative array that can do what you need\nFrom <map>\n\nzey - Today at 12:24 AM\ni mention someone if\n- they'll otherwise miss it\n- they're afk\n- it's really important\n- it's Laura(edited)\n\n*/\n\nnamespace SleepyDiscord {\n    \n}\n")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Updated on 28 October 2023 at 21:20:08 UTC"))}u.isMDXComponent=!0}}]);