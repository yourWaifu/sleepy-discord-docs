(window.webpackJsonp=window.webpackJsonp||[]).push([[155],{226:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return p}));var r=t(3),o=t(7),s=(t(0),t(311)),a={title:"include/sleepy_discord/voice.h"},c={unversionedId:"reference/Files/voice_8h",id:"reference/Files/voice_8h",isDocsHomePage:!1,title:"include/sleepy_discord/voice.h",description:"Namespaces",source:"@site/docs\\reference\\Files\\voice_8h.md",slug:"/reference/Files/voice_8h",permalink:"/sleepy-discord-docs/docs/reference/Files/voice_8h",editUrl:"https://github.com/yourWaifu/sleepy-discord-docs/edit/master/docs/reference/Files/voice_8h.md",version:"current",sidebar:"someSidebar",previous:{title:"sleepy_discord/voice.cpp",permalink:"/sleepy-discord-docs/docs/reference/Files/voice_8cpp"},next:{title:"sleepy_discord/voice_connection.cpp",permalink:"/sleepy-discord-docs/docs/reference/Files/voice__connection_8cpp"}},i=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Classes",id:"classes",children:[]},{value:"Source code",id:"source-code",children:[]}],l={toc:i};function p(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"namespaces"},"Namespaces"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(s.b)("h2",{id:"classes"},"Classes"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",{parentName:"tr",align:null}),Object(s.b)("th",{parentName:"tr",align:null},"Name"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"struct"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_voice_state"},"SleepyDiscord::VoiceState")))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"struct"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_voice_region"},"SleepyDiscord::VoiceRegion")))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",{parentName:"tr",align:null},"struct"),Object(s.b)("td",{parentName:"tr",align:null},Object(s.b)("strong",{parentName:"td"},Object(s.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_voice_server_update"},"SleepyDiscord::VoiceServerUpdate")))))),Object(s.b)("h2",{id:"source-code"},"Source code"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include "discord_object_interface.h"\n#include "snowflake.h"\n#include "channel.h"\n\nnamespace SleepyDiscord {\n    //forward declearion\n    struct Server;\n    struct Channel;\n    struct User;\n\n    struct VoiceState : public DiscordObject {\n        VoiceState() = default;\n        VoiceState(const nonstd::string_view & rawJSON);\n        VoiceState(const json::Value& json);\n        Snowflake<Server> serverID;\n        Snowflake<Channel> channelID;\n        Snowflake<User> userID;\n        std::string sessionID;\n        bool deaf = false;\n        bool mute = false;\n        bool selfDeaf = false;\n        bool selfMute = false;\n        bool suppress = false;\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&VoiceState::serverID , "guild_id"  , json::OPTIONAL_FIELD ),\n                json::pair(&VoiceState::channelID, "channel_id", json::NULLABLE_FIELD ),\n                json::pair(&VoiceState::userID   , "user_id"   , json::REQUIRIED_FIELD),\n                json::pair(&VoiceState::sessionID, "session_id", json::REQUIRIED_FIELD),\n                json::pair(&VoiceState::deaf     , "deaf"      , json::REQUIRIED_FIELD),\n                json::pair(&VoiceState::mute     , "mute"      , json::REQUIRIED_FIELD),\n                json::pair(&VoiceState::selfDeaf , "self_deaf" , json::REQUIRIED_FIELD),\n                json::pair(&VoiceState::selfMute , "self_mute" , json::REQUIRIED_FIELD),\n                json::pair(&VoiceState::suppress , "suppress"  , json::REQUIRIED_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    /*\n    Voice Region Structure\n    Field           Type    Description\n    id              string  unique ID for the region\n    name            string  name of the region\n    sample_hostname string  an example hostname for the region\n    sample_port     integer an example port for the region\n    vip             bool    true if this is a vip-only server\n    optimal         bool    true for a single server that is closest to the current user\'s client\n    deprecated      bool    whether this is a deprecated voice region (avoid switching to these)\n    custom          bool    whether this is a custom voice region (used for events/etc)\n    */\n    struct VoiceRegion : IdentifiableDiscordObject<VoiceRegion> {\n        VoiceRegion() = default;\n        //VoiceRegion(const std::string * rawJson);\n        VoiceRegion(const nonstd::string_view & rawJSON);\n        VoiceRegion(const json::Value& json);\n        //VoiceRegion(const json::Values values);\n        std::string name;\n        bool vip = false;\n        bool optimal = false;\n        bool deprecated = false;\n        bool custom = false;\n        //const static std::initializer_list<const char*const> fields;\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&VoiceRegion::ID            , "id"        , json::REQUIRIED_FIELD),\n                json::pair(&VoiceRegion::name          , "name"      , json::REQUIRIED_FIELD),\n                json::pair(&VoiceRegion::vip           , "vip"       , json::REQUIRIED_FIELD),\n                json::pair(&VoiceRegion::optimal       , "optimal"   , json::REQUIRIED_FIELD),\n                json::pair(&VoiceRegion::deprecated    , "deprecated", json::REQUIRIED_FIELD),\n                json::pair(&VoiceRegion::custom        , "custom"    , json::REQUIRIED_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    /*\n    Voice Server Update Event Fields\n    Field     Type       Description\n    token     string     voice connection token\n    guild_id  snowflake  the guild this voice server update is for\n    endpoint  string     the voice server host\n    */\n    struct VoiceServerUpdate : DiscordObject {\n        VoiceServerUpdate() = default;\n        //VoiceServerUpdate(const std::string * rawJson);\n        VoiceServerUpdate(const nonstd::string_view & rawJSON);\n        VoiceServerUpdate(const json::Value& json);\n        //VoiceServerUpdate(const json::Values values);\n        std::string token;\n        Snowflake<Server> serverID;\n        std::string endpoint;\n        //const static std::initializer_list<const char*const> fields;\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&VoiceServerUpdate::token   , "token"   , json::REQUIRIED_FIELD),\n                json::pair(&VoiceServerUpdate::serverID, "guild_id", json::REQUIRIED_FIELD),\n                json::pair(&VoiceServerUpdate::endpoint, "endpoint", json::REQUIRIED_FIELD)\n            );\n        JSONStructEnd\n    };\n}\n')),Object(s.b)("hr",null),Object(s.b)("p",null,"Updated on  9 February 2021 at 07:04:58 Eastern Standard Time"))}p.isMDXComponent=!0},311:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return f}));var r=t(0),o=t.n(r);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),p=function(e){var n=o.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=p(e.components);return o.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},b=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,a=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(t),b=r,f=d["".concat(a,".").concat(b)]||d[b]||u[b]||s;return t?o.a.createElement(f,c(c({ref:n},l),{},{components:t})):o.a.createElement(f,c({ref:n},l))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,a=new Array(s);a[0]=b;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var l=2;l<s;l++)a[l]=t[l];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);