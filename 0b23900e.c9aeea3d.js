(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{311:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return E}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),o=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},u=function(e){var t=o(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},g=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),u=o(n),g=a,E=u["".concat(i,".").concat(g)]||u[g]||p[g]||l;return n?r.a.createElement(E,b(b({ref:t},c),{},{components:n})):r.a.createElement(E,b({ref:t},c))}));function E(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=g;var b={};for(var d in t)hasOwnProperty.call(t,d)&&(b[d]=t[d]);b.originalType=e,b.mdxType="string"==typeof e?e:a,i[1]=b;for(var c=2;c<l;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return b})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return o}));var a=n(3),r=n(7),l=(n(0),n(311)),i={title:"include/sleepy_discord/audit_log.h"},b={unversionedId:"reference/Files/audit__log_8h",id:"reference/Files/audit__log_8h",isDocsHomePage:!1,title:"include/sleepy_discord/audit_log.h",description:"Namespaces",source:"@site/docs\\reference\\Files\\audit__log_8h.md",slug:"/reference/Files/audit__log_8h",permalink:"/sleepy-discord-docs/docs/reference/Files/audit__log_8h",version:"current",sidebar:"Reference",previous:{title:"include/sleepy_discord/attachment.h",permalink:"/sleepy-discord-docs/docs/reference/Files/attachment_8h"},next:{title:"include/sleepy_discord/cache.h",permalink:"/sleepy-discord-docs/docs/reference/Files/cache_8h"}},d=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Classes",id:"classes",children:[]},{value:"Types",id:"types",children:[]},{value:"Types Documentation",id:"types-documentation",children:[{value:"enum AuditLogEvent",id:"enum-auditlogevent",children:[]},{value:"using AuditLogKey",id:"using-auditlogkey",children:[]}]},{value:"Source code",id:"source-code",children:[]}],c={toc:d};function o(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"namespaces"},"Namespaces"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Name"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",{parentName:"td"},Object(l.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(l.b)("h2",{id:"classes"},"Classes"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null}),Object(l.b)("th",{parentName:"tr",align:null},"Name"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"struct"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",{parentName:"td"},Object(l.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_audit_log_key_data"},"SleepyDiscord::AuditLogKeyData")))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"struct"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",{parentName:"td"},Object(l.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_audit_log"},"SleepyDiscord::AuditLog")))))),Object(l.b)("h2",{id:"types"},"Types"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null}),Object(l.b)("th",{parentName:"tr",align:null},"Name"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"enum"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",{parentName:"td"},Object(l.b)("a",{parentName:"strong",href:"/docs/reference/Files/audit__log_8h#enum-auditlogevent"},"AuditLogEvent"))," { GUILD_UPDATE = 1, CHANNEL_CREATE = 10, CHANNEL_UPDATE = 11, CHANNEL_DELETE = 12, CHANNEL_OVERWRITE_CREATE = 13, CHANNEL_OVERWRITE_UPDATE = 14, CHANNEL_OVERWRITE_DELETE = 15, MEMBER_KICK = 20, MEMBER_PRUNE = 21, MEMBER_BAN_ADD = 22, MEMBER_BAN_REMOVE = 23, MEMBER_UPDATE = 24, MEMBER_ROLE_UPDATE = 25, ROLE_CREATE = 30, ROLE_UPDATE = 31, ROLE_DELETE = 32, INVITE_CREATE = 40, INVITE_UPDATE = 41, INVITE_DELETE = 42, WEBHOOK_CREATE = 50, WEBHOOK_UPDATE = 51, WEBHOOK_DELETE = 52, EMOJI_CREATE = 60, EMOJI_UPDATE = 61, EMOJI_DELETE = 62, MESSAGE_DELETE = 72}")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"template <typename template< class, class > Data,ObjectChanged ,Type ",">"," ",Object(l.b)("br",null),"using std::pair< std::string, Data< ObjectChanged, Type > >"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",{parentName:"td"},Object(l.b)("a",{parentName:"strong",href:"/docs/reference/Files/audit__log_8h#using-auditlogkey"},"AuditLogKey")))))),Object(l.b)("h2",{id:"types-documentation"},"Types Documentation"),Object(l.b)("h3",{id:"enum-auditlogevent"},"enum AuditLogEvent"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Enumerator"),Object(l.b)("th",{parentName:"tr",align:null},"Value"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"GUILD_UPDATE"),Object(l.b)("td",{parentName:"tr",align:null},"1"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"CHANNEL_CREATE"),Object(l.b)("td",{parentName:"tr",align:null},"10"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"CHANNEL_UPDATE"),Object(l.b)("td",{parentName:"tr",align:null},"11"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"CHANNEL_DELETE"),Object(l.b)("td",{parentName:"tr",align:null},"12"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"CHANNEL_OVERWRITE_CREATE"),Object(l.b)("td",{parentName:"tr",align:null},"13"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"CHANNEL_OVERWRITE_UPDATE"),Object(l.b)("td",{parentName:"tr",align:null},"14"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"CHANNEL_OVERWRITE_DELETE"),Object(l.b)("td",{parentName:"tr",align:null},"15"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"MEMBER_KICK"),Object(l.b)("td",{parentName:"tr",align:null},"20"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"MEMBER_PRUNE"),Object(l.b)("td",{parentName:"tr",align:null},"21"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"MEMBER_BAN_ADD"),Object(l.b)("td",{parentName:"tr",align:null},"22"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"MEMBER_BAN_REMOVE"),Object(l.b)("td",{parentName:"tr",align:null},"23"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"MEMBER_UPDATE"),Object(l.b)("td",{parentName:"tr",align:null},"24"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"MEMBER_ROLE_UPDATE"),Object(l.b)("td",{parentName:"tr",align:null},"25"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ROLE_CREATE"),Object(l.b)("td",{parentName:"tr",align:null},"30"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ROLE_UPDATE"),Object(l.b)("td",{parentName:"tr",align:null},"31"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ROLE_DELETE"),Object(l.b)("td",{parentName:"tr",align:null},"32"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"INVITE_CREATE"),Object(l.b)("td",{parentName:"tr",align:null},"40"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"INVITE_UPDATE"),Object(l.b)("td",{parentName:"tr",align:null},"41"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"INVITE_DELETE"),Object(l.b)("td",{parentName:"tr",align:null},"42"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"WEBHOOK_CREATE"),Object(l.b)("td",{parentName:"tr",align:null},"50"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"WEBHOOK_UPDATE"),Object(l.b)("td",{parentName:"tr",align:null},"51"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"WEBHOOK_DELETE"),Object(l.b)("td",{parentName:"tr",align:null},"52"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"EMOJI_CREATE"),Object(l.b)("td",{parentName:"tr",align:null},"60"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"EMOJI_UPDATE"),Object(l.b)("td",{parentName:"tr",align:null},"61"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"EMOJI_DELETE"),Object(l.b)("td",{parentName:"tr",align:null},"62"),Object(l.b)("td",{parentName:"tr",align:null})),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"MESSAGE_DELETE"),Object(l.b)("td",{parentName:"tr",align:null},"72"),Object(l.b)("td",{parentName:"tr",align:null})))),Object(l.b)("h3",{id:"using-auditlogkey"},"using AuditLogKey"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cpp"},"template <typename template< class, class > Data,\nObjectChanged ,\nType >\nusing SleepyDiscord::AuditLogKey = typedef std::pair<std::string, Data<ObjectChanged, Type> >;\n")),Object(l.b)("h2",{id:"source-code"},"Source code"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include "webhook.h"\n#include "user.h"\n#include "server.h"\n#include <tuple>\n#include <utility>\n\nnamespace SleepyDiscord {\n    enum class AuditLogEvent {\n        GUILD_UPDATE             = 1,\n        CHANNEL_CREATE           = 10,\n        CHANNEL_UPDATE           = 11,\n        CHANNEL_DELETE           = 12,\n        CHANNEL_OVERWRITE_CREATE = 13,\n        CHANNEL_OVERWRITE_UPDATE = 14,\n        CHANNEL_OVERWRITE_DELETE = 15,\n        MEMBER_KICK              = 20,\n        MEMBER_PRUNE             = 21,\n        MEMBER_BAN_ADD           = 22,\n        MEMBER_BAN_REMOVE        = 23,\n        MEMBER_UPDATE            = 24,\n        MEMBER_ROLE_UPDATE       = 25,\n        ROLE_CREATE              = 30,\n        ROLE_UPDATE              = 31,\n        ROLE_DELETE              = 32,\n        INVITE_CREATE            = 40,\n        INVITE_UPDATE            = 41,\n        INVITE_DELETE            = 42,\n        WEBHOOK_CREATE           = 50,\n        WEBHOOK_UPDATE           = 51,\n        WEBHOOK_DELETE           = 52,\n        EMOJI_CREATE             = 60,\n        EMOJI_UPDATE             = 61,\n        EMOJI_DELETE             = 62,\n        MESSAGE_DELETE           = 72\n    };\n\n    template<class _ObjectChanged, class _Type>\n    struct AuditLogKeyData {\n    public:\n        using ObjectChanged = _ObjectChanged;\n        using Type = _type;\n    };\n\n    template<typename template<class, class> Data, ObjectChanged, Type>\n    using AuditLogKey = std::pair<std::string, Data<ObjectChanged, Type>>; \n\n    struct AuditLog {\n    public:\n\n        const static auto keys = std::make_tuple(\n            AuditLogKey("name"                         , AuditLogKeyData<Server , std::string           >()),\n            AuditLogKey("icon_hash"                    , AuditLogKeyData<Server , std::string           >()),\n            AuditLogKey("splash_hash"                  , AuditLogKeyData<Server , std::string           >()),\n            AuditLogKey("owner_id"                     , AuditLogKeyData<Server , Snowflake<User>       >()),\n            AuditLogKey("region"                       , AuditLogKeyData<Server , std::string           >()),\n            AuditLogKey("afk_channel_id"               , AuditLogKeyData<Server , Snowflake<Channel>    >()),\n            AuditLogKey("afk_timeout"                  , AuditLogKeyData<Server , int                   >()),\n            AuditLogKey("mfa_level"                    , AuditLogKeyData<Server , int                   >()),\n            AuditLogKey("verification_level"           , AuditLogKeyData<Server , int                   >()),\n            AuditLogKey("explicit_content_filter"      , AuditLogKeyData<Server , int                   >()),\n            AuditLogKey("default_message_notifications", AuditLogKeyData<Server , int                   >()),\n            AuditLogKey("vanity_url_code"              , AuditLogKeyData<Server , std::string           >()),\n            AuditLogKey("$add"                         , AuditLogKeyData<Server , std::vector<Role>     >()),\n            AuditLogKey("$remove"                      , AuditLogKeyData<Server , std::vector<Role>     >()),\n            AuditLogKey("prune_delete_days"            , AuditLogKeyData<Server , int                   >()),\n            AuditLogKey("widget_enabled"               , AuditLogKeyData<Server , bool                  >()),\n            AuditLogKey("widget_channel_id"            , AuditLogKeyData<Server , Snowflake<Channel>    >()),\n            AuditLogKey("position"                     , AuditLogKeyData<Channel, int                   >()),\n            AuditLogKey("topic"                        , AuditLogKeyData<Channel, std::string           >()),\n            AuditLogKey("bitrate"                      , AuditLogKeyData<Channel, int                   >()),\n            AuditLogKey("permission_overwrites"        , AuditLogKeyData<Channel, std::vector<Overwrite>>()),\n            AuditLogKey("nsfw"                         , AuditLogKeyData<Channel, bool                  >()),\n            AuditLogKey("application_id"               , AuditLogKeyData<Channel, std::string           >()), //to do use Snowflake\n            AuditLogKey("permissions"                  , AuditLogKeyData<Role   , int                   >()),\n            AuditLogKey("color"                        , AuditLogKeyData<Role   , int                   >()),\n            AuditLogKey("hoist"                        , AuditLogKeyData<Role   , bool                  >()),\n            AuditLogKey("mentionable"                  , AuditLogKeyData<Role   , bool                  >()),\n            AuditLogKey("allow"                        , AuditLogKeyData<Role   , int                   >()),\n            AuditLogKey("deny"                         , AuditLogKeyData<Role   , int                   >()),\n            AuditLogKey("code"                         , AuditLogKeyData<Invite , std::string           >()),\n            AuditLogKey("channel_id"                   , AuditLogKeyData<Invite , Snowflake<Channel>    >()),\n            AuditLogKey("inviter_id"                   , AuditLogKeyData<Invite , Snowflake<User>       >()),\n            AuditLogKey("max_uses"                     , AuditLogKeyData<Invite , int                   >()),\n            AuditLogKey("uses"                         , AuditLogKeyData<Invite , int                   >()),\n            AuditLogKey("max_age"                      , AuditLogKeyData<Invite , int                   >()),\n            AuditLogKey("temporary"                    , AuditLogKeyData<Invite , bool                  >()),\n            AuditLogKey("deaf"                         , AuditLogKeyData<User   , bool                  >()),\n            AuditLogKey("mute"                         , AuditLogKeyData<User   , bool                  >()),\n            AuditLogKey("nick"                         , AuditLogKeyData<User   , std::string           >()),\n            AuditLogKey("avatar_hash"                  , AuditLogKeyData<User   , std::string           >()),\n            AuditLogKey("id"                           , AuditLogKeyData<void   , Snowflake::RawType    >()),\n            //to do: type doesn\'t really fit into the above format\n        );\n    };\n}\n')),Object(l.b)("hr",null),Object(l.b)("p",null,"Updated on  9 February 2021 at 07:04:58 Eastern Standard Time"))}o.isMDXComponent=!0}}]);