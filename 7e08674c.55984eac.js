(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{185:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return d}));var r=n(3),a=n(7),o=(n(0),n(311)),c={title:"include/sleepy_discord/snowflake.h"},s={unversionedId:"reference/Files/snowflake_8h",id:"reference/Files/snowflake_8h",isDocsHomePage:!1,title:"include/sleepy_discord/snowflake.h",description:"Namespaces",source:"@site/docs\\reference\\Files\\snowflake_8h.md",slug:"/reference/Files/snowflake_8h",permalink:"/sleepy-discord-docs/docs/reference/Files/snowflake_8h",version:"current",sidebar:"Reference",previous:{title:"include/sleepy_discord/sleepy_discord.h",permalink:"/sleepy-discord-docs/docs/reference/Files/sleepy__discord_8h"},next:{title:"include/sleepy_discord/standard_config.h",permalink:"/sleepy-discord-docs/docs/reference/Files/standard__config_8h"}},i=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Classes",id:"classes",children:[]},{value:"Types",id:"types",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Types Documentation",id:"types-documentation",children:[{value:"using Time",id:"using-time",children:[]}]},{value:"Functions Documentation",id:"functions-documentation",children:[{value:"function operator+",id:"function-operator",children:[]},{value:"function operator==",id:"function-operator-1",children:[]},{value:"function operator!=",id:"function-operator-2",children:[]}]},{value:"Source code",id:"source-code",children:[]}],l={toc:i};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"namespaces"},"Namespaces"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},"Name"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"td"},Object(o.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(o.b)("h2",{id:"classes"},"Classes"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null}),Object(o.b)("th",{parentName:"tr",align:null},"Name"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"struct"),Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"td"},Object(o.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_snowflake"},"SleepyDiscord::Snowflake")))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"struct"),Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"td"},Object(o.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_snowflake_1_1_has_a_find_function"},"SleepyDiscord::Snowflake::HasAFindFunction")))),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"struct"),Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"td"},Object(o.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_snowflake_1_1_has_a_find_function_1_1_magic"},"SleepyDiscord::Snowflake::HasAFindFunction::Magic")))))),Object(o.b)("h2",{id:"types"},"Types"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null}),Object(o.b)("th",{parentName:"tr",align:null},"Name"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"using int64_t"),Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"td"},Object(o.b)("a",{parentName:"strong",href:"/docs/reference/Files/snowflake_8h#using-time"},"Time")))))),Object(o.b)("h2",{id:"functions"},"Functions"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null}),Object(o.b)("th",{parentName:"tr",align:null},"Name"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"template <typename DiscordOject ",">"," ",Object(o.b)("br",null),"std::string"),Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"td"},Object(o.b)("a",{parentName:"strong",href:"/docs/reference/Files/snowflake_8h#function-operator+"},"operator+")),"(const char * left, Snowflake< DiscordOject > & right)")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"template <typename DiscordOject ",">"," ",Object(o.b)("br",null),"bool"),Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"td"},Object(o.b)("a",{parentName:"strong",href:"/docs/reference/Files/snowflake_8h#function-operator=="},"operator==")),"(const char * left, Snowflake< DiscordOject > & right)")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},"template <typename DiscordOject ",">"," ",Object(o.b)("br",null),"bool"),Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"td"},Object(o.b)("a",{parentName:"strong",href:"/docs/reference/Files/snowflake_8h#function-operator!="},"operator!=")),"(const char * left, Snowflake< DiscordOject > & right)")))),Object(o.b)("h2",{id:"types-documentation"},"Types Documentation"),Object(o.b)("h3",{id:"using-time"},"using Time"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Time = typedef int64_t;\n")),Object(o.b)("h2",{id:"functions-documentation"},"Functions Documentation"),Object(o.b)("h3",{id:"function-operator"},"function operator+"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-cpp"},"template <typename DiscordOject >\ninline std::string operator+(\n    const char * left,\n    Snowflake< DiscordOject > & right\n)\n")),Object(o.b)("h3",{id:"function-operator-1"},"function operator=="),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-cpp"},"template <typename DiscordOject >\ninline bool operator==(\n    const char * left,\n    Snowflake< DiscordOject > & right\n)\n")),Object(o.b)("h3",{id:"function-operator-2"},"function operator!="),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-cpp"},"template <typename DiscordOject >\ninline bool operator!=(\n    const char * left,\n    Snowflake< DiscordOject > & right\n)\n")),Object(o.b)("h2",{id:"source-code"},"Source code"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <string>\n#include <chrono>\n#include <algorithm>\n#if defined(__cpp_exceptions) || defined(__EXCEPTIONS)\n#include <stdexcept>\n#endif\n#include "nonstd/string_view.hpp"\n#include "json_wrapper.h"\n\nnamespace SleepyDiscord {\n    using Time = int64_t;\n\n    //Stops you from mixing up different types of ids, like using a message_id as a user_id\n    template <typename DiscordObject>\n    struct Snowflake {\n        using RawType = std::string;\n        \n        Snowflake(                                  ) = default;\n        Snowflake(const std::string         & snow  ) : raw( snow                         ) {}\n        Snowflake(const std::string         * snow  ) : raw(*snow                         ) {}\n        Snowflake(const char                * snow  ) : raw( snow                         ) {}\n        Snowflake(const nonstd::string_view & snow  ) : raw(snow.data(), snow.length()    ) {}\n        Snowflake(const Snowflake           & flake ) : Snowflake(flake.string(          )) {}\n        Snowflake(const DiscordObject       & object) : Snowflake(object. ID              ) {}\n        Snowflake(const DiscordObject       * object) : Snowflake(object->ID              ) {}\n        Snowflake(const int64_t               number) : Snowflake(std::to_string(number  )) {}\n        Snowflake(const json::Value         & value ) :\n            Snowflake(value.IsString() ? json::toStdString(value) : std::string()) {}\n        ~Snowflake() = default;\n\n        inline bool operator==(const Snowflake& right) const {\n            return raw == right.raw;\n        }\n\n        inline bool operator!=(const Snowflake& right) const {\n            return raw != right.raw;\n        }\n\n        inline bool operator==(const char* right) const {\n            return raw == right;\n        }\n\n        inline bool operator!=(const char* right) const {\n            return raw != right;\n        }\n\n        inline operator const std::string&() const { return raw; }\n\n        inline const std::string& string() const { return operator const std::string&(); }\n        inline const int64_t number() const { return std::stoll(raw); }\n\n        std::chrono::time_point<std::chrono::steady_clock> timestamp() const {\n#if defined(__cpp_exceptions) || defined(__EXCEPTIONS)\n            if (raw == "") throw std::invalid_argument("invalid snow in Snowflake");\n#endif\n            return std::chrono::time_point<std::chrono::steady_clock>(std::chrono::milliseconds((std::stoll(raw) >> 22) + discordEpoch));\n        }\n\n        inline const bool empty() const { return raw.empty(); }\n\n        inline json::Value serialize(typename json::Value::AllocatorType& alloc) const {\n            return json::ClassTypeHelper<RawType>::fromType(raw, alloc);\n        }\n\n        template<class iterator>\n        inline iterator findObject(iterator begin, iterator end) const {\n            return std::find_if(begin, end, [&](const DiscordObject& object) {\n                return operator==(static_cast<DiscordObject>(object));\n            });\n        }\n\n        //Magical code from stackflow\n        //https://stackoverflow.com/a/87846\n        template<class Container>\n        struct HasAFindFunction {\n            using SuccessType = char;\n            using FailureType = int;\n            template<class _Container, size_t (_Container::*)() const> struct Magic {};\n            template<class _Container> static SuccessType Test(Magic<_Container, &_Container::find>*);\n            template<class _Container> static FailureType Test(...);\n            static const bool Value = sizeof(Test<Container>(0)) == sizeof(SuccessType);\n        };\n\n        template<class Container>\n        auto findObject(Container& objects, std::true_type) const -> decltype(objects.begin()) {\n            return objects.find(operator const std::string&());\n        }\n\n        template<class Container>\n        auto findObject(Container& objects, std::false_type) const -> decltype(objects.begin()) {\n            return findObject(objects.begin(), objects.end());\n        }\n\n        template<class Container>\n        auto findObject(Container& objects) const -> decltype(objects.begin()) {\n            return findObject(objects, std::integral_constant<bool, HasAFindFunction<Container>::Value>());\n        }\n\n    private:\n        RawType raw = {};\n        static const Time discordEpoch = 1420070400000; //the first second of 2015 since epoch\n    };\n\n    template <typename DiscordOject>\n    inline std::string operator+(const char * left, Snowflake<DiscordOject>& right) {\n        return left + right.operator const std::string&();\n    }\n\n    template <typename DiscordOject>\n    inline bool operator==(const char * left, Snowflake<DiscordOject>& right) {\n        return left == right.operator const std::string&().c_str();\n    }\n\n    template <typename DiscordOject>\n    inline bool operator!=(const char * left, Snowflake<DiscordOject>& right) {\n        return left != right.operator const std::string&().c_str();\n    }\n}\n')),Object(o.b)("hr",null),Object(o.b)("p",null,"Updated on  9 February 2021 at 07:04:58 Eastern Standard Time"))}d.isMDXComponent=!0},311:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),d=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=d(n),u=r,f=p["".concat(c,".").concat(u)]||p[u]||b[u]||o;return n?a.a.createElement(f,s(s({ref:t},l),{},{components:n})):a.a.createElement(f,s({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=u;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,c[1]=s;for(var l=2;l<o;l++)c[l]=n[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);