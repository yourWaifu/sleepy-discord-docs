(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{144:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return p}));var r=n(3),s=n(7),a=(n(0),n(311)),c={title:"include/sleepy_discord/cpr_session.h"},o={unversionedId:"reference/Files/cpr__session_8h",id:"reference/Files/cpr__session_8h",isDocsHomePage:!1,title:"include/sleepy_discord/cpr_session.h",description:"Namespaces",source:"@site/docs\\reference\\Files\\cpr__session_8h.md",slug:"/reference/Files/cpr__session_8h",permalink:"/sleepy-discord-docs/docs/reference/Files/cpr__session_8h",editUrl:"https://github.com/yourWaifu/sleepy-discord-docs/edit/master/docs/reference/Files/cpr__session_8h.md",version:"current",sidebar:"someSidebar",previous:{title:"sleepy_discord/cpr_session.cpp",permalink:"/sleepy-discord-docs/docs/reference/Files/cpr__session_8cpp"},next:{title:"include/sleepy_discord/custom_connection.h",permalink:"/sleepy-discord-docs/docs/reference/Files/custom__connection_8h"}},i=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Classes",id:"classes",children:[]},{value:"Types",id:"types",children:[]},{value:"Types Documentation",id:"types-documentation",children:[{value:"typedef Session",id:"typedef-session",children:[]}]},{value:"Source code",id:"source-code",children:[]}],l={toc:i};function p(e){var t=e.components,n=Object(s.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"namespaces"},"Namespaces"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null},"Name"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(a.b)("h2",{id:"classes"},"Classes"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null}),Object(a.b)("th",{parentName:"tr",align:null},"Name"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"class"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_c_p_r_session"},"SleepyDiscord::CPRSession")))))),Object(a.b)("h2",{id:"types"},"Types"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",{parentName:"tr",align:null}),Object(a.b)("th",{parentName:"tr",align:null},"Name"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",{parentName:"tr",align:null},"typedef CPRSession"),Object(a.b)("td",{parentName:"tr",align:null},Object(a.b)("strong",{parentName:"td"},Object(a.b)("a",{parentName:"strong",href:"/docs/reference/Files/cpr__session_8h#typedef-session"},"Session")))))),Object(a.b)("h2",{id:"types-documentation"},"Types Documentation"),Object(a.b)("h3",{id:"typedef-session"},"typedef Session"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"typedef CustomSession SleepyDiscord::Session;\n")),Object(a.b)("h2",{id:"source-code"},"Source code"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n\n#if defined(SLEEPY_DISCORD_CMAKE)\n    #if defined(EXISTENT_CPR)\n        #include <cpr/cpr.h>\n    #else\n        #define NONEXISTENT_CPR\n    #endif\n#else\n    #include <cpr/cpr.h>\n#endif\n\n#ifndef NONEXISTENT_CPR\n#include "http.h"\n\nnamespace SleepyDiscord {\n    class CPRSession : public GenericSession {\n    public:\n        inline void setUrl(const std::string& url) {\n            session.SetUrl(cpr::Url{ url });\n        }\n        inline void setBody(const std::string* jsonParameters) {\n            session.SetBody(cpr::Body{ *jsonParameters });\n        }\n        void setHeader(const std::vector<HeaderPair>& header);\n        void setMultipart(const std::vector<Part>& parts);\n        void setResponseCallback(const ResponseCallback& callback) {\n            responseCallback = callback;\n        }\n        Response request(RequestMethod method);\n    private:\n        Response perform(RequestMethod method);\n        cpr::Session session;\n        //muiltpart is needs to be here when uploading images,\n        //so that it\'s not deallocated when making the request\n        cpr::Multipart muiltpart = {};\n        ResponseCallback responseCallback;\n    };\n\n    typedef CPRSession Session;\n}\n\n#endif\n')),Object(a.b)("hr",null),Object(a.b)("p",null,"Updated on  9 February 2021 at 07:04:58 Eastern Standard Time"))}p.isMDXComponent=!0},311:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(0),s=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=s.a.createContext({}),p=function(e){var t=s.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return s.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return s.a.createElement(s.a.Fragment,{},t)}},u=s.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,m=d["".concat(c,".").concat(u)]||d[u]||b[u]||a;return n?s.a.createElement(m,o(o({ref:t},l),{},{components:n})):s.a.createElement(m,o({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,c[1]=o;for(var l=2;l<a;l++)c[l]=n[l];return s.a.createElement.apply(null,c)}return s.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);