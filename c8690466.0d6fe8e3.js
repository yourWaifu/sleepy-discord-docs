(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{261:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),i=(n(0),n(319)),c={title:"include/sleepy_discord/cache.h"},o={unversionedId:"reference/Files/cache_8h",id:"reference/Files/cache_8h",isDocsHomePage:!1,title:"include/sleepy_discord/cache.h",description:"Namespaces",source:"@site/docs\\reference\\Files\\cache_8h.md",slug:"/reference/Files/cache_8h",permalink:"/sleepy-discord-docs/docs/reference/Files/cache_8h",version:"current",sidebar:"Reference",previous:{title:"include/sleepy_discord/audit_log.h",permalink:"/sleepy-discord-docs/docs/reference/Files/audit__log_8h"},next:{title:"sleepy_discord/channel.cpp",permalink:"/sleepy-discord-docs/docs/reference/Files/channel_8cpp"}},l=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Classes",id:"classes",children:[]},{value:"Types",id:"types",children:[]},{value:"Types Documentation",id:"types-documentation",children:[{value:"using CacheParent",id:"using-cacheparent",children:[]}]},{value:"Source code",id:"source-code",children:[]}],s={toc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"namespaces"},"Namespaces"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Name"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(i.b)("h2",{id:"classes"},"Classes"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null}),Object(i.b)("th",{parentName:"tr",align:null},"Name"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_cache"},"SleepyDiscord::Cache")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"class"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_cache_1_1const__iterator"},"SleepyDiscord::Cache::const_iterator")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"class"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/docs/reference/Classes/class_sleepy_discord_1_1_cache_1_1iterator"},"SleepyDiscord::Cache::iterator")))))),Object(i.b)("h2",{id:"types"},"Types"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null}),Object(i.b)("th",{parentName:"tr",align:null},"Name"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"template <class _Type ",">"," ",Object(i.b)("br",null),"using std::unordered_map< typename Snowflake< _Type >::RawType, _Type >"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/docs/reference/Files/cache_8h#using-cacheparent"},"CacheParent")))))),Object(i.b)("h2",{id:"types-documentation"},"Types Documentation"),Object(i.b)("h3",{id:"using-cacheparent"},"using CacheParent"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"template <class _Type >\nusing SleepyDiscord::CacheParent = typedef std::unordered_map<typename Snowflake<_Type>::RawType, _Type>;\n")),Object(i.b)("h2",{id:"source-code"},"Source code"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <algorithm>\n#include <unordered_map>\n#include "snowflake.h"\n#include "server.h"\n#include "channel.h"\n\nnamespace SleepyDiscord {\n    template<class _Type>\n    using CacheParent = std::unordered_map<typename Snowflake<_Type>::RawType, _Type>;\n\n    //This is basicity an unordered_map made to work with the library\n    //only works with Discord Object with an id\n    template<class _Type>\n    struct Cache : public CacheParent<_Type> {\n    public:\n        using Type = _Type;\n        using Parent = CacheParent<_Type>;\n        using std::unordered_map<typename Snowflake<_Type>::RawType, _Type>::unordered_map;\n        using Key = typename Snowflake<Type>::RawType;\n        Cache() : Parent() {}\n        Cache(Parent map) : Parent(map) {}\n        template<class InputIterator>\n        Cache(InputIterator first, InputIterator last) {\n            for (InputIterator it = first; it != last; ++it) {\n                emplace(*it);\n            }\n        }\n\n        class const_iterator {\n        public:\n            using Value = typename Parent::const_iterator;\n            //standard iterator values\n            using self_type = const_iterator;\n            using value_type = Type;\n            using reference = Type&;\n            using pointer = Type*;\n            using iterator_category = typename Value::iterator_category;\n            using difference_type = typename Value::difference_type;\n            const_iterator(Value iter) : value(iter) {}\n            inline self_type operator++() { return value++; }\n            inline self_type operator++(int junk) { return value.operator++(junk); }\n            inline reference operator*() { return value->second; }\n            inline pointer operator->() { return &value->second; }\n            inline bool operator==(const self_type& right) { return value == right.value; }\n            inline bool operator!=(const self_type& right) { return value != value.value; }\n            inline Value getParent() { return value; }\n        private:\n            Value value;\n        };\n\n        class iterator {\n        public:\n            using Value = typename Parent::iterator;\n            //standard iterator values\n            using self_type = iterator;\n            using value_type = Type;\n            using reference = Type&;\n            using pointer = Type*;\n            using iterator_category = typename Value::iterator_category;\n            using difference_type = typename Value::difference_type;\n            iterator(Value iter) : value(iter) {}\n            inline self_type operator++() { return value++; }\n            inline self_type operator++(int junk) { return value.operator++(junk); }\n            inline reference operator*() { return value->second; }\n            inline pointer operator->() { return &value->second; }\n            inline bool operator==(const self_type& right) { return value == right.value; }\n            inline bool operator!=(const self_type& right) { return value != right.value; }\n            inline operator const_iterator() { return const_iterator(value); }\n            inline Value getParent() { return value; }\n        private:\n            Value value;\n        };\n\n        inline iterator begin() {\n            return iterator(Parent::begin());\n        }\n\n        inline iterator end() {\n            return iterator(Parent::end());\n        }\n\n        inline const_iterator begin() const {\n            return const_iterator(Parent::begin());\n        }\n\n        inline const_iterator end() const {\n            return const_iterator(Parent::begin());\n        }\n\n        //Worse then linear time\n        template<class Container, class Object>\n        const_iterator findOneWithObject(Container Type::*list, const Snowflake<Object>& objectID) {\n            return const_iterator(\n                std::find_if(Parent::begin(), Parent::end(), [list, &objectID](typename Parent::value_type& thing) {\n                    auto result = objectID.findObject(thing.second.*list);\n                    return result != (thing.second.*list).end();\n                })\n            );\n        }\n\n        std::pair<iterator,bool> insert(Type& value) {\n            std::pair<typename Parent::iterator,bool> pair = Parent::insert(typename Parent::value_type(value.ID, value));\n            return {iterator(pair.first), pair.second};\n        }\n\n        template<class... Args>\n        std::pair<iterator, bool> emplace(const json::Value& value) {\n            const json::Value& ID = value["id"];\n            std::pair<typename Parent::iterator,bool> pair = Parent::emplace(std::string(ID.GetString(), ID.GetStringLength()), value);\n            return {iterator(pair.first), pair.second};\n        }\n\n        iterator find(const Key& key) {\n            return iterator(Parent::find(key));\n        }\n\n        const_iterator find(const Key& key) const {\n            return const_iterator(Parent::find(key));\n        }\n\n        iterator erase(const_iterator pos) {\n            return iterator(Parent::erase(pos.getParent()));\n        }\n\n        iterator erase(const_iterator first, const_iterator last) {\n            return iterator(Parent::erase(first.getParent(), last.getParent()));\n        }\n\n        //In the case of push_back needed\n        //remove /**/\n        /*\n        //Does not add to the end, this is just for compatability for\n        //some SleepyDiscord functions\n        inline void push_back(const Type& value) {\n            insert(value);\n        }\n\n        inline void push_back(Type&& value) {\n            insert(value);\n        }\n        */\n    };\n}\n')),Object(i.b)("hr",null),Object(i.b)("p",null,"Updated on  9 February 2021 at 07:04:58 Eastern Standard Time"))}p.isMDXComponent=!0},319:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return y}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),b=r,y=u["".concat(c,".").concat(b)]||u[b]||d[b]||i;return n?a.a.createElement(y,o(o({ref:t},s),{},{components:n})):a.a.createElement(y,o({ref:t},s))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=b;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,c[1]=o;for(var s=2;s<i;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);