(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{205:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return a})),t.d(n,"default",(function(){return d}));var r=t(3),c=t(7),o=(t(0),t(311)),s={title:"sleepy_discord/uwebsockets_websocket.cpp"},i={unversionedId:"reference/Files/uwebsockets__websocket_8cpp",id:"reference/Files/uwebsockets__websocket_8cpp",isDocsHomePage:!1,title:"sleepy_discord/uwebsockets_websocket.cpp",description:"Namespaces",source:"@site/docs\\reference\\Files\\uwebsockets__websocket_8cpp.md",slug:"/reference/Files/uwebsockets__websocket_8cpp",permalink:"/sleepy-discord-docs/docs/reference/Files/uwebsockets__websocket_8cpp",version:"current",sidebar:"Reference",previous:{title:"include/sleepy_discord/uwebsockets_connection.h",permalink:"/sleepy-discord-docs/docs/reference/Files/uwebsockets__connection_8h"},next:{title:"include/sleepy_discord/uwebsockets_websocket.h",permalink:"/sleepy-discord-docs/docs/reference/Files/uwebsockets__websocket_8h"}},a=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Source code",id:"source-code",children:[]}],u={toc:a};function d(e){var n=e.components,t=Object(c.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"namespaces"},"Namespaces"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},"Name"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"td"},Object(o.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(o.b)("h2",{id:"source-code"},"Source code"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-cpp"},'#include "uwebsockets_websocket.h"\n#ifndef NONEXISTENT_UWEBSOCKETS\n#include <iostream>\n\nnamespace SleepyDiscord {\n    UWebSocketsDiscordClient::~UWebSocketsDiscordClient() {\n        thread.join();\n    }\n\n    UWebSocketsDiscordClient::UWebSocketsDiscordClient(const std::string token, const char numOfThreads) :\n        maxNumOfThreads(numOfThreads) {\n        hub.onConnection([=](uWS::WebSocket<uWS::CLIENT>* ws, uWS::HttpRequest req) {\n            auto connection = static_cast<uWS::WebSocket<uWS::CLIENT>**>(ws->getUserData());\n            *connection = ws;\n        });\n        hub.onMessage([=](uWS::WebSocket<uWS::CLIENT>* ws, char * message, size_t length, uWS::OpCode opCode) {\n            processMessage(message);\n        });\n        hub.onError([=](void *user) {\n            isConnectionBad = true;\n        });\n\n        start(token, numOfThreads);\n    }\n\n    bool UWebSocketsDiscordClient::connect(const std::string & uri, GenericMessageReceiver* messageProcessor, WebsocketConnection* connection) {\n        isConnectionBad = false;\n        hub.connect(uri, connection);\n        return !isConnectionBad;\n    }\n\n    void UWebSocketsDiscordClient::run() {\n        hub.run();\n    }\n\n    Timer UWebSocketsDiscordClient::schedule(std::function<void()> code, const time_t milliseconds) {\n        uS::Timer *timer = new uS::Timer(hub.getLoop());\n        timer->setData(&code);\n        timer->start([](uS::Timer *timer) {\n            (*static_cast<std::function<void()>*>(timer->getData()))();\n            timer->close();\n        }, milliseconds, 0);\n        return Timer(\n            [timer]() {\n                timer->stop();\n                timer->close();\n            }\n        );\n    }\n\n    void UWebSocketsDiscordClient::runAsync() {\n        thread = std::thread([this]() { hub.run(); });\n    }\n\n    void UWebSocketsDiscordClient::disconnect(unsigned int code, const std::string reason, WebsocketConnection* connection) {\n        /*the static cast should do a compile time check that WebsocketConnection\n          is the correct type*/\n        static_cast<uWS::WebSocket<uWS::CLIENT>*>(*connection)->close();\n    }\n\n    void UWebSocketsDiscordClient::send(std::string message, WebsocketConnection* connection) {\n        //if disconnect doesn\'t give an error then this should also be fine\n        (*connection)->send(message.c_str());\n    }\n\n#include "standard_config.h"\n\n\n/* list of needed librarys to compile this\nuWS.lib\nlibuv.lib\niphlpapi.lib\npsapi.lib\nuserenv.lib\nzlibstat.lib\n*/\n\n\n}\n#endif\n')),Object(o.b)("hr",null),Object(o.b)("p",null,"Updated on  9 February 2021 at 07:04:59 Eastern Standard Time"))}d.isMDXComponent=!0},311:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return m}));var r=t(0),c=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,c=function(e,n){if(null==e)return{};var t,r,c={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var u=c.a.createContext({}),d=function(e){var n=c.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return c.a.createElement(u.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return c.a.createElement(c.a.Fragment,{},n)}},p=c.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),l=d(t),p=r,m=l["".concat(s,".").concat(p)]||l[p]||b[p]||o;return t?c.a.createElement(m,i(i({ref:n},u),{},{components:t})):c.a.createElement(m,i({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=p;var i={};for(var a in n)hasOwnProperty.call(n,a)&&(i[a]=n[a]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=t[u];return c.a.createElement.apply(null,s)}return c.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);