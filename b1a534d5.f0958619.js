(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{238:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return i})),t.d(n,"default",(function(){return p}));var r=t(3),s=t(7),o=(t(0),t(319)),a={title:"sleepy_discord/message.cpp"},c={unversionedId:"reference/Files/message_8cpp",id:"reference/Files/message_8cpp",isDocsHomePage:!1,title:"sleepy_discord/message.cpp",description:"Namespaces",source:"@site/docs\\reference\\Files\\message_8cpp.md",slug:"/reference/Files/message_8cpp",permalink:"/sleepy-discord-docs/docs/reference/Files/message_8cpp",version:"current",sidebar:"Reference",previous:{title:"include/sleepy_discord/json_wrapper.h",permalink:"/sleepy-discord-docs/docs/reference/Files/json__wrapper_8h"},next:{title:"include/sleepy_discord/message.h",permalink:"/sleepy-discord-docs/docs/reference/Files/message_8h"}},i=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Source code",id:"source-code",children:[]}],l={toc:i};function p(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"namespaces"},"Namespaces"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},"Name"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",{parentName:"td"},Object(o.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(o.b)("h2",{id:"source-code"},"Source code"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-cpp"},'#include "message.h"\n#include "client.h"\n\nnamespace SleepyDiscord {\n    Message::Message(const json::Value& json) :\n        Message(json::fromJSON<Message>(json))\n    {}\n\n    Message::Message(const nonstd::string_view& json) :\n        Message(json::fromJSON<Message>(json))\n    {}\n\n    bool Message::startsWith(const std::string& test) {\n        return content.compare(0, test.length(), test) == 0;\n    }\n\n    std::size_t Message::length() {\n        return content.length();\n    }\n\n    bool Message::isMentioned(Snowflake<User> userID) {\n        std::size_t size = mentions.size();\n        for (std::size_t i = 0; i < size; i++)\n            if (mentions[i].ID == userID) return true;\n        return false;\n    }\n\n    bool Message::isMentioned(User& _user) {\n        return isMentioned(_user.ID);\n    }\n\n    Message Message::send(BaseDiscordClient* client) {\n        return client->sendMessage(channelID, content, !embeds.empty() ? embeds[0] : Embed(), static_cast<TTS>(tts));\n    }\n\n    Message Message::reply(BaseDiscordClient * client, std::string message, Embed embed)\n    {\n        return client->sendMessage(channelID, message, embed);\n    }\n\n    Emoji::~Emoji() {\n    }\n\n    Emoji::Emoji(const json::Value& json) :\n        Emoji(json::fromJSON<Emoji>(json)) {\n    }\n\n    Emoji::Emoji(const nonstd::string_view& json) :\n        Emoji(json::fromJSON<Emoji>(json)) {\n    }\n\n    Reaction::~Reaction() {\n    }\n\n    Reaction::Reaction(const json::Value& json) :\n        Reaction(json::fromJSON<Reaction>(json)) {\n    }\n\n    Reaction::Reaction(const nonstd::string_view& json) :\n        Reaction(json::fromJSON<Reaction>(json)) {\n    }\n}\n')),Object(o.b)("hr",null),Object(o.b)("p",null,"Updated on  9 February 2021 at 07:04:59 Eastern Standard Time"))}p.isMDXComponent=!0},319:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return b}));var r=t(0),s=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=s.a.createContext({}),p=function(e){var n=s.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=p(e.components);return s.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return s.a.createElement(s.a.Fragment,{},n)}},m=s.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,b=d["".concat(a,".").concat(m)]||d[m]||u[m]||o;return t?s.a.createElement(b,c(c({ref:n},l),{},{components:t})):s.a.createElement(b,c({ref:n},l))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=m;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var l=2;l<o;l++)a[l]=t[l];return s.a.createElement.apply(null,a)}return s.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);