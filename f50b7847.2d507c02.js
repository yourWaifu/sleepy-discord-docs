(window.webpackJsonp=window.webpackJsonp||[]).push([[226],{299:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return d}));var r=n(3),a=n(7),i=(n(0),n(317)),s={title:"include/sleepy_discord/invite.h"},c={unversionedId:"reference/Files/invite_8h",id:"reference/Files/invite_8h",isDocsHomePage:!1,title:"include/sleepy_discord/invite.h",description:"Namespaces",source:"@site/docs\\reference\\Files\\invite_8h.md",slug:"/reference/Files/invite_8h",permalink:"/sleepy-discord-docs/docs/reference/Files/invite_8h",version:"current",sidebar:"Reference",previous:{title:"sleepy_discord/invite.cpp",permalink:"/sleepy-discord-docs/docs/reference/Files/invite_8cpp"},next:{title:"include/sleepy_discord/json.h",permalink:"/sleepy-discord-docs/docs/reference/Files/json_8h"}},o=[{value:"Namespaces",id:"namespaces",children:[]},{value:"Classes",id:"classes",children:[]},{value:"Source code",id:"source-code",children:[]}],l={toc:o};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"namespaces"},"Namespaces"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Name"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/docs/reference/Namespaces/namespace_sleepy_discord"},"SleepyDiscord")))))),Object(i.b)("h2",{id:"classes"},"Classes"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null}),Object(i.b)("th",{parentName:"tr",align:null},"Name"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_invite"},"SleepyDiscord::Invite")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"struct"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"td"},Object(i.b)("a",{parentName:"strong",href:"/docs/reference/Classes/struct_sleepy_discord_1_1_invite_metadata"},"SleepyDiscord::InviteMetadata")))))),Object(i.b)("h2",{id:"source-code"},"Source code"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},'#pragma once\n#include <string>\n#include "discord_object_interface.h"\n#include "user.h"\n#include "server.h"\n#include "channel.h"\n#include "snowflake.h"\n\nnamespace SleepyDiscord {\n    /*\n    Invite Structure    Represents a code that when used, adds a user to a guild.\n\n    Field      Type                      Description\n    code       string                    the invite code (unique ID)\n    guild      a invite guild object     the guild this invite is for\n    channel    a invite channel object   the channel this invite is for\n    */\n    struct Invite : public DiscordObject {\n    public:\n        Invite() = default;\n        //~Invite();\n        //Invite(const std::string * rawJson);\n        Invite(const json::Value & json);\n        Invite(const nonstd::string_view & rawJSON);\n        //Invite(const json::Values values);\n        std::string code;\n        Server server;\n        Channel channel;\n\n        //const static std::initializer_list<const char*const> fields;\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&Invite::code   , "code"   , json::REQUIRIED_FIELD),\n                json::pair(&Invite::server , "guild"  , json::OPTIONAL_FIELD ),\n                json::pair(&Invite::channel, "channel", json::REQUIRIED_FIELD)\n            );\n        JSONStructEnd\n    };\n\n    /*\n    Invite Metadata Structure\n\n    Field       Type            Description\n    inviter     a user object   user who created the invite\n    uses        integer         number of times this invite has been used\n    max_uses    integer         max number of times this invite can be used\n    max_age     integer         duration (in seconds) after which the invite expires\n    temporary   bool            whether this invite only grants temporary membership\n    created_at  datetime        when this invite was created\n    revoked     bool            whether this invite is revoked\n    */\n    struct InviteMetadata : public DiscordObject {\n        InviteMetadata() = default;\n        //~InviteMetadata();\n        //InviteMetadata(const std::string * rawJson);\n        //InviteMetadata(const json::Values values);\n        InviteMetadata(const json::Value & json);\n        InviteMetadata(const nonstd::string_view & json);\n        User inviter;\n        int uses = 0;\n        int max_users = 0;\n        int max_age = 0;\n        bool isTemporary;\n        std::string createAt;\n        bool revoked;\n\n        //const static std::initializer_list<const char*const> fields;\n        JSONStructStart\n            std::make_tuple(\n                json::pair(&InviteMetadata::inviter    , "inviter"   , json::REQUIRIED_FIELD),\n                json::pair(&InviteMetadata::uses       , "uses"      , json::REQUIRIED_FIELD),\n                json::pair(&InviteMetadata::max_users  , "max_uses"  , json::REQUIRIED_FIELD),\n                json::pair(&InviteMetadata::max_age    , "max_age"   , json::REQUIRIED_FIELD),\n                json::pair(&InviteMetadata::isTemporary, "temporary" , json::REQUIRIED_FIELD),\n                json::pair(&InviteMetadata::createAt   , "created_at", json::REQUIRIED_FIELD),\n                json::pair(&InviteMetadata::revoked    , "revoked"   , json::REQUIRIED_FIELD)\n            );\n        JSONStructEnd\n    };\n}\n')),Object(i.b)("hr",null),Object(i.b)("p",null,"Updated on  9 February 2021 at 07:04:58 Eastern Standard Time"))}d.isMDXComponent=!0},317:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),d=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=d(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=d(n),b=r,m=u["".concat(s,".").concat(b)]||u[b]||p[b]||i;return n?a.a.createElement(m,c(c({ref:t},l),{},{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=b;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var l=2;l<i;l++)s[l]=n[l];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);