(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{247:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return l}));var r=n(3),c=n(7),a=(n(0),n(311)),o={title:"SleepyDiscord::Cache::const_iterator"},i={unversionedId:"reference/Classes/class_sleepy_discord_1_1_cache_1_1const__iterator",id:"reference/Classes/class_sleepy_discord_1_1_cache_1_1const__iterator",isDocsHomePage:!1,title:"SleepyDiscord::Cache::const_iterator",description:"Public Types Documentation",source:"@site/docs\\reference\\Classes\\class_sleepy_discord_1_1_cache_1_1const__iterator.md",slug:"/reference/Classes/class_sleepy_discord_1_1_cache_1_1const__iterator",permalink:"/sleepy-discord-docs/docs/reference/Classes/class_sleepy_discord_1_1_cache_1_1const__iterator",editUrl:"https://github.com/yourWaifu/sleepy-discord-docs/edit/master/docs/reference/Classes/class_sleepy_discord_1_1_cache_1_1const__iterator.md",version:"current",sidebar:"someSidebar",previous:{title:"SleepyDiscord::BaseVoiceEventHandler",permalink:"/sleepy-discord-docs/docs/reference/Classes/class_sleepy_discord_1_1_base_voice_event_handler"},next:{title:"SleepyDiscord::Cache::iterator",permalink:"/sleepy-discord-docs/docs/reference/Classes/class_sleepy_discord_1_1_cache_1_1iterator"}},p=[{value:"Public Types Documentation",id:"public-types-documentation",children:[{value:"using Value",id:"using-value",children:[]},{value:"using self_type",id:"using-self_type",children:[]},{value:"using value_type",id:"using-value_type",children:[]},{value:"using reference",id:"using-reference",children:[]},{value:"using pointer",id:"using-pointer",children:[]},{value:"using iterator_category",id:"using-iterator_category",children:[]},{value:"using difference_type",id:"using-difference_type",children:[]}]},{value:"Public Functions Documentation",id:"public-functions-documentation",children:[{value:"function const_iterator",id:"function-const_iterator",children:[]},{value:"function operator++",id:"function-operator",children:[]},{value:"function operator++",id:"function-operator-1",children:[]},{value:"function operator*",id:"function-operator-2",children:[]},{value:"function operator-&gt;",id:"function-operator-",children:[]},{value:"function operator==",id:"function-operator-3",children:[]},{value:"function operator!=",id:"function-operator-4",children:[]},{value:"function getParent",id:"function-getparent",children:[]}]}],s={toc:p};function l(e){var t=e.components,n=Object(c.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"public-types-documentation"},"Public Types Documentation"),Object(a.b)("h3",{id:"using-value"},"using Value"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::const_iterator::Value =  typename Parent::const_iterator;\n")),Object(a.b)("h3",{id:"using-self_type"},"using self_type"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::const_iterator::self_type =  const_iterator;\n")),Object(a.b)("h3",{id:"using-value_type"},"using value_type"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::const_iterator::value_type =  Type;\n")),Object(a.b)("h3",{id:"using-reference"},"using reference"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::const_iterator::reference =  Type&;\n")),Object(a.b)("h3",{id:"using-pointer"},"using pointer"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::const_iterator::pointer =  Type*;\n")),Object(a.b)("h3",{id:"using-iterator_category"},"using iterator_category"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::const_iterator::iterator_category =  typename Value::iterator_category;\n")),Object(a.b)("h3",{id:"using-difference_type"},"using difference_type"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"using SleepyDiscord::Cache< _Type >::const_iterator::difference_type =  typename Value::difference_type;\n")),Object(a.b)("h2",{id:"public-functions-documentation"},"Public Functions Documentation"),Object(a.b)("h3",{id:"function-const_iterator"},"function const_iterator"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline const_iterator(\n    Value iter\n)\n")),Object(a.b)("h3",{id:"function-operator"},"function operator++"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline self_type operator++()\n")),Object(a.b)("h3",{id:"function-operator-1"},"function operator++"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline self_type operator++(\n    int junk\n)\n")),Object(a.b)("h3",{id:"function-operator-2"},"function operator*"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline reference operator*()\n")),Object(a.b)("h3",{id:"function-operator-"},"function operator->"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline pointer operator->()\n")),Object(a.b)("h3",{id:"function-operator-3"},"function operator=="),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline bool operator==(\n    const self_type & right\n)\n")),Object(a.b)("h3",{id:"function-operator-4"},"function operator!="),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline bool operator!=(\n    const self_type & right\n)\n")),Object(a.b)("h3",{id:"function-getparent"},"function getParent"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-cpp"},"inline Value getParent()\n")),Object(a.b)("hr",null),Object(a.b)("p",null,"Updated on  9 February 2021 at 07:04:54 Eastern Standard Time"))}l.isMDXComponent=!0},311:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),c=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,c=function(e,t){if(null==e)return{};var n,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var s=c.a.createContext({}),l=function(e){var t=c.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return c.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},b=c.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=l(n),b=r,f=u["".concat(o,".").concat(b)]||u[b]||d[b]||a;return n?c.a.createElement(f,i(i({ref:t},s),{},{components:n})):c.a.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=b;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<a;s++)o[s]=n[s];return c.a.createElement.apply(null,o)}return c.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);